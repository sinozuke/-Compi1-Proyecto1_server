
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Apr 13 10:31:37 CST 2016
//----------------------------------------------------

package BackEnd.Analizador.Ecuaciones;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Apr 13 10:31:37 CST 2016
  */
public class Analizador_Sintactico_ecuaciones extends java_cup.runtime.lr_parser {

    public double resultado;
    
  /** Default constructor. */
  public Analizador_Sintactico_ecuaciones() {super();}

  /** Constructor which sets the default scanner. */
  public Analizador_Sintactico_ecuaciones(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Analizador_Sintactico_ecuaciones(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\022\000\002\002\004\000\002\002\003\000\002\003" +
    "\005\000\002\003\003\000\002\004\005\000\002\004\003" +
    "\000\002\005\005\000\002\005\003\000\002\013\002\000" +
    "\002\006\007\000\002\007\010\000\002\007\003\000\002" +
    "\010\010\000\002\010\003\000\002\011\005\000\002\011" +
    "\003\000\002\012\005\000\002\012\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\047\000\002\001\002\000\004\002\051\001\002\000" +
    "\006\002\000\010\037\001\002\000\016\002\ufffa\006\ufffa" +
    "\007\015\010\ufffa\011\ufffa\016\ufffa\001\002\000\014\002" +
    "\ufffc\006\013\010\ufffc\011\ufffc\016\ufffc\001\002\000\012" +
    "\002\ufffe\010\ufffe\011\011\016\ufffe\001\002\000\002\001" +
    "\002\000\014\002\ufffd\006\013\010\ufffd\011\ufffd\016\ufffd" +
    "\001\002\000\002\001\002\000\016\002\ufffb\006\ufffb\007" +
    "\015\010\ufffb\011\ufffb\016\ufffb\001\002\000\014\004\016" +
    "\005\024\012\025\015\023\017\026\001\002\000\004\013" +
    "\044\001\002\000\034\002\ufff2\004\ufff2\005\ufff2\006\ufff2" +
    "\007\ufff2\010\ufff2\011\ufff2\012\ufff2\014\ufff2\015\ufff2\016" +
    "\ufff2\017\ufff2\021\ufff2\001\002\000\034\002\ufff4\004\ufff4" +
    "\005\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4\012\ufff4\014" +
    "\ufff4\015\ufff4\016\ufff4\017\ufff4\021\ufff4\001\002\000\030" +
    "\002\ufff6\004\ufff6\005\ufff6\006\ufff6\007\ufff6\010\ufff6\011" +
    "\ufff6\012\ufff6\015\ufff6\016\ufff6\017\ufff6\001\002\000\014" +
    "\004\ufff9\005\ufff9\012\ufff9\015\ufff9\017\ufff9\001\002\000" +
    "\002\001\002\000\004\013\031\001\002\000\036\002\ufff0" +
    "\004\ufff0\005\ufff0\006\ufff0\007\ufff0\010\ufff0\011\ufff0\012" +
    "\ufff0\014\ufff0\015\ufff0\016\ufff0\017\ufff0\020\ufff0\021\ufff0" +
    "\001\002\000\006\012\025\015\023\001\002\000\004\020" +
    "\030\001\002\000\034\002\ufff3\004\ufff3\005\ufff3\006\ufff3" +
    "\007\ufff3\010\ufff3\011\ufff3\012\ufff3\014\ufff3\015\ufff3\016" +
    "\ufff3\017\ufff3\021\ufff3\001\002\000\010\012\025\015\023" +
    "\017\026\001\002\000\004\021\033\001\002\000\010\012" +
    "\025\015\023\017\026\001\002\000\004\014\035\001\002" +
    "\000\034\002\ufff5\004\ufff5\005\ufff5\006\ufff5\007\ufff5\010" +
    "\ufff5\011\ufff5\012\ufff5\014\ufff5\015\ufff5\016\ufff5\017\ufff5" +
    "\021\ufff5\001\002\000\006\010\037\016\040\001\002\000" +
    "\002\001\002\000\036\002\ufff1\004\ufff1\005\ufff1\006\ufff1" +
    "\007\ufff1\010\ufff1\011\ufff1\012\ufff1\014\ufff1\015\ufff1\016" +
    "\ufff1\017\ufff1\020\ufff1\021\ufff1\001\002\000\012\002\uffff" +
    "\010\uffff\011\011\016\uffff\001\002\000\014\004\016\005" +
    "\024\012\025\015\023\017\026\001\002\000\016\002\ufff8" +
    "\006\ufff8\007\ufff8\010\ufff8\011\ufff8\016\ufff8\001\002\000" +
    "\012\005\024\012\025\015\023\017\026\001\002\000\004" +
    "\021\046\001\002\000\012\005\024\012\025\015\023\017" +
    "\026\001\002\000\004\014\050\001\002\000\030\002\ufff7" +
    "\004\ufff7\005\ufff7\006\ufff7\007\ufff7\010\ufff7\011\ufff7\012" +
    "\ufff7\015\ufff7\016\ufff7\017\ufff7\001\002\000\004\002\001" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\047\000\014\002\003\003\004\004\007\005\006\006" +
    "\005\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\005" +
    "\011\006\005\001\001\000\002\001\001\000\004\006\013" +
    "\001\001\000\002\001\001\000\012\007\021\010\020\011" +
    "\017\012\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\041\001" +
    "\001\000\012\003\035\004\007\005\006\006\005\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\026\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\011\031" +
    "\012\016\001\001\000\002\001\001\000\006\011\033\012" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\004\040\005\006\006\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\007\042\010\020" +
    "\011\017\012\016\001\001\000\002\001\001\000\010\010" +
    "\044\011\017\012\016\001\001\000\002\001\001\000\010" +
    "\010\046\011\017\012\016\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Analizador_Sintactico_ecuaciones$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Analizador_Sintactico_ecuaciones$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Analizador_Sintactico_ecuaciones$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /**Metodo al que se llama automáticamente ante algún error sintactico.*/
    public void syntax_error(Symbol s){
		System.out.println("Error en la Línea " + (s.right+1) +" Columna "+s.left+ ". Identificador "
        +s.value + " no reconocido.");
    }

    /**Metodo al que se llama en el momento en que ya no es posible una recuperación de
    errores.*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
		System.out.println("Error en la Línea " + (s.right+1)+ "Columna "+s.left+". Identificador " +
        s.value + " no reconocido.");
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Analizador_Sintactico_ecuaciones$actions {


        
		

  private final Analizador_Sintactico_ecuaciones parser;

  /** Constructor */
  CUP$Analizador_Sintactico_ecuaciones$actions(Analizador_Sintactico_ecuaciones parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Analizador_Sintactico_ecuaciones$do_action(
    int                        CUP$Analizador_Sintactico_ecuaciones$act_num,
    java_cup.runtime.lr_parser CUP$Analizador_Sintactico_ecuaciones$parser,
    java.util.Stack            CUP$Analizador_Sintactico_ecuaciones$stack,
    int                        CUP$Analizador_Sintactico_ecuaciones$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Analizador_Sintactico_ecuaciones$result;

      /* select the action based on the action number */
      switch (CUP$Analizador_Sintactico_ecuaciones$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // EXPREG ::= numero 
            {
              double RESULT;
		int valleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico_ecuaciones$stack.peek()).value;
		
                RESULT = (double)Integer.parseInt(val);

              CUP$Analizador_Sintactico_ecuaciones$result = parser.getSymbolFactory().newSymbol("EXPREG",8, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico_ecuaciones$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // EXPREG ::= parentesisi EQ parentesisf 
            {
              double RESULT;
		int valleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.elementAt(CUP$Analizador_Sintactico_ecuaciones$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.elementAt(CUP$Analizador_Sintactico_ecuaciones$top-1)).right;
		double val = (double)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico_ecuaciones$stack.elementAt(CUP$Analizador_Sintactico_ecuaciones$top-1)).value;
		
                RESULT = val;

              CUP$Analizador_Sintactico_ecuaciones$result = parser.getSymbolFactory().newSymbol("EXPREG",8, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.elementAt(CUP$Analizador_Sintactico_ecuaciones$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico_ecuaciones$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // EXPREF ::= EXPREG 
            {
              double RESULT;
		int valleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.peek()).right;
		double val = (double)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico_ecuaciones$stack.peek()).value;
		
                RESULT = val;

              CUP$Analizador_Sintactico_ecuaciones$result = parser.getSymbolFactory().newSymbol("EXPREF",7, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico_ecuaciones$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // EXPREF ::= llavesi EXPREG llavesf 
            {
              double RESULT;
		int valleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.elementAt(CUP$Analizador_Sintactico_ecuaciones$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.elementAt(CUP$Analizador_Sintactico_ecuaciones$top-1)).right;
		double val = (double)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico_ecuaciones$stack.elementAt(CUP$Analizador_Sintactico_ecuaciones$top-1)).value;
		
                RESULT = val;

              CUP$Analizador_Sintactico_ecuaciones$result = parser.getSymbolFactory().newSymbol("EXPREF",7, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.elementAt(CUP$Analizador_Sintactico_ecuaciones$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico_ecuaciones$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // EXPREE ::= EXPREF 
            {
              double RESULT;
		int valleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.peek()).right;
		double val = (double)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico_ecuaciones$stack.peek()).value;
		
                RESULT=val;

              CUP$Analizador_Sintactico_ecuaciones$result = parser.getSymbolFactory().newSymbol("EXPREE",6, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico_ecuaciones$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // EXPREE ::= raiz corchetei EXPREF coma EXPREF corchetef 
            {
              double RESULT;
		int val1left = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.elementAt(CUP$Analizador_Sintactico_ecuaciones$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.elementAt(CUP$Analizador_Sintactico_ecuaciones$top-3)).right;
		double val1 = (double)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico_ecuaciones$stack.elementAt(CUP$Analizador_Sintactico_ecuaciones$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.elementAt(CUP$Analizador_Sintactico_ecuaciones$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.elementAt(CUP$Analizador_Sintactico_ecuaciones$top-1)).right;
		double val2 = (double)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico_ecuaciones$stack.elementAt(CUP$Analizador_Sintactico_ecuaciones$top-1)).value;
		
                RESULT = (double)Math.pow(val1,1/val2);

              CUP$Analizador_Sintactico_ecuaciones$result = parser.getSymbolFactory().newSymbol("EXPREE",6, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.elementAt(CUP$Analizador_Sintactico_ecuaciones$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico_ecuaciones$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // EXPRED ::= EXPREE 
            {
              double RESULT;
		int valleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.peek()).right;
		double val = (double)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico_ecuaciones$stack.peek()).value;
		
                RESULT = val;

              CUP$Analizador_Sintactico_ecuaciones$result = parser.getSymbolFactory().newSymbol("EXPRED",5, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico_ecuaciones$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // EXPRED ::= potencia corchetei EXPREE coma EXPREE corchetef 
            {
              double RESULT;
		int val1left = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.elementAt(CUP$Analizador_Sintactico_ecuaciones$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.elementAt(CUP$Analizador_Sintactico_ecuaciones$top-3)).right;
		double val1 = (double)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico_ecuaciones$stack.elementAt(CUP$Analizador_Sintactico_ecuaciones$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.elementAt(CUP$Analizador_Sintactico_ecuaciones$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.elementAt(CUP$Analizador_Sintactico_ecuaciones$top-1)).right;
		double val2 = (double)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico_ecuaciones$stack.elementAt(CUP$Analizador_Sintactico_ecuaciones$top-1)).value;
		
                RESULT = (double)Math.pow(val1,val2);

              CUP$Analizador_Sintactico_ecuaciones$result = parser.getSymbolFactory().newSymbol("EXPRED",5, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.elementAt(CUP$Analizador_Sintactico_ecuaciones$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico_ecuaciones$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // EXPREC ::= EXPREC division EXPRED NT$0 EXPRED 
            {
              double RESULT;
              // propagate RESULT from NT$0
                RESULT = (double) ((java_cup.runtime.Symbol) CUP$Analizador_Sintactico_ecuaciones$stack.elementAt(CUP$Analizador_Sintactico_ecuaciones$top-1)).value;
		int val1left = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.elementAt(CUP$Analizador_Sintactico_ecuaciones$top-4)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.elementAt(CUP$Analizador_Sintactico_ecuaciones$top-4)).right;
		double val1 = (double)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico_ecuaciones$stack.elementAt(CUP$Analizador_Sintactico_ecuaciones$top-4)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.elementAt(CUP$Analizador_Sintactico_ecuaciones$top-2)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.elementAt(CUP$Analizador_Sintactico_ecuaciones$top-2)).right;
		double val2 = (double)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico_ecuaciones$stack.elementAt(CUP$Analizador_Sintactico_ecuaciones$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.peek()).right;
		double val = (double)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico_ecuaciones$stack.peek()).value;
		
                RESULT = val;

              CUP$Analizador_Sintactico_ecuaciones$result = parser.getSymbolFactory().newSymbol("EXPREC",4, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.elementAt(CUP$Analizador_Sintactico_ecuaciones$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico_ecuaciones$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$0 ::= 
            {
              double RESULT;
		int val1left = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.elementAt(CUP$Analizador_Sintactico_ecuaciones$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.elementAt(CUP$Analizador_Sintactico_ecuaciones$top-2)).right;
		double val1 = (double)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico_ecuaciones$stack.elementAt(CUP$Analizador_Sintactico_ecuaciones$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.peek()).right;
		double val2 = (double)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico_ecuaciones$stack.peek()).value;

                RESULT = (double)(val1/val2);

              CUP$Analizador_Sintactico_ecuaciones$result = parser.getSymbolFactory().newSymbol("NT$0",9, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico_ecuaciones$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // EXPREB ::= EXPREC 
            {
              double RESULT;
		int valleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.peek()).right;
		double val = (double)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico_ecuaciones$stack.peek()).value;
		
                RESULT = val;

              CUP$Analizador_Sintactico_ecuaciones$result = parser.getSymbolFactory().newSymbol("EXPREB",3, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico_ecuaciones$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // EXPREB ::= EXPREB multiplicacion EXPREC 
            {
              double RESULT;
		int val1left = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.elementAt(CUP$Analizador_Sintactico_ecuaciones$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.elementAt(CUP$Analizador_Sintactico_ecuaciones$top-2)).right;
		double val1 = (double)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico_ecuaciones$stack.elementAt(CUP$Analizador_Sintactico_ecuaciones$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.peek()).right;
		double val2 = (double)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico_ecuaciones$stack.peek()).value;
		
                RESULT = (double)(val1*val2);

              CUP$Analizador_Sintactico_ecuaciones$result = parser.getSymbolFactory().newSymbol("EXPREB",3, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.elementAt(CUP$Analizador_Sintactico_ecuaciones$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico_ecuaciones$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // EXPREA ::= EXPREB 
            {
              double RESULT;
		int valleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.peek()).right;
		double val = (double)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico_ecuaciones$stack.peek()).value;
		
                RESULT = val;

              CUP$Analizador_Sintactico_ecuaciones$result = parser.getSymbolFactory().newSymbol("EXPREA",2, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico_ecuaciones$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // EXPREA ::= EXPREA resta EXPREB 
            {
              double RESULT;
		int val1left = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.elementAt(CUP$Analizador_Sintactico_ecuaciones$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.elementAt(CUP$Analizador_Sintactico_ecuaciones$top-2)).right;
		double val1 = (double)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico_ecuaciones$stack.elementAt(CUP$Analizador_Sintactico_ecuaciones$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.peek()).right;
		double val2 = (double)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico_ecuaciones$stack.peek()).value;
		
                RESULT =val1-val2;

              CUP$Analizador_Sintactico_ecuaciones$result = parser.getSymbolFactory().newSymbol("EXPREA",2, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.elementAt(CUP$Analizador_Sintactico_ecuaciones$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico_ecuaciones$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // EQ ::= EXPREA 
            {
              double RESULT;
		int valleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.peek()).right;
		double val = (double)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico_ecuaciones$stack.peek()).value;
		
                RESULT = val;

              CUP$Analizador_Sintactico_ecuaciones$result = parser.getSymbolFactory().newSymbol("EQ",1, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico_ecuaciones$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // EQ ::= EQ suma EXPREA 
            {
              double RESULT;
		int val1left = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.elementAt(CUP$Analizador_Sintactico_ecuaciones$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.elementAt(CUP$Analizador_Sintactico_ecuaciones$top-2)).right;
		double val1 = (double)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico_ecuaciones$stack.elementAt(CUP$Analizador_Sintactico_ecuaciones$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.peek()).right;
		double val2 = (double)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico_ecuaciones$stack.peek()).value;
		
                RESULT = (double)(val1+val2);

              CUP$Analizador_Sintactico_ecuaciones$result = parser.getSymbolFactory().newSymbol("EQ",1, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.elementAt(CUP$Analizador_Sintactico_ecuaciones$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico_ecuaciones$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIA ::= EQ 
            {
              Object RESULT=null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.peek()).right;
		double val = (double)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico_ecuaciones$stack.peek()).value;
		
            parser.resultado = val;

              CUP$Analizador_Sintactico_ecuaciones$result = parser.getSymbolFactory().newSymbol("INICIA",0, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico_ecuaciones$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIA EOF 
            {
              Object RESULT;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.elementAt(CUP$Analizador_Sintactico_ecuaciones$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.elementAt(CUP$Analizador_Sintactico_ecuaciones$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico_ecuaciones$stack.elementAt(CUP$Analizador_Sintactico_ecuaciones$top-1)).value;
		RESULT = start_val;
              CUP$Analizador_Sintactico_ecuaciones$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.elementAt(CUP$Analizador_Sintactico_ecuaciones$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Analizador_Sintactico_ecuaciones$parser.done_parsing();
          return CUP$Analizador_Sintactico_ecuaciones$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

