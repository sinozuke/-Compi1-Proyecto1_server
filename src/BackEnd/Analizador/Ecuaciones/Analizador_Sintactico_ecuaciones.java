
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Apr 10 22:46:30 CST 2016
//----------------------------------------------------

package BackEnd.Analizador.Ecuaciones;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Apr 10 22:46:30 CST 2016
  */
public class Analizador_Sintactico_ecuaciones extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Analizador_Sintactico_ecuaciones() {super();}

  /** Constructor which sets the default scanner. */
  public Analizador_Sintactico_ecuaciones(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Analizador_Sintactico_ecuaciones(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\034\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\003\003\000\002\016\010" +
    "\000\002\017\002\000\002\017\005\000\002\014\005\000" +
    "\002\014\003\000\002\015\003\000\002\004\005\000\002" +
    "\004\003\000\002\005\005\000\002\005\003\000\002\006" +
    "\005\000\002\006\003\000\002\020\002\000\002\007\007" +
    "\000\002\010\010\000\002\010\003\000\002\011\010\000" +
    "\002\011\003\000\002\012\005\000\002\012\003\000\002" +
    "\013\005\000\002\013\003\000\002\013\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\070\000\004\013\007\001\002\000\004\002\072\001" +
    "\002\000\004\002\000\001\002\000\004\002\ufffd\001\002" +
    "\000\004\022\055\001\002\000\006\002\ufffe\010\043\001" +
    "\002\000\016\002\ufff1\006\ufff1\007\020\010\ufff1\011\ufff1" +
    "\016\ufff1\001\002\000\014\002\ufff3\006\016\010\ufff3\011" +
    "\ufff3\016\ufff3\001\002\000\012\002\ufff5\010\ufff5\011\014" +
    "\016\ufff5\001\002\000\002\001\002\000\014\002\ufff4\006" +
    "\016\010\ufff4\011\ufff4\016\ufff4\001\002\000\002\001\002" +
    "\000\016\002\ufff2\006\ufff2\007\020\010\ufff2\011\ufff2\016" +
    "\ufff2\001\002\000\016\004\021\005\027\012\030\015\026" +
    "\017\032\022\031\001\002\000\004\013\050\001\002\000" +
    "\036\002\uffe9\004\uffe9\005\uffe9\006\uffe9\007\uffe9\010\uffe9" +
    "\011\uffe9\012\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9\021" +
    "\uffe9\022\uffe9\001\002\000\036\002\uffeb\004\uffeb\005\uffeb" +
    "\006\uffeb\007\uffeb\010\uffeb\011\uffeb\012\uffeb\014\uffeb\015" +
    "\uffeb\016\uffeb\017\uffeb\021\uffeb\022\uffeb\001\002\000\032" +
    "\002\uffed\004\uffed\005\uffed\006\uffed\007\uffed\010\uffed\011" +
    "\uffed\012\uffed\015\uffed\016\uffed\017\uffed\022\uffed\001\002" +
    "\000\016\004\ufff0\005\ufff0\012\ufff0\015\ufff0\017\ufff0\022" +
    "\ufff0\001\002\000\002\001\002\000\004\013\035\001\002" +
    "\000\040\002\uffe7\004\uffe7\005\uffe7\006\uffe7\007\uffe7\010" +
    "\uffe7\011\uffe7\012\uffe7\014\uffe7\015\uffe7\016\uffe7\017\uffe7" +
    "\020\uffe7\021\uffe7\022\uffe7\001\002\000\040\002\uffe6\004" +
    "\uffe6\005\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6\012\uffe6" +
    "\014\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022" +
    "\uffe6\001\002\000\010\012\030\015\026\022\031\001\002" +
    "\000\004\020\034\001\002\000\036\002\uffea\004\uffea\005" +
    "\uffea\006\uffea\007\uffea\010\uffea\011\uffea\012\uffea\014\uffea" +
    "\015\uffea\016\uffea\017\uffea\021\uffea\022\uffea\001\002\000" +
    "\012\012\030\015\026\017\032\022\031\001\002\000\004" +
    "\021\037\001\002\000\012\012\030\015\026\017\032\022" +
    "\031\001\002\000\004\014\041\001\002\000\036\002\uffec" +
    "\004\uffec\005\uffec\006\uffec\007\uffec\010\uffec\011\uffec\012" +
    "\uffec\014\uffec\015\uffec\016\uffec\017\uffec\021\uffec\022\uffec" +
    "\001\002\000\006\010\043\016\044\001\002\000\002\001" +
    "\002\000\040\002\uffe8\004\uffe8\005\uffe8\006\uffe8\007\uffe8" +
    "\010\uffe8\011\uffe8\012\uffe8\014\uffe8\015\uffe8\016\uffe8\017" +
    "\uffe8\020\uffe8\021\uffe8\022\uffe8\001\002\000\012\002\ufff6" +
    "\010\ufff6\011\014\016\ufff6\001\002\000\016\004\021\005" +
    "\027\012\030\015\026\017\032\022\031\001\002\000\016" +
    "\002\uffef\006\uffef\007\uffef\010\uffef\011\uffef\016\uffef\001" +
    "\002\000\014\005\027\012\030\015\026\017\032\022\031" +
    "\001\002\000\004\021\052\001\002\000\014\005\027\012" +
    "\030\015\026\017\032\022\031\001\002\000\004\014\054" +
    "\001\002\000\032\002\uffee\004\uffee\005\uffee\006\uffee\007" +
    "\uffee\010\uffee\011\uffee\012\uffee\015\uffee\016\uffee\017\uffee" +
    "\022\uffee\001\002\000\004\021\056\001\002\000\004\022" +
    "\057\001\002\000\006\014\ufffb\015\061\001\002\000\004" +
    "\014\070\001\002\000\004\012\062\001\002\000\006\016" +
    "\ufff7\021\ufff7\001\002\000\006\016\ufff8\021\ufff8\001\002" +
    "\000\006\016\066\021\065\001\002\000\004\012\062\001" +
    "\002\000\004\014\ufffa\001\002\000\006\016\ufff9\021\ufff9" +
    "\001\002\000\004\002\ufffc\001\002\000\006\002\uffff\010" +
    "\043\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\070\000\020\002\003\003\004\004\007\005\012\006" +
    "\011\007\010\016\005\001\001\000\002\001\001\000\012" +
    "\004\070\005\012\006\011\007\010\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\006\014\007" +
    "\010\001\001\000\002\001\001\000\004\007\016\001\001" +
    "\000\002\001\001\000\012\010\024\011\023\012\022\013" +
    "\021\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\045\001\001\000" +
    "\012\004\041\005\012\006\011\007\010\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\032\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\012\035\013\021\001\001\000\002\001\001\000\006\012" +
    "\037\013\021\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\005\044\006\011\007\010\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\010\046" +
    "\011\023\012\022\013\021\001\001\000\002\001\001\000" +
    "\010\011\050\012\022\013\021\001\001\000\002\001\001" +
    "\000\010\011\052\012\022\013\021\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\057\001\001\000\002\001\001\000\006\014" +
    "\063\015\062\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\066\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Analizador_Sintactico_ecuaciones$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Analizador_Sintactico_ecuaciones$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Analizador_Sintactico_ecuaciones$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /**Metodo al que se llama automáticamente ante algún error sintactico.*/
    public void syntax_error(Symbol s){
		System.out.println("Error en la Línea " + (s.right+1) +" Columna "+s.left+ ". Identificador "
        +s.value + " no reconocido.");
    }

    /**Metodo al que se llama en el momento en que ya no es posible una recuperación de
    errores.*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
		System.out.println("Error en la Línea " + (s.right+1)+ "Columna "+s.left+". Identificador " +
        s.value + " no reconocido.");
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Analizador_Sintactico_ecuaciones$actions {



		

  private final Analizador_Sintactico_ecuaciones parser;

  /** Constructor */
  CUP$Analizador_Sintactico_ecuaciones$actions(Analizador_Sintactico_ecuaciones parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Analizador_Sintactico_ecuaciones$do_action(
    int                        CUP$Analizador_Sintactico_ecuaciones$act_num,
    java_cup.runtime.lr_parser CUP$Analizador_Sintactico_ecuaciones$parser,
    java.util.Stack            CUP$Analizador_Sintactico_ecuaciones$stack,
    int                        CUP$Analizador_Sintactico_ecuaciones$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Analizador_Sintactico_ecuaciones$result;

      /* select the action based on the action number */
      switch (CUP$Analizador_Sintactico_ecuaciones$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EXPREG ::= identificador 
            {
              Object RESULT =null;
		
              CUP$Analizador_Sintactico_ecuaciones$result = parser.getSymbolFactory().newSymbol("EXPREG",9, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico_ecuaciones$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // EXPREG ::= numero 
            {
              Object RESULT =null;
		
              CUP$Analizador_Sintactico_ecuaciones$result = parser.getSymbolFactory().newSymbol("EXPREG",9, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico_ecuaciones$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // EXPREG ::= parentesisi EQP parentesisf 
            {
              Object RESULT =null;
		
              CUP$Analizador_Sintactico_ecuaciones$result = parser.getSymbolFactory().newSymbol("EXPREG",9, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.elementAt(CUP$Analizador_Sintactico_ecuaciones$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico_ecuaciones$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // EXPREF ::= EXPREG 
            {
              Object RESULT =null;
		
              CUP$Analizador_Sintactico_ecuaciones$result = parser.getSymbolFactory().newSymbol("EXPREF",8, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico_ecuaciones$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // EXPREF ::= llavesi EXPREG llavesf 
            {
              Object RESULT =null;
		
              CUP$Analizador_Sintactico_ecuaciones$result = parser.getSymbolFactory().newSymbol("EXPREF",8, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.elementAt(CUP$Analizador_Sintactico_ecuaciones$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico_ecuaciones$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // EXPREE ::= EXPREF 
            {
              Object RESULT =null;
		
              CUP$Analizador_Sintactico_ecuaciones$result = parser.getSymbolFactory().newSymbol("EXPREE",7, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico_ecuaciones$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // EXPREE ::= raiz corchetei EXPREF coma EXPREF corchetef 
            {
              Object RESULT =null;
		
              CUP$Analizador_Sintactico_ecuaciones$result = parser.getSymbolFactory().newSymbol("EXPREE",7, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.elementAt(CUP$Analizador_Sintactico_ecuaciones$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico_ecuaciones$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // EXPRED ::= EXPREE 
            {
              Object RESULT =null;
		
              CUP$Analizador_Sintactico_ecuaciones$result = parser.getSymbolFactory().newSymbol("EXPRED",6, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico_ecuaciones$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // EXPRED ::= potencia corchetei EXPREE coma EXPREE corchetef 
            {
              Object RESULT =null;
		
              CUP$Analizador_Sintactico_ecuaciones$result = parser.getSymbolFactory().newSymbol("EXPRED",6, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.elementAt(CUP$Analizador_Sintactico_ecuaciones$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico_ecuaciones$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // EXPREC ::= EXPREC division EXPRED NT$0 EXPRED 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador_Sintactico_ecuaciones$stack.elementAt(CUP$Analizador_Sintactico_ecuaciones$top-1)).value;
		
              CUP$Analizador_Sintactico_ecuaciones$result = parser.getSymbolFactory().newSymbol("EXPREC",5, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.elementAt(CUP$Analizador_Sintactico_ecuaciones$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico_ecuaciones$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$0 ::= 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico_ecuaciones$result = parser.getSymbolFactory().newSymbol("NT$0",14, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico_ecuaciones$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // EXPREB ::= EXPREC 
            {
              Object RESULT =null;
		
              CUP$Analizador_Sintactico_ecuaciones$result = parser.getSymbolFactory().newSymbol("EXPREB",4, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico_ecuaciones$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // EXPREB ::= EXPREB multiplicacion EXPREC 
            {
              Object RESULT =null;
		
              CUP$Analizador_Sintactico_ecuaciones$result = parser.getSymbolFactory().newSymbol("EXPREB",4, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.elementAt(CUP$Analizador_Sintactico_ecuaciones$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico_ecuaciones$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // EXPREA ::= EXPREB 
            {
              Object RESULT =null;
		
              CUP$Analizador_Sintactico_ecuaciones$result = parser.getSymbolFactory().newSymbol("EXPREA",3, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico_ecuaciones$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // EXPREA ::= EXPREA resta EXPREB 
            {
              Object RESULT =null;
		
              CUP$Analizador_Sintactico_ecuaciones$result = parser.getSymbolFactory().newSymbol("EXPREA",3, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.elementAt(CUP$Analizador_Sintactico_ecuaciones$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico_ecuaciones$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // EQP ::= EXPREA 
            {
              Object RESULT =null;
		
              CUP$Analizador_Sintactico_ecuaciones$result = parser.getSymbolFactory().newSymbol("EQP",2, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico_ecuaciones$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // EQP ::= EQP suma EXPREA 
            {
              Object RESULT =null;
		
              CUP$Analizador_Sintactico_ecuaciones$result = parser.getSymbolFactory().newSymbol("EQP",2, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.elementAt(CUP$Analizador_Sintactico_ecuaciones$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico_ecuaciones$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // PARAMSP ::= numero 
            {
              Object RESULT =null;
		
              CUP$Analizador_Sintactico_ecuaciones$result = parser.getSymbolFactory().newSymbol("PARAMSP",11, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico_ecuaciones$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // PARAMS ::= PARAMSP 
            {
              Object RESULT =null;
		
              CUP$Analizador_Sintactico_ecuaciones$result = parser.getSymbolFactory().newSymbol("PARAMS",10, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico_ecuaciones$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // PARAMS ::= PARAMS coma PARAMSP 
            {
              Object RESULT =null;
		
              CUP$Analizador_Sintactico_ecuaciones$result = parser.getSymbolFactory().newSymbol("PARAMS",10, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.elementAt(CUP$Analizador_Sintactico_ecuaciones$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico_ecuaciones$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CONTMATE ::= parentesisi PARAMS parentesisf 
            {
              Object RESULT =null;
		
              CUP$Analizador_Sintactico_ecuaciones$result = parser.getSymbolFactory().newSymbol("CONTMATE",13, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.elementAt(CUP$Analizador_Sintactico_ecuaciones$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico_ecuaciones$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CONTMATE ::= 
            {
              Object RESULT =null;
		
              CUP$Analizador_Sintactico_ecuaciones$result = parser.getSymbolFactory().newSymbol("CONTMATE",13, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico_ecuaciones$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // MATE ::= corchetei identificador coma identificador CONTMATE corchetef 
            {
              Object RESULT =null;
		
              CUP$Analizador_Sintactico_ecuaciones$result = parser.getSymbolFactory().newSymbol("MATE",12, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.elementAt(CUP$Analizador_Sintactico_ecuaciones$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico_ecuaciones$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // EQ ::= MATE 
            {
              Object RESULT =null;
		
              CUP$Analizador_Sintactico_ecuaciones$result = parser.getSymbolFactory().newSymbol("EQ",1, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico_ecuaciones$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // EQ ::= EQP 
            {
              Object RESULT =null;
		
              CUP$Analizador_Sintactico_ecuaciones$result = parser.getSymbolFactory().newSymbol("EQ",1, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico_ecuaciones$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // EQ ::= EQ EQP 
            {
              Object RESULT =null;
		
              CUP$Analizador_Sintactico_ecuaciones$result = parser.getSymbolFactory().newSymbol("EQ",1, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.elementAt(CUP$Analizador_Sintactico_ecuaciones$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico_ecuaciones$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIA ::= EQ 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico_ecuaciones$result = parser.getSymbolFactory().newSymbol("INICIA",0, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico_ecuaciones$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.elementAt(CUP$Analizador_Sintactico_ecuaciones$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.elementAt(CUP$Analizador_Sintactico_ecuaciones$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico_ecuaciones$stack.elementAt(CUP$Analizador_Sintactico_ecuaciones$top-1)).value;
		RESULT = start_val;
              CUP$Analizador_Sintactico_ecuaciones$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.elementAt(CUP$Analizador_Sintactico_ecuaciones$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_ecuaciones$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Analizador_Sintactico_ecuaciones$parser.done_parsing();
          return CUP$Analizador_Sintactico_ecuaciones$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

