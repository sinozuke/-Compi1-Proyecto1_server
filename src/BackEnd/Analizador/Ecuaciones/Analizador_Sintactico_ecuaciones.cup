package BackEnd.Analizador.Ecuaciones;
import java_cup.runtime.*;

parser code
{:
    /**Metodo al que se llama automáticamente ante algún error sintactico.*/
    public void syntax_error(Symbol s){
		System.out.println("Error en la Línea " + (s.right+1) +" Columna "+s.left+ ". Identificador "
        +s.value + " no reconocido.");
    }

    /**Metodo al que se llama en el momento en que ya no es posible una recuperación de
    errores.*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
		System.out.println("Error en la Línea " + (s.right+1)+ "Columna "+s.left+". Identificador " +
        s.value + " no reconocido.");
    }
:}

action code
{:
        public double resultado;
		
:}

terminal String potencia,raiz,multiplicacion,division,suma,resta,numero,corchetei,corchetef,parentesisi,parentesisf,llavesi,llavesf,coma;

non terminal INICIA;
non terminal double EQ;
non terminal double EXPREA, EXPREB, EXPREC, EXPRED, EXPREE, EXPREF,EXPREG;

precedence left suma;
precedence left resta;
precedence left multiplicacion;
precedence left division;

start with INICIA;

INICIA ::= EQ:val
{:
            resultado = val;
:};

EQ ::= EQ:val1 suma EXPREA:val2
{:
                RESULT = (double)(val1+val2);
:}
        |EXPREA:val
{:
                RESULT = val;
:};

EXPREA ::= EXPREA:val1 resta EXPREB:val2
{:
                RESULT =val1-val2;
:}
            |EXPREB:val
{:
                RESULT = val;
:};

EXPREB ::= EXPREB:val1 multiplicacion EXPREC:val2
{:
                RESULT = (double)(val1*val2);
:}
            |EXPREC:val
{:
                RESULT = val;
:};

EXPREC ::= EXPREC:val1 division EXPRED:val2
{:
                RESULT = (double)(val1/val2);
:}
            EXPRED:val
{:
                RESULT = val;
:};

EXPRED ::= potencia corchetei EXPREE:val1 coma EXPREE:val2 corchetef
{:
                RESULT = (double)Math.pow(val1,val2);
:}
            |EXPREE:val
{:
                RESULT = val;
:};

EXPREE ::= raiz corchetei EXPREF:val1 coma EXPREF:val2 corchetef
{:
                RESULT = (double)Math.pow(val1,1/val2);
:}
            |EXPREF:val
{:
                RESULT=val;
:};

EXPREF ::= llavesi EXPREG:val llavesf
{:
                RESULT = val;
:}
            |EXPREG:val
{:
                RESULT = val;
:};

EXPREG ::= parentesisi EQ:val parentesisf
{:
                RESULT = val;
:}
            |numero:val
{:
                RESULT = (double)Integer.parseInt(val);
:};