/* The following code was generated by JFlex 1.4.3 on 10/04/16 01:57 PM */

package BackEnd.Analizador.Compilador;

import java_cup.runtime.Symbol;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 10/04/16 01:57 PM from the specification file
 * <tt>AnalizadorLexico_compilador.flex</tt>
 */
public class Lexico_Request implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\17\1\17\1\0\2\71\22\0\1\71\1\0\1\15\1\20"+
    "\1\33\1\65\2\0\1\60\1\60\1\21\1\51\1\54\1\5\1\4"+
    "\1\16\1\2\1\14\10\2\1\0\1\53\1\0\1\55\2\0\1\6"+
    "\2\1\1\45\1\1\1\67\1\44\2\1\1\40\4\1\1\66\1\1"+
    "\1\47\1\1\1\50\1\1\1\43\1\41\1\64\4\1\1\56\1\0"+
    "\1\57\1\0\1\3\1\0\1\24\1\46\1\7\1\25\1\23\1\26"+
    "\1\35\1\1\1\13\2\1\1\31\1\11\1\30\1\10\1\12\1\36"+
    "\1\22\1\32\1\34\1\37\1\1\1\42\1\70\1\63\1\1\1\61"+
    "\1\0\1\62\123\0\1\1\37\0\1\52\1\0\1\27\uff0c\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\4\2\1\1"+
    "\1\5\2\1\1\6\7\2\1\7\12\2\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\2"+
    "\1\1\1\21\1\2\2\0\1\3\1\22\2\2\1\0"+
    "\5\2\1\23\3\0\1\24\2\0\1\25\1\0\7\2"+
    "\1\26\16\2\1\27\1\2\1\30\1\2\1\0\3\2"+
    "\1\0\5\2\1\31\4\0\17\2\1\32\7\2\1\33"+
    "\2\2\1\0\1\34\2\2\1\0\2\2\1\35\3\2"+
    "\3\0\13\2\1\36\6\2\1\37\4\2\1\0\1\40"+
    "\1\2\1\0\1\2\1\41\3\2\3\0\2\2\1\42"+
    "\3\2\1\43\2\2\1\44\4\2\1\45\3\2\1\46"+
    "\1\2\1\0\1\2\1\47\4\2\3\0\3\2\1\50"+
    "\2\2\1\51\1\2\1\52\1\2\1\53\4\2\1\0"+
    "\5\2\1\54\2\0\1\2\1\55\6\2\1\56\1\2"+
    "\1\57\1\0\1\60\2\2\1\61\1\62\2\0\1\63"+
    "\1\64\1\65\1\0\1\66\1\67\2\2\1\0\1\70"+
    "\1\2\2\0\1\71\2\2\1\0\1\2\2\0\1\72"+
    "\2\2\1\0\1\73\1\0\1\74\2\2\1\75\1\0"+
    "\1\2\1\76\1\77";

  private static int [] zzUnpackAction() {
    int [] result = new int[290];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\350\0\u0122\0\u015c\0\u0196"+
    "\0\u01d0\0\u020a\0\u0244\0\u027e\0\u02b8\0\u02f2\0\72\0\u032c"+
    "\0\u0366\0\u03a0\0\u03da\0\u0414\0\u044e\0\u0488\0\72\0\u04c2"+
    "\0\u04fc\0\u0536\0\u0570\0\u05aa\0\u05e4\0\u061e\0\u0658\0\u0692"+
    "\0\u06cc\0\72\0\72\0\72\0\72\0\72\0\72\0\72"+
    "\0\72\0\72\0\u0706\0\u0740\0\164\0\u077a\0\350\0\u07b4"+
    "\0\u07ee\0\72\0\u0828\0\u0862\0\u089c\0\u08d6\0\u0910\0\u094a"+
    "\0\u0984\0\u09be\0\164\0\u09f8\0\u0a32\0\u0a6c\0\72\0\u0aa6"+
    "\0\u0ae0\0\72\0\u0b1a\0\u0b54\0\u0b8e\0\u0bc8\0\u0c02\0\u0c3c"+
    "\0\u0c76\0\u0cb0\0\164\0\u0cea\0\u0d24\0\u0d5e\0\u0d98\0\u0dd2"+
    "\0\u0e0c\0\u0e46\0\u0e80\0\u0eba\0\u0ef4\0\u0f2e\0\u0f68\0\u0fa2"+
    "\0\u0fdc\0\164\0\u1016\0\72\0\u1050\0\u108a\0\u10c4\0\u10fe"+
    "\0\u1138\0\u1172\0\u11ac\0\u11e6\0\u1220\0\u125a\0\u1294\0\164"+
    "\0\u12ce\0\u1308\0\u1342\0\u137c\0\u13b6\0\u13f0\0\u142a\0\u1464"+
    "\0\u149e\0\u14d8\0\u1512\0\u154c\0\u1586\0\u15c0\0\u15fa\0\u1634"+
    "\0\u166e\0\u16a8\0\u16e2\0\164\0\u171c\0\u1756\0\u1790\0\u17ca"+
    "\0\u1804\0\u183e\0\u1878\0\164\0\u18b2\0\u18ec\0\u1926\0\164"+
    "\0\u1960\0\u199a\0\u19d4\0\u1a0e\0\u1a48\0\164\0\u1a82\0\u1abc"+
    "\0\u1af6\0\u1b30\0\u1b6a\0\u1ba4\0\u1bde\0\u1c18\0\u1c52\0\u1c8c"+
    "\0\u1cc6\0\u1d00\0\u1d3a\0\u1d74\0\u1dae\0\u1de8\0\u1e22\0\164"+
    "\0\u1e5c\0\u1e96\0\u1ed0\0\u1f0a\0\u1f44\0\u1f7e\0\164\0\u1fb8"+
    "\0\u1ff2\0\u202c\0\u2066\0\u20a0\0\164\0\u20da\0\u2114\0\u214e"+
    "\0\164\0\u2188\0\u21c2\0\u21fc\0\u2236\0\u2270\0\u22aa\0\u22e4"+
    "\0\u231e\0\164\0\u2358\0\u2392\0\u23cc\0\164\0\u2406\0\u2440"+
    "\0\164\0\u247a\0\u24b4\0\u24ee\0\u2528\0\164\0\u2562\0\u259c"+
    "\0\u25d6\0\164\0\u2610\0\u264a\0\u2684\0\72\0\u26be\0\u26f8"+
    "\0\u2732\0\u276c\0\u27a6\0\u27e0\0\u281a\0\u2854\0\u288e\0\u28c8"+
    "\0\164\0\u2902\0\u293c\0\164\0\u2976\0\164\0\u29b0\0\164"+
    "\0\u29ea\0\u2a24\0\u2a5e\0\u2a98\0\u2ad2\0\u2b0c\0\u2b46\0\u2b80"+
    "\0\u2bba\0\u2bf4\0\72\0\u2c2e\0\u2c68\0\u2ca2\0\164\0\u2cdc"+
    "\0\u2d16\0\u2d50\0\u2d8a\0\u2dc4\0\u2dfe\0\164\0\u2e38\0\164"+
    "\0\u2e72\0\164\0\u2eac\0\u2ee6\0\164\0\164\0\u2f20\0\u2f5a"+
    "\0\164\0\164\0\164\0\u2f94\0\164\0\164\0\u2fce\0\u3008"+
    "\0\u3042\0\164\0\u307c\0\u30b6\0\u30f0\0\72\0\u312a\0\u3164"+
    "\0\u319e\0\u31d8\0\u3212\0\u324c\0\72\0\u3286\0\u32c0\0\u32fa"+
    "\0\164\0\u3334\0\72\0\u336e\0\u33a8\0\72\0\u33e2\0\u341c"+
    "\0\164\0\164";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[290];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\2\1\6\1\2\1\7"+
    "\1\3\1\10\1\11\1\12\1\4\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\3\1\2"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\3"+
    "\1\33\1\34\1\3\1\35\1\36\1\37\1\3\1\40"+
    "\1\41\1\42\1\3\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\3\1\53\1\54\1\55\1\56"+
    "\1\3\1\15\73\0\3\3\1\0\1\57\1\60\6\3"+
    "\5\0\5\3\1\0\3\3\1\0\15\3\1\0\1\3"+
    "\10\0\2\3\1\0\3\3\2\0\1\57\1\4\1\57"+
    "\1\61\1\57\1\60\5\57\1\4\5\0\5\57\1\0"+
    "\3\57\1\0\15\57\1\0\1\57\10\0\2\57\1\0"+
    "\3\57\2\0\3\57\1\0\1\57\1\60\6\57\5\0"+
    "\5\57\1\0\3\57\1\0\15\57\1\0\1\57\10\0"+
    "\2\57\1\0\3\57\2\0\3\57\1\0\1\57\1\60"+
    "\6\57\5\0\5\57\1\0\3\57\1\62\15\57\1\0"+
    "\1\57\10\0\2\57\1\0\3\57\2\0\3\3\1\0"+
    "\1\57\1\60\1\3\1\63\4\3\5\0\2\3\1\64"+
    "\2\3\1\65\3\3\1\0\15\3\1\0\1\3\10\0"+
    "\2\3\1\0\3\3\2\0\3\3\1\0\1\57\1\60"+
    "\1\3\1\66\4\3\5\0\2\3\1\67\2\3\1\0"+
    "\3\3\1\0\15\3\1\0\1\3\10\0\2\3\1\0"+
    "\3\3\2\0\3\3\1\0\1\57\1\60\6\3\5\0"+
    "\1\70\1\3\1\71\2\3\1\0\3\3\1\0\15\3"+
    "\1\0\1\3\10\0\2\3\1\0\3\3\2\0\3\3"+
    "\1\0\1\57\1\60\2\3\1\72\3\3\5\0\3\3"+
    "\1\73\1\3\1\0\3\3\1\0\15\3\1\0\1\3"+
    "\10\0\2\3\1\0\3\3\1\0\7\74\1\75\1\74"+
    "\1\76\3\74\1\77\5\74\1\100\46\74\16\0\1\101"+
    "\72\0\1\15\51\0\1\15\20\0\1\102\1\103\51\0"+
    "\3\3\1\0\1\57\1\60\6\3\5\0\1\3\1\104"+
    "\3\3\1\0\3\3\1\0\15\3\1\0\1\3\10\0"+
    "\2\3\1\0\3\3\2\0\3\3\1\0\1\57\1\60"+
    "\2\3\1\105\3\3\5\0\5\3\1\0\1\3\1\106"+
    "\1\3\1\0\15\3\1\0\1\3\10\0\2\3\1\0"+
    "\3\3\2\0\3\3\1\0\1\57\1\60\1\107\2\3"+
    "\1\110\2\3\5\0\5\3\1\0\3\3\1\0\15\3"+
    "\1\0\1\3\10\0\2\3\1\0\3\3\2\0\3\3"+
    "\1\0\1\57\1\60\1\3\1\111\2\3\1\112\1\3"+
    "\5\0\1\3\1\113\3\3\1\0\3\3\1\0\15\3"+
    "\1\0\1\3\10\0\2\3\1\0\3\3\2\0\3\3"+
    "\1\0\1\57\1\60\1\3\1\114\4\3\5\0\5\3"+
    "\1\0\3\3\1\0\15\3\1\0\1\3\10\0\2\3"+
    "\1\0\3\3\2\0\3\3\1\0\1\57\1\60\4\3"+
    "\1\115\1\3\5\0\5\3\1\0\3\3\1\0\15\3"+
    "\1\0\1\3\10\0\2\3\1\0\3\3\2\0\3\3"+
    "\1\0\1\57\1\60\6\3\5\0\5\3\1\0\3\3"+
    "\1\0\3\3\1\116\11\3\1\0\1\3\10\0\2\3"+
    "\1\0\3\3\2\0\3\3\1\0\1\57\1\60\4\3"+
    "\1\117\1\3\5\0\1\3\1\120\1\121\2\3\1\0"+
    "\3\3\1\0\15\3\1\0\1\3\10\0\2\3\1\0"+
    "\3\3\2\0\3\3\1\0\1\57\1\60\6\3\5\0"+
    "\1\3\1\122\3\3\1\0\3\3\1\0\15\3\1\0"+
    "\1\3\10\0\2\3\1\0\3\3\2\0\3\3\1\0"+
    "\1\57\1\60\6\3\5\0\5\3\1\0\3\3\1\0"+
    "\3\3\1\123\11\3\1\0\1\3\10\0\2\3\1\0"+
    "\3\3\2\0\3\3\1\0\1\57\1\60\6\3\5\0"+
    "\5\3\1\0\1\124\2\3\1\0\15\3\1\0\1\3"+
    "\10\0\2\3\1\0\3\3\2\0\3\3\1\0\1\57"+
    "\1\60\6\3\5\0\5\3\1\0\2\3\1\125\1\0"+
    "\15\3\1\0\1\3\10\0\2\3\1\0\3\3\2\0"+
    "\3\3\1\0\1\57\1\60\6\3\5\0\1\126\4\3"+
    "\1\0\3\3\1\0\15\3\1\0\1\3\10\0\2\3"+
    "\1\0\3\3\2\0\3\3\1\0\1\57\1\60\6\3"+
    "\5\0\2\3\1\127\2\3\1\0\3\3\1\0\15\3"+
    "\1\0\1\3\10\0\2\3\1\0\3\3\2\0\3\3"+
    "\1\0\1\57\1\60\6\3\5\0\1\130\4\3\1\0"+
    "\3\3\1\0\15\3\1\0\1\3\10\0\2\3\1\0"+
    "\3\3\2\0\3\3\1\0\1\57\1\60\6\3\5\0"+
    "\5\3\1\0\3\3\1\0\1\131\14\3\1\0\1\3"+
    "\10\0\2\3\1\0\3\3\2\0\3\3\1\0\1\57"+
    "\1\60\6\3\5\0\5\3\1\0\3\3\1\0\2\3"+
    "\1\132\12\3\1\0\1\3\10\0\2\3\1\0\3\3"+
    "\2\0\3\3\1\0\1\57\1\60\6\3\5\0\2\3"+
    "\1\133\2\3\1\0\3\3\1\0\15\3\1\0\1\3"+
    "\10\0\2\3\1\0\3\3\66\0\1\134\5\0\3\3"+
    "\1\0\1\57\1\60\6\3\5\0\5\3\1\0\3\3"+
    "\1\0\15\3\1\0\1\3\10\0\2\3\1\0\2\3"+
    "\1\135\10\0\1\136\64\0\1\61\11\0\1\61\56\0"+
    "\3\3\1\0\1\57\1\60\6\3\5\0\5\3\1\0"+
    "\1\137\1\140\1\3\1\0\15\3\1\0\1\3\10\0"+
    "\2\3\1\0\3\3\2\0\3\3\1\0\1\57\1\60"+
    "\6\3\5\0\5\3\1\0\1\141\2\3\1\0\15\3"+
    "\1\0\1\3\10\0\2\3\1\0\3\3\26\0\1\142"+
    "\45\0\3\3\1\0\1\57\1\60\6\3\5\0\3\3"+
    "\1\143\1\3\1\0\3\3\1\0\15\3\1\0\1\3"+
    "\10\0\2\3\1\0\3\3\2\0\3\3\1\0\1\57"+
    "\1\60\6\3\5\0\1\144\4\3\1\0\3\3\1\0"+
    "\1\145\14\3\1\0\1\3\10\0\2\3\1\0\3\3"+
    "\2\0\3\3\1\0\1\57\1\60\1\3\1\146\4\3"+
    "\5\0\5\3\1\0\3\3\1\0\15\3\1\0\1\3"+
    "\10\0\2\3\1\0\3\3\2\0\3\3\1\0\1\57"+
    "\1\60\6\3\5\0\5\3\1\0\2\3\1\147\1\0"+
    "\15\3\1\0\1\3\10\0\2\3\1\0\3\3\2\0"+
    "\3\3\1\0\1\57\1\60\6\3\5\0\5\3\1\0"+
    "\3\3\1\0\1\3\1\150\13\3\1\0\1\3\10\0"+
    "\2\3\1\0\3\3\1\0\15\74\1\77\71\74\1\77"+
    "\4\74\1\151\57\74\1\152\4\74\1\77\71\74\1\77"+
    "\13\74\1\153\40\74\17\101\1\2\52\101\20\103\1\0"+
    "\1\154\50\103\1\0\3\3\1\0\1\57\1\60\6\3"+
    "\5\0\5\3\1\0\3\3\1\0\1\3\1\155\1\156"+
    "\12\3\1\0\1\3\10\0\2\3\1\0\3\3\2\0"+
    "\3\3\1\0\1\57\1\60\6\3\5\0\2\3\1\157"+
    "\2\3\1\0\3\3\1\0\15\3\1\0\1\3\10\0"+
    "\2\3\1\0\3\3\2\0\3\3\1\0\1\57\1\60"+
    "\4\3\1\160\1\3\5\0\5\3\1\0\3\3\1\0"+
    "\15\3\1\0\1\3\10\0\2\3\1\0\3\3\2\0"+
    "\3\3\1\0\1\57\1\60\1\161\5\3\5\0\5\3"+
    "\1\0\3\3\1\0\15\3\1\0\1\3\10\0\2\3"+
    "\1\0\3\3\2\0\3\3\1\0\1\57\1\60\6\3"+
    "\5\0\1\3\1\162\3\3\1\0\3\3\1\0\15\3"+
    "\1\0\1\3\10\0\2\3\1\0\3\3\2\0\3\3"+
    "\1\0\1\57\1\60\6\3\5\0\5\3\1\0\1\163"+
    "\2\3\1\0\15\3\1\0\1\3\10\0\2\3\1\0"+
    "\3\3\2\0\3\3\1\0\1\57\1\60\6\3\5\0"+
    "\1\164\4\3\1\0\3\3\1\0\15\3\1\0\1\3"+
    "\10\0\2\3\1\0\3\3\2\0\3\3\1\0\1\57"+
    "\1\60\2\3\1\165\3\3\5\0\5\3\1\0\3\3"+
    "\1\0\15\3\1\0\1\3\10\0\2\3\1\0\3\3"+
    "\2\0\3\3\1\0\1\57\1\60\6\3\5\0\5\3"+
    "\1\0\2\3\1\166\1\0\15\3\1\0\1\3\10\0"+
    "\2\3\1\0\3\3\2\0\3\3\1\0\1\57\1\60"+
    "\1\167\5\3\5\0\5\3\1\0\3\3\1\0\15\3"+
    "\1\0\1\3\10\0\2\3\1\0\3\3\2\0\3\3"+
    "\1\0\1\57\1\60\3\3\1\170\2\3\5\0\1\3"+
    "\1\171\3\3\1\0\3\3\1\0\15\3\1\0\1\3"+
    "\10\0\2\3\1\0\3\3\2\0\3\3\1\0\1\57"+
    "\1\60\6\3\5\0\5\3\1\0\1\3\1\172\1\3"+
    "\1\0\15\3\1\0\1\3\10\0\2\3\1\0\3\3"+
    "\2\0\3\3\1\0\1\57\1\60\2\3\1\173\3\3"+
    "\5\0\5\3\1\0\3\3\1\0\15\3\1\0\1\3"+
    "\10\0\2\3\1\0\3\3\2\0\3\3\1\0\1\57"+
    "\1\60\6\3\5\0\5\3\1\0\3\3\1\0\1\174"+
    "\14\3\1\0\1\3\10\0\2\3\1\0\3\3\2\0"+
    "\3\3\1\0\1\57\1\60\6\3\5\0\1\3\1\175"+
    "\3\3\1\0\3\3\1\0\15\3\1\0\1\3\10\0"+
    "\2\3\1\0\3\3\2\0\3\3\1\0\1\57\1\60"+
    "\4\3\1\176\1\3\5\0\5\3\1\0\3\3\1\0"+
    "\15\3\1\0\1\3\10\0\2\3\1\0\3\3\2\0"+
    "\3\3\1\0\1\57\1\60\6\3\5\0\5\3\1\0"+
    "\3\3\1\0\3\3\1\177\11\3\1\0\1\3\10\0"+
    "\2\3\1\0\3\3\2\0\3\3\1\0\1\57\1\60"+
    "\6\3\5\0\5\3\1\0\3\3\1\0\3\3\1\200"+
    "\11\3\1\0\1\3\10\0\2\3\1\0\3\3\2\0"+
    "\3\3\1\0\1\57\1\60\4\3\1\201\1\3\5\0"+
    "\5\3\1\0\1\3\1\202\1\3\1\0\15\3\1\0"+
    "\1\3\10\0\2\3\1\0\3\3\2\0\3\3\1\0"+
    "\1\57\1\60\6\3\5\0\1\3\1\203\3\3\1\0"+
    "\3\3\1\0\15\3\1\0\1\3\10\0\2\3\1\0"+
    "\3\3\2\0\3\3\1\0\1\57\1\60\6\3\5\0"+
    "\5\3\1\0\1\204\2\3\1\0\15\3\1\0\1\3"+
    "\10\0\2\3\1\0\3\3\2\0\3\3\1\0\1\57"+
    "\1\60\1\205\5\3\5\0\5\3\1\0\3\3\1\0"+
    "\15\3\1\0\1\3\10\0\2\3\1\0\3\3\2\0"+
    "\3\3\1\0\1\57\1\60\6\3\5\0\5\3\1\0"+
    "\3\3\1\0\1\206\14\3\1\0\1\3\10\0\2\3"+
    "\1\0\3\3\11\0\1\207\62\0\3\3\1\0\1\57"+
    "\1\60\6\3\5\0\5\3\1\0\2\3\1\210\1\0"+
    "\15\3\1\0\1\3\10\0\2\3\1\0\3\3\2\0"+
    "\3\3\1\0\1\57\1\60\1\3\1\211\4\3\5\0"+
    "\5\3\1\0\3\3\1\0\15\3\1\0\1\3\10\0"+
    "\2\3\1\0\3\3\2\0\3\3\1\0\1\57\1\60"+
    "\6\3\5\0\5\3\1\0\3\3\1\0\1\212\14\3"+
    "\1\0\1\3\10\0\2\3\1\0\3\3\14\0\1\213"+
    "\57\0\3\3\1\0\1\57\1\60\4\3\1\214\1\3"+
    "\5\0\5\3\1\0\3\3\1\0\15\3\1\0\1\3"+
    "\10\0\2\3\1\0\3\3\2\0\3\3\1\0\1\57"+
    "\1\60\1\215\5\3\5\0\5\3\1\0\3\3\1\0"+
    "\15\3\1\0\1\3\10\0\2\3\1\0\3\3\2\0"+
    "\3\3\1\0\1\57\1\60\6\3\5\0\1\3\1\216"+
    "\3\3\1\0\3\3\1\0\15\3\1\0\1\3\10\0"+
    "\2\3\1\0\3\3\2\0\3\3\1\0\1\57\1\60"+
    "\3\3\1\217\2\3\5\0\3\3\1\220\1\3\1\0"+
    "\3\3\1\0\15\3\1\0\1\3\10\0\2\3\1\0"+
    "\3\3\2\0\3\3\1\0\1\57\1\60\6\3\5\0"+
    "\5\3\1\0\2\3\1\221\1\0\15\3\1\0\1\3"+
    "\10\0\2\3\1\0\3\3\1\0\15\74\1\77\5\74"+
    "\1\222\63\74\1\77\7\74\1\223\57\74\1\224\1\74"+
    "\1\77\54\74\20\103\1\2\1\154\50\103\1\0\3\3"+
    "\1\0\1\57\1\60\4\3\1\225\1\3\5\0\5\3"+
    "\1\0\3\3\1\0\15\3\1\0\1\3\10\0\2\3"+
    "\1\0\3\3\2\0\3\3\1\0\1\57\1\60\6\3"+
    "\5\0\5\3\1\0\3\3\1\0\3\3\1\226\11\3"+
    "\1\0\1\3\10\0\2\3\1\0\3\3\2\0\3\3"+
    "\1\0\1\57\1\60\4\3\1\227\1\3\5\0\5\3"+
    "\1\0\3\3\1\0\15\3\1\0\1\3\10\0\2\3"+
    "\1\0\3\3\2\0\3\3\1\0\1\57\1\60\2\3"+
    "\1\230\3\3\5\0\5\3\1\0\3\3\1\0\15\3"+
    "\1\0\1\3\10\0\2\3\1\0\3\3\2\0\3\3"+
    "\1\0\1\57\1\60\6\3\5\0\1\3\1\231\3\3"+
    "\1\0\3\3\1\0\15\3\1\0\1\3\10\0\2\3"+
    "\1\0\3\3\2\0\3\3\1\0\1\57\1\60\6\3"+
    "\5\0\5\3\1\0\1\3\1\232\1\3\1\0\15\3"+
    "\1\0\1\3\10\0\2\3\1\0\3\3\2\0\3\3"+
    "\1\0\1\57\1\60\6\3\5\0\3\3\1\233\1\3"+
    "\1\0\3\3\1\0\15\3\1\0\1\3\10\0\2\3"+
    "\1\0\3\3\2\0\3\3\1\0\1\57\1\60\6\3"+
    "\5\0\1\3\1\234\3\3\1\0\3\3\1\0\15\3"+
    "\1\0\1\3\10\0\2\3\1\0\3\3\2\0\3\3"+
    "\1\0\1\57\1\60\6\3\5\0\5\3\1\0\3\3"+
    "\1\0\12\3\1\235\2\3\1\0\1\3\10\0\2\3"+
    "\1\0\3\3\2\0\3\3\1\0\1\57\1\60\6\3"+
    "\5\0\5\3\1\0\3\3\1\0\1\236\14\3\1\0"+
    "\1\3\10\0\2\3\1\0\3\3\2\0\3\3\1\0"+
    "\1\57\1\60\6\3\5\0\5\3\1\0\3\3\1\0"+
    "\3\3\1\237\11\3\1\0\1\3\10\0\2\3\1\0"+
    "\3\3\2\0\3\3\1\0\1\57\1\60\1\3\1\240"+
    "\4\3\5\0\5\3\1\0\3\3\1\0\15\3\1\0"+
    "\1\3\10\0\2\3\1\0\3\3\2\0\3\3\1\0"+
    "\1\57\1\60\6\3\5\0\5\3\1\0\1\241\2\3"+
    "\1\0\15\3\1\0\1\3\10\0\2\3\1\0\3\3"+
    "\2\0\3\3\1\0\1\57\1\60\6\3\5\0\1\3"+
    "\1\242\3\3\1\0\3\3\1\0\15\3\1\0\1\3"+
    "\10\0\2\3\1\0\3\3\2\0\3\3\1\0\1\57"+
    "\1\60\6\3\5\0\2\3\1\243\2\3\1\0\3\3"+
    "\1\0\15\3\1\0\1\3\10\0\2\3\1\0\3\3"+
    "\2\0\3\3\1\0\1\57\1\60\6\3\5\0\1\244"+
    "\4\3\1\0\3\3\1\0\15\3\1\0\1\3\10\0"+
    "\2\3\1\0\3\3\2\0\3\3\1\0\1\57\1\60"+
    "\1\245\5\3\5\0\5\3\1\0\3\3\1\0\15\3"+
    "\1\0\1\3\10\0\2\3\1\0\3\3\2\0\3\3"+
    "\1\0\1\57\1\60\6\3\5\0\2\3\1\246\2\3"+
    "\1\0\3\3\1\0\15\3\1\0\1\3\10\0\2\3"+
    "\1\0\3\3\2\0\3\3\1\0\1\57\1\60\6\3"+
    "\5\0\1\3\1\247\3\3\1\0\3\3\1\0\15\3"+
    "\1\0\1\3\10\0\2\3\1\0\3\3\2\0\3\3"+
    "\1\0\1\57\1\60\6\3\5\0\5\3\1\0\1\3"+
    "\1\247\1\3\1\0\15\3\1\0\1\3\10\0\2\3"+
    "\1\0\3\3\2\0\3\3\1\0\1\57\1\60\6\3"+
    "\5\0\5\3\1\0\2\3\1\250\1\0\15\3\1\0"+
    "\1\3\10\0\2\3\1\0\3\3\2\0\3\3\1\0"+
    "\1\57\1\60\6\3\5\0\2\3\1\251\2\3\1\0"+
    "\3\3\1\0\15\3\1\0\1\3\10\0\2\3\1\0"+
    "\3\3\2\0\3\3\1\0\1\57\1\60\4\3\1\252"+
    "\1\3\5\0\5\3\1\0\3\3\1\0\15\3\1\0"+
    "\1\3\10\0\2\3\1\0\3\3\2\0\3\3\1\0"+
    "\1\57\1\60\6\3\5\0\1\253\4\3\1\0\3\3"+
    "\1\0\15\3\1\0\1\3\10\0\2\3\1\0\3\3"+
    "\12\0\1\254\61\0\3\3\1\0\1\57\1\60\6\3"+
    "\5\0\1\255\4\3\1\0\3\3\1\0\15\3\1\0"+
    "\1\3\10\0\2\3\1\0\3\3\2\0\3\3\1\0"+
    "\1\57\1\60\4\3\1\256\1\3\5\0\5\3\1\0"+
    "\3\3\1\0\15\3\1\0\1\3\10\0\2\3\1\0"+
    "\3\3\36\0\1\257\35\0\3\3\1\0\1\57\1\60"+
    "\6\3\5\0\4\3\1\260\1\0\3\3\1\0\15\3"+
    "\1\0\1\3\10\0\2\3\1\0\3\3\2\0\3\3"+
    "\1\0\1\57\1\60\6\3\5\0\2\3\1\261\2\3"+
    "\1\0\3\3\1\0\15\3\1\0\1\3\10\0\2\3"+
    "\1\0\3\3\2\0\3\3\1\0\1\57\1\60\4\3"+
    "\1\262\1\3\5\0\5\3\1\0\3\3\1\0\15\3"+
    "\1\0\1\3\10\0\2\3\1\0\3\3\2\0\3\3"+
    "\1\0\1\57\1\60\6\3\5\0\5\3\1\0\3\3"+
    "\1\0\3\3\1\263\11\3\1\0\1\3\10\0\2\3"+
    "\1\0\3\3\2\0\3\3\1\0\1\57\1\60\6\3"+
    "\5\0\5\3\1\0\3\3\1\0\6\3\1\264\6\3"+
    "\1\0\1\3\10\0\2\3\1\0\3\3\1\0\15\74"+
    "\1\77\6\74\1\265\60\74\1\266\1\74\1\77\65\74"+
    "\1\267\3\74\1\77\54\74\1\0\3\3\1\0\1\57"+
    "\1\60\6\3\5\0\5\3\1\0\2\3\1\270\1\0"+
    "\15\3\1\0\1\3\10\0\2\3\1\0\3\3\2\0"+
    "\3\3\1\0\1\57\1\60\6\3\5\0\1\3\1\271"+
    "\3\3\1\0\3\3\1\0\15\3\1\0\1\3\10\0"+
    "\2\3\1\0\3\3\2\0\3\3\1\0\1\57\1\60"+
    "\6\3\5\0\5\3\1\0\1\3\1\272\1\3\1\0"+
    "\15\3\1\0\1\3\10\0\2\3\1\0\3\3\2\0"+
    "\3\3\1\0\1\57\1\60\4\3\1\273\1\3\5\0"+
    "\5\3\1\0\3\3\1\0\15\3\1\0\1\3\10\0"+
    "\2\3\1\0\3\3\2\0\3\3\1\0\1\57\1\60"+
    "\6\3\5\0\5\3\1\0\2\3\1\274\1\0\15\3"+
    "\1\0\1\3\10\0\2\3\1\0\3\3\2\0\3\3"+
    "\1\0\1\57\1\60\6\3\5\0\5\3\1\0\1\3"+
    "\1\275\1\3\1\0\15\3\1\0\1\3\10\0\2\3"+
    "\1\0\3\3\2\0\3\3\1\0\1\57\1\60\6\3"+
    "\5\0\1\3\1\276\3\3\1\0\3\3\1\0\15\3"+
    "\1\0\1\3\10\0\2\3\1\0\3\3\2\0\3\3"+
    "\1\0\1\57\1\60\1\277\5\3\5\0\5\3\1\0"+
    "\3\3\1\0\15\3\1\0\1\3\10\0\2\3\1\0"+
    "\3\3\2\0\3\3\1\0\1\57\1\60\6\3\5\0"+
    "\1\300\4\3\1\0\3\3\1\0\15\3\1\0\1\3"+
    "\10\0\2\3\1\0\3\3\2\0\3\3\1\0\1\57"+
    "\1\60\6\3\5\0\2\3\1\301\2\3\1\0\3\3"+
    "\1\0\15\3\1\0\1\3\10\0\2\3\1\0\3\3"+
    "\2\0\3\3\1\0\1\57\1\60\6\3\5\0\1\302"+
    "\4\3\1\0\3\3\1\0\15\3\1\0\1\3\10\0"+
    "\2\3\1\0\3\3\2\0\3\3\1\0\1\57\1\60"+
    "\6\3\5\0\3\3\1\303\1\3\1\0\3\3\1\0"+
    "\15\3\1\0\1\3\10\0\2\3\1\0\3\3\2\0"+
    "\3\3\1\0\1\57\1\60\6\3\5\0\4\3\1\304"+
    "\1\0\3\3\1\0\15\3\1\0\1\3\10\0\2\3"+
    "\1\0\3\3\2\0\3\3\1\0\1\57\1\60\6\3"+
    "\5\0\5\3\1\0\3\3\1\0\15\3\1\0\1\305"+
    "\10\0\2\3\1\0\3\3\2\0\3\3\1\0\1\57"+
    "\1\60\6\3\5\0\5\3\1\0\3\3\1\0\15\3"+
    "\1\0\1\3\10\0\1\306\1\3\1\0\3\3\2\0"+
    "\3\3\1\0\1\57\1\60\4\3\1\307\1\3\5\0"+
    "\5\3\1\0\3\3\1\0\15\3\1\0\1\3\10\0"+
    "\2\3\1\0\3\3\2\0\3\3\1\0\1\57\1\60"+
    "\6\3\5\0\1\310\4\3\1\0\3\3\1\0\15\3"+
    "\1\0\1\3\10\0\2\3\1\0\3\3\2\0\3\3"+
    "\1\0\1\57\1\60\1\3\1\247\4\3\5\0\5\3"+
    "\1\0\3\3\1\0\15\3\1\0\1\3\10\0\2\3"+
    "\1\0\3\3\2\0\3\3\1\0\1\57\1\60\6\3"+
    "\5\0\1\311\4\3\1\0\3\3\1\0\15\3\1\0"+
    "\1\3\10\0\2\3\1\0\3\3\2\0\3\3\1\0"+
    "\1\57\1\60\1\3\1\312\4\3\5\0\5\3\1\0"+
    "\3\3\1\0\15\3\1\0\1\3\10\0\2\3\1\0"+
    "\3\3\2\0\3\3\1\0\1\57\1\60\6\3\5\0"+
    "\2\3\1\313\2\3\1\0\3\3\1\0\15\3\1\0"+
    "\1\3\10\0\2\3\1\0\3\3\13\0\1\314\60\0"+
    "\3\3\1\0\1\57\1\60\6\3\5\0\3\3\1\315"+
    "\1\3\1\0\3\3\1\0\15\3\1\0\1\3\10\0"+
    "\2\3\1\0\3\3\11\0\1\316\62\0\3\3\1\0"+
    "\1\57\1\60\4\3\1\317\1\3\5\0\5\3\1\0"+
    "\3\3\1\0\15\3\1\0\1\3\10\0\2\3\1\0"+
    "\3\3\2\0\3\3\1\0\1\57\1\60\6\3\5\0"+
    "\1\3\1\320\3\3\1\0\3\3\1\0\15\3\1\0"+
    "\1\3\10\0\2\3\1\0\3\3\2\0\3\3\1\0"+
    "\1\57\1\60\1\321\5\3\5\0\5\3\1\0\3\3"+
    "\1\0\15\3\1\0\1\3\10\0\2\3\1\0\3\3"+
    "\2\0\3\3\1\0\1\57\1\60\1\3\1\322\4\3"+
    "\5\0\5\3\1\0\3\3\1\0\15\3\1\0\1\3"+
    "\10\0\2\3\1\0\3\3\1\0\15\74\1\77\4\74"+
    "\1\323\64\74\1\77\10\74\1\324\56\74\1\325\1\74"+
    "\1\77\54\74\1\0\3\3\1\0\1\57\1\60\6\3"+
    "\5\0\5\3\1\0\3\3\1\0\1\326\14\3\1\0"+
    "\1\3\10\0\2\3\1\0\3\3\2\0\3\3\1\0"+
    "\1\57\1\60\6\3\5\0\5\3\1\0\2\3\1\327"+
    "\1\0\15\3\1\0\1\3\10\0\2\3\1\0\3\3"+
    "\2\0\3\3\1\0\1\57\1\60\6\3\5\0\5\3"+
    "\1\0\1\330\2\3\1\0\15\3\1\0\1\3\10\0"+
    "\2\3\1\0\3\3\2\0\3\3\1\0\1\57\1\60"+
    "\6\3\5\0\5\3\1\0\2\3\1\331\1\0\15\3"+
    "\1\0\1\3\10\0\2\3\1\0\3\3\2\0\3\3"+
    "\1\0\1\57\1\60\4\3\1\332\1\3\5\0\5\3"+
    "\1\0\3\3\1\0\15\3\1\0\1\3\10\0\2\3"+
    "\1\0\3\3\2\0\3\3\1\0\1\57\1\60\1\333"+
    "\5\3\5\0\5\3\1\0\3\3\1\0\15\3\1\0"+
    "\1\3\10\0\2\3\1\0\3\3\2\0\3\3\1\0"+
    "\1\57\1\60\6\3\5\0\1\3\1\334\3\3\1\0"+
    "\3\3\1\0\15\3\1\0\1\3\10\0\2\3\1\0"+
    "\3\3\2\0\3\3\1\0\1\57\1\60\6\3\5\0"+
    "\5\3\1\0\2\3\1\335\1\0\15\3\1\0\1\3"+
    "\10\0\2\3\1\0\3\3\2\0\3\3\1\0\1\57"+
    "\1\60\6\3\5\0\2\3\1\336\2\3\1\0\3\3"+
    "\1\0\15\3\1\0\1\3\10\0\2\3\1\0\3\3"+
    "\2\0\3\3\1\0\1\57\1\60\1\3\1\337\4\3"+
    "\5\0\5\3\1\0\3\3\1\0\15\3\1\0\1\3"+
    "\10\0\2\3\1\0\3\3\2\0\3\3\1\0\1\57"+
    "\1\60\1\3\1\340\4\3\5\0\5\3\1\0\3\3"+
    "\1\0\15\3\1\0\1\3\10\0\2\3\1\0\3\3"+
    "\2\0\3\3\1\0\1\57\1\60\1\3\1\341\4\3"+
    "\5\0\5\3\1\0\3\3\1\0\15\3\1\0\1\3"+
    "\10\0\2\3\1\0\3\3\2\0\3\3\1\0\1\57"+
    "\1\60\4\3\1\342\1\3\5\0\5\3\1\0\3\3"+
    "\1\0\15\3\1\0\1\3\10\0\2\3\1\0\3\3"+
    "\2\0\3\3\1\0\1\57\1\60\6\3\5\0\5\3"+
    "\1\0\3\3\1\0\5\3\1\343\7\3\1\0\1\3"+
    "\10\0\2\3\1\0\3\3\2\0\3\3\1\0\1\57"+
    "\1\60\6\3\5\0\1\3\1\344\3\3\1\0\3\3"+
    "\1\0\15\3\1\0\1\3\10\0\2\3\1\0\3\3"+
    "\14\0\1\345\57\0\3\3\1\0\1\57\1\60\6\3"+
    "\5\0\2\3\1\346\2\3\1\0\3\3\1\0\15\3"+
    "\1\0\1\3\10\0\2\3\1\0\3\3\2\0\3\3"+
    "\1\0\1\57\1\60\1\347\5\3\5\0\5\3\1\0"+
    "\3\3\1\0\15\3\1\0\1\3\10\0\2\3\1\0"+
    "\3\3\2\0\3\3\1\0\1\57\1\60\6\3\5\0"+
    "\5\3\1\0\3\3\1\0\1\350\14\3\1\0\1\3"+
    "\10\0\2\3\1\0\3\3\2\0\3\3\1\0\1\57"+
    "\1\60\6\3\5\0\5\3\1\0\3\3\1\0\1\351"+
    "\14\3\1\0\1\3\10\0\2\3\1\0\3\3\2\0"+
    "\3\3\1\0\1\57\1\60\6\3\5\0\1\352\4\3"+
    "\1\0\3\3\1\0\15\3\1\0\1\3\10\0\2\3"+
    "\1\0\3\3\1\0\15\74\1\353\67\74\1\354\1\74"+
    "\1\77\71\74\1\77\12\74\1\355\41\74\1\0\3\3"+
    "\1\0\1\57\1\60\6\3\5\0\1\356\4\3\1\0"+
    "\3\3\1\0\15\3\1\0\1\3\10\0\2\3\1\0"+
    "\3\3\2\0\3\3\1\0\1\57\1\60\6\3\5\0"+
    "\5\3\1\0\3\3\1\0\1\357\14\3\1\0\1\3"+
    "\10\0\2\3\1\0\3\3\2\0\3\3\1\0\1\57"+
    "\1\60\6\3\5\0\2\3\1\360\2\3\1\0\3\3"+
    "\1\0\15\3\1\0\1\3\10\0\2\3\1\0\3\3"+
    "\2\0\3\3\1\0\1\57\1\60\6\3\5\0\3\3"+
    "\1\361\1\3\1\0\3\3\1\0\15\3\1\0\1\3"+
    "\10\0\2\3\1\0\3\3\2\0\3\3\1\0\1\57"+
    "\1\60\4\3\1\362\1\3\5\0\5\3\1\0\3\3"+
    "\1\0\15\3\1\0\1\3\10\0\2\3\1\0\3\3"+
    "\2\0\3\3\1\0\1\57\1\60\6\3\5\0\2\3"+
    "\1\363\2\3\1\0\3\3\1\0\15\3\1\0\1\3"+
    "\10\0\2\3\1\0\3\3\2\0\3\3\1\0\1\57"+
    "\1\60\6\3\5\0\5\3\1\0\1\364\2\3\1\0"+
    "\15\3\1\0\1\3\10\0\2\3\1\0\3\3\2\0"+
    "\3\3\1\0\1\57\1\60\6\3\5\0\5\3\1\0"+
    "\3\3\1\0\5\3\1\365\7\3\1\0\1\3\10\0"+
    "\2\3\1\0\3\3\2\0\3\3\1\0\1\57\1\60"+
    "\1\3\1\366\4\3\5\0\5\3\1\0\3\3\1\0"+
    "\15\3\1\0\1\3\10\0\2\3\1\0\3\3\2\0"+
    "\3\3\1\0\1\57\1\60\6\3\5\0\5\3\1\0"+
    "\2\3\1\367\1\0\15\3\1\0\1\3\10\0\2\3"+
    "\1\0\3\3\2\0\3\3\1\0\1\57\1\60\6\3"+
    "\5\0\1\370\4\3\1\0\3\3\1\0\15\3\1\0"+
    "\1\3\10\0\2\3\1\0\3\3\15\0\1\371\56\0"+
    "\3\3\1\0\1\57\1\60\6\3\5\0\3\3\1\372"+
    "\1\3\1\0\3\3\1\0\15\3\1\0\1\3\10\0"+
    "\2\3\1\0\3\3\2\0\3\3\1\0\1\57\1\60"+
    "\6\3\5\0\2\3\1\373\2\3\1\0\3\3\1\0"+
    "\15\3\1\0\1\3\10\0\2\3\1\0\3\3\2\0"+
    "\3\3\1\0\1\57\1\60\6\3\5\0\2\3\1\374"+
    "\2\3\1\0\3\3\1\0\15\3\1\0\1\3\10\0"+
    "\2\3\1\0\3\3\2\0\3\3\1\0\1\57\1\60"+
    "\1\3\1\375\4\3\5\0\5\3\1\0\3\3\1\0"+
    "\15\3\1\0\1\3\10\0\2\3\1\0\3\3\2\0"+
    "\3\3\1\0\1\57\1\60\6\3\5\0\3\3\1\376"+
    "\1\3\1\0\3\3\1\0\15\3\1\0\1\3\10\0"+
    "\2\3\1\0\3\3\1\0\7\74\1\377\5\74\1\77"+
    "\71\74\1\77\6\74\1\u0100\45\74\1\0\3\3\1\0"+
    "\1\57\1\60\1\3\1\u0101\4\3\5\0\5\3\1\0"+
    "\3\3\1\0\15\3\1\0\1\3\10\0\2\3\1\0"+
    "\3\3\2\0\3\3\1\0\1\57\1\60\6\3\5\0"+
    "\1\u0102\4\3\1\0\3\3\1\0\15\3\1\0\1\3"+
    "\10\0\2\3\1\0\3\3\2\0\3\3\1\0\1\57"+
    "\1\60\1\3\1\u0103\4\3\5\0\5\3\1\0\3\3"+
    "\1\0\15\3\1\0\1\3\10\0\2\3\1\0\3\3"+
    "\2\0\3\3\1\0\1\57\1\60\6\3\5\0\5\3"+
    "\1\u0104\3\3\1\0\15\3\1\0\1\3\10\0\2\3"+
    "\1\0\3\3\2\0\3\3\1\0\1\57\1\60\6\3"+
    "\5\0\5\3\1\0\1\3\1\u0105\1\3\1\0\15\3"+
    "\1\0\1\3\10\0\2\3\1\0\3\3\2\0\3\3"+
    "\1\0\1\57\1\60\1\3\1\u0106\4\3\5\0\5\3"+
    "\1\0\3\3\1\0\15\3\1\0\1\3\10\0\2\3"+
    "\1\0\3\3\2\0\3\3\1\0\1\57\1\60\6\3"+
    "\5\0\5\3\1\0\2\3\1\u0107\1\0\15\3\1\0"+
    "\1\3\10\0\2\3\1\0\3\3\2\0\3\3\1\0"+
    "\1\57\1\60\6\3\5\0\5\3\1\0\3\3\1\0"+
    "\3\3\1\u0108\11\3\1\0\1\3\10\0\2\3\1\0"+
    "\3\3\5\0\1\u0109\66\0\3\3\1\0\1\57\1\60"+
    "\6\3\5\0\1\u010a\4\3\1\0\3\3\1\0\15\3"+
    "\1\0\1\3\10\0\2\3\1\0\3\3\2\0\3\3"+
    "\1\0\1\57\1\60\6\3\5\0\1\u010b\4\3\1\0"+
    "\3\3\1\0\15\3\1\0\1\3\10\0\2\3\1\0"+
    "\3\3\1\0\15\74\1\77\6\74\1\u010c\62\74\1\77"+
    "\4\74\1\u010d\47\74\30\0\1\u010e\42\0\3\3\1\0"+
    "\1\57\1\60\6\3\5\0\5\3\1\0\3\3\1\0"+
    "\3\3\1\u010f\11\3\1\0\1\3\10\0\2\3\1\0"+
    "\3\3\2\0\3\3\1\0\1\57\1\60\6\3\5\0"+
    "\2\3\1\u0110\2\3\1\0\3\3\1\0\15\3\1\0"+
    "\1\3\10\0\2\3\1\0\3\3\10\0\1\u0111\63\0"+
    "\3\3\1\0\1\57\1\60\4\3\1\u0112\1\3\5\0"+
    "\5\3\1\0\3\3\1\0\15\3\1\0\1\3\10\0"+
    "\2\3\1\0\3\3\1\0\7\74\1\u0113\5\74\1\77"+
    "\4\74\1\u0114\64\74\1\u0115\54\74\1\0\3\3\1\0"+
    "\1\57\1\60\6\3\5\0\2\3\1\u0116\2\3\1\0"+
    "\3\3\1\0\15\3\1\0\1\3\10\0\2\3\1\0"+
    "\3\3\2\0\3\3\1\0\1\57\1\60\6\3\5\0"+
    "\1\u0117\4\3\1\0\3\3\1\0\15\3\1\0\1\3"+
    "\10\0\2\3\1\0\3\3\11\0\1\u0118\62\0\3\3"+
    "\1\0\1\57\1\60\1\3\1\u0119\4\3\5\0\5\3"+
    "\1\0\3\3\1\0\15\3\1\0\1\3\10\0\2\3"+
    "\1\0\3\3\1\0\13\74\1\u011a\1\74\1\77\71\74"+
    "\1\u011b\54\74\1\0\3\3\1\0\1\57\1\60\6\3"+
    "\5\0\1\u011c\4\3\1\0\3\3\1\0\15\3\1\0"+
    "\1\3\10\0\2\3\1\0\3\3\2\0\3\3\1\0"+
    "\1\57\1\60\4\3\1\u011d\1\3\5\0\5\3\1\0"+
    "\3\3\1\0\15\3\1\0\1\3\10\0\2\3\1\0"+
    "\3\3\12\0\1\u011e\60\0\15\74\1\77\11\74\1\u011f"+
    "\42\74\1\0\3\3\1\0\1\57\1\60\4\3\1\u0120"+
    "\1\3\5\0\5\3\1\0\3\3\1\0\15\3\1\0"+
    "\1\3\10\0\2\3\1\0\3\3\2\0\3\3\1\0"+
    "\1\57\1\60\1\3\1\u0121\4\3\5\0\5\3\1\0"+
    "\3\3\1\0\15\3\1\0\1\3\10\0\2\3\1\0"+
    "\3\3\1\0\15\74\1\77\12\74\1\u0114\41\74\1\0"+
    "\3\3\1\0\1\57\1\60\1\3\1\u0122\4\3\5\0"+
    "\5\3\1\0\3\3\1\0\15\3\1\0\1\3\10\0"+
    "\2\3\1\0\3\3\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13398];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\14\1\1\11\7\1\1\11\12\1\11\11"+
    "\4\1\2\0\1\1\1\11\2\1\1\0\6\1\3\0"+
    "\1\11\2\0\1\11\1\0\30\1\1\11\1\1\1\0"+
    "\3\1\1\0\6\1\4\0\32\1\1\0\3\1\1\0"+
    "\6\1\3\0\27\1\1\0\2\1\1\0\5\1\3\0"+
    "\24\1\1\0\1\1\1\11\4\1\3\0\17\1\1\0"+
    "\5\1\1\11\2\0\13\1\1\0\5\1\2\0\3\1"+
    "\1\0\4\1\1\0\2\1\2\0\1\11\2\1\1\0"+
    "\1\1\2\0\1\11\2\1\1\0\1\1\1\0\1\11"+
    "\2\1\1\11\1\0\3\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[290];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
		


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexico_Request(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexico_Request(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 178) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 9: 
          { return new Symbol(Simbolo.pyc, yycolumn,yyline,yytext());
          }
        case 64: break;
        case 14: 
          { return new Symbol(Simbolo.parentesis, yycolumn,yyline,yytext());
          }
        case 65: break;
        case 32: 
          { return new Symbol(Simbolo.color, yycolumn,yyline,yytext());
          }
        case 66: break;
        case 28: 
          { return new Symbol(Simbolo.constante, yycolumn,yyline,yytext());
          }
        case 67: break;
        case 13: 
          { return new Symbol(Simbolo.corchete, yycolumn,yyline,yytext());
          }
        case 68: break;
        case 38: 
          { return new Symbol(Simbolo.avacio, yycolumn,yyline,yytext());
          }
        case 69: break;
        case 44: 
          { return new Symbol(Simbolo.CREACION, yycolumn,yyline,yytext());
          }
        case 70: break;
        case 4: 
          { return new Symbol(Simbolo.resta, yycolumn,yyline,yytext());
          }
        case 71: break;
        case 17: 
          { return new Symbol(Simbolo.NOT, yycolumn,yyline,yytext());
          }
        case 72: break;
        case 26: 
          { return new Symbol(Simbolo.get, yycolumn,yyline,yytext());
          }
        case 73: break;
        case 29: 
          { return new Symbol(Simbolo.mate, yycolumn,yyline,yytext());
          }
        case 74: break;
        case 63: 
          { return new Symbol(Simbolo.iniciousuario, yycolumn,yyline,yytext());
          }
        case 75: break;
        case 50: 
          { return new Symbol(Simbolo.password, yycolumn,yyline,yytext());
          }
        case 76: break;
        case 16: 
          { return new Symbol(Simbolo.llavesf, yycolumn,yyline,yytext());
          }
        case 77: break;
        case 15: 
          { return new Symbol(Simbolo.llavesi, yycolumn,yyline,yytext());
          }
        case 78: break;
        case 37: 
          { return new Symbol(Simbolo.consulta ,yycolumn,yyline,yytext());
          }
        case 79: break;
        case 41: 
          { return new Symbol(Simbolo.nombre, yycolumn,yyline,yytext());
          }
        case 80: break;
        case 21: 
          { return new Symbol(Simbolo.OR, yycolumn,yyline,yytext());
          }
        case 81: break;
        case 24: 
          { return new Symbol(Simbolo.AND, yycolumn,yyline,yytext());
          }
        case 82: break;
        case 42: 
          { return new Symbol(Simbolo.tienda, yycolumn,yyline,yytext());
          }
        case 83: break;
        case 27: 
          { return new Symbol(Simbolo.potencia, yycolumn,yyline,yytext());
          }
        case 84: break;
        case 55: 
          { return new Symbol(Simbolo.telefono, yycolumn,yyline,yytext());
          }
        case 85: break;
        case 40: 
          { return new Symbol(Simbolo.access, yycolumn,yyline,yytext());
          }
        case 86: break;
        case 43: 
          { return new Symbol(Simbolo.tamano, yycolumn,yyline,yytext());
          }
        case 87: break;
        case 22: 
          { return new Symbol(Simbolo.de, yycolumn,yyline,yytext());
          }
        case 88: break;
        case 25: 
          { return new Symbol(Simbolo.imagen, yycolumn,yyline,yytext());
          }
        case 89: break;
        case 58: 
          { return new Symbol(Simbolo.ELIMINACION, yycolumn,yyline,yytext());
          }
        case 90: break;
        case 30: 
          { return new Symbol(Simbolo.tipo, yycolumn,yyline,yytext());
          }
        case 91: break;
        case 19: 
          { return new Symbol(Simbolo.id, yycolumn,yyline, yytext());
          }
        case 92: break;
        case 23: 
          { return new Symbol(Simbolo.raiz, yycolumn,yyline,yytext());
          }
        case 93: break;
        case 60: 
          { return new Symbol(Simbolo.MODIFICACION, yycolumn,yyline,yytext());
          }
        case 94: break;
        case 49: 
          { return new Symbol(Simbolo.producto, yycolumn,yyline,yytext());
          }
        case 95: break;
        case 12: 
          { return new Symbol(Simbolo.corchete,yycolumn,yyline,yytext());
          }
        case 96: break;
        case 51: 
          { return new Symbol(Simbolo.registro, yycolumn,yyline,yytext());
          }
        case 97: break;
        case 45: 
          { return new Symbol(Simbolo.request, yycolumn,yyline,yytext());
          }
        case 98: break;
        case 56: 
          { return new Symbol(Simbolo.modificar, yycolumn,yyline,yytext());
          }
        case 99: break;
        case 31: 
          { return new Symbol(Simbolo.boolean, yycolumn,yyline,yytext());
          }
        case 100: break;
        case 3: 
          { return new Symbol(Simbolo.numero, yycolumn,yyline,yytext());
          }
        case 101: break;
        case 2: 
          { return new Symbol(Simbolo.Identificador, yycolumn,yyline,yytext());
          }
        case 102: break;
        case 7: 
          { return new Symbol(Simbolo.DI, yycolumn,yyline,yytext());
          }
        case 103: break;
        case 18: 
          { return new Symbol(Simbolo.DF, yycolumn,yyline,yytext());
          }
        case 104: break;
        case 57: 
          { return new Symbol(Simbolo.direccion, yycolumn,yyline,yytext());
          }
        case 105: break;
        case 47: 
          { return new Symbol(Simbolo.extraer, yycolumn,yyline,yytext());
          }
        case 106: break;
        case 33: 
          { return new Symbol(Simbolo.marca, yycolumn,yyline,yytext());
          }
        case 107: break;
        case 11: 
          { return new Symbol(Simbolo.igual, yycolumn,yyline,yytext());
          }
        case 108: break;
        case 35: 
          { return new Symbol(Simbolo.donde, yycolumn,yyline,yytext());
          }
        case 109: break;
        case 20: 
          { String Cadenita=yytext();
                     		Cadenita = Cadenita.substring(1,Cadenita.length()-1);
 				System.out.println(Cadenita);
				return new Symbol(Simbolo.Cadena, yycolumn,yyline,Cadenita);
          }
        case 110: break;
        case 8: 
          { return new Symbol(Simbolo.suma, yycolumn,yyline,yytext());
          }
        case 111: break;
        case 39: 
          { return new Symbol(Simbolo.codigo, yycolumn,yyline,yytext());
          }
        case 112: break;
        case 52: 
          { return new Symbol(Simbolo.eliminacion, yycolumn,yyline,yytext());
          }
        case 113: break;
        case 61: 
          { return new Symbol(Simbolo.CorreoE, yycolumn,yyline,yytext());
          }
        case 114: break;
        case 5: 
          { return new Symbol(Simbolo.division, yycolumn,yyline,yytext());
          }
        case 115: break;
        case 6: 
          { return new Symbol(Simbolo.multiplicacion, yycolumn,yyline,yytext());
          }
        case 116: break;
        case 10: 
          { return new Symbol(Simbolo.coma, yycolumn,yyline,yytext());
          }
        case 117: break;
        case 62: 
          { return new Symbol(Simbolo.crearusuario, yycolumn,yyline,yytext());
          }
        case 118: break;
        case 36: 
          { return new Symbol(Simbolo.lista, yycolumn,yyline,yytext());
          }
        case 119: break;
        case 59: 
          { return new Symbol(Simbolo.propietario, yycolumn,yyline,yytext());
          }
        case 120: break;
        case 48: 
          { return new Symbol(Simbolo.cantidad, yycolumn,yyline,yytext());
          }
        case 121: break;
        case 46: 
          { return new Symbol(Simbolo.usuario, yycolumn,yyline,yytext());
          }
        case 122: break;
        case 54: 
          { return new Symbol(Simbolo.sucursal, yycolumn,yyline,yytext());
          }
        case 123: break;
        case 53: 
          { return new Symbol(Simbolo.apellido, yycolumn,yyline,yytext());
          }
        case 124: break;
        case 1: 
          { 
          }
        case 125: break;
        case 34: 
          { return new Symbol(Simbolo.email, yycolumn,yyline,yytext());
          }
        case 126: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(Simbolo.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
