
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Apr 10 23:49:06 CST 2016
//----------------------------------------------------

package BackEnd.Analizador.Compilador;

import java_cup.runtime.*;
import BackEnd.DAO.Hash.Tabla_Hash_compilador;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Apr 10 23:49:06 CST 2016
  */
public class AnalizadorSintactico_compilador extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintactico_compilador() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico_compilador(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico_compilador(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\203\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\003\012\000\002\004\005" +
    "\000\002\005\004\000\002\005\003\000\002\006\013\000" +
    "\002\006\007\000\002\007\005\000\002\007\003\000\002" +
    "\010\003\000\002\043\004\000\002\043\003\000\002\043" +
    "\003\000\002\056\010\000\002\057\002\000\002\057\005" +
    "\000\002\054\005\000\002\054\003\000\002\055\003\000" +
    "\002\044\005\000\002\044\003\000\002\045\005\000\002" +
    "\045\003\000\002\046\005\000\002\046\003\000\002\062" +
    "\002\000\002\047\007\000\002\050\010\000\002\050\003" +
    "\000\002\051\010\000\002\051\003\000\002\052\005\000" +
    "\002\052\003\000\002\053\005\000\002\053\003\000\002" +
    "\053\003\000\002\011\003\000\002\011\003\000\002\012" +
    "\011\000\002\012\011\000\002\012\013\000\002\012\011" +
    "\000\002\060\007\000\002\061\002\000\002\061\005\000" +
    "\002\013\004\000\002\013\003\000\002\014\006\000\002" +
    "\014\003\000\002\015\011\000\002\015\003\000\002\016" +
    "\004\000\002\016\003\000\002\017\011\000\002\017\011" +
    "\000\002\017\011\000\002\017\011\000\002\017\011\000" +
    "\002\017\011\000\002\036\005\000\002\036\003\000\002" +
    "\037\005\000\002\037\005\000\002\037\005\000\002\037" +
    "\005\000\002\037\005\000\002\037\005\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\020\007\000" +
    "\002\021\013\000\002\021\006\000\002\021\014\000\002" +
    "\022\004\000\002\022\003\000\002\023\011\000\002\023" +
    "\011\000\002\023\011\000\002\023\011\000\002\023\011" +
    "\000\002\023\011\000\002\023\011\000\002\033\004\000" +
    "\002\033\003\000\002\034\005\000\002\034\005\000\002" +
    "\034\005\000\002\034\005\000\002\034\005\000\002\034" +
    "\005\000\002\035\003\000\002\035\003\000\002\024\011" +
    "\000\002\024\011\000\002\025\004\000\002\025\003\000" +
    "\002\026\011\000\002\026\011\000\002\026\011\000\002" +
    "\026\011\000\002\026\011\000\002\026\011\000\002\026" +
    "\011\000\002\027\004\000\002\027\003\000\002\030\011" +
    "\000\002\030\011\000\002\031\007\000\002\032\003\000" +
    "\002\032\003\000\002\032\003\000\002\040\002\000\002" +
    "\040\006\000\002\040\003\000\002\041\006\000\002\041" +
    "\006\000\002\041\006\000\002\041\006\000\002\041\006" +
    "\000\002\041\006\000\002\041\006\000\002\041\006\000" +
    "\002\041\006\000\002\041\006\000\002\041\006\000\002" +
    "\042\003\000\002\042\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01a7\000\004\005\007\001\002\000\004\002\u01a9\001" +
    "\002\000\006\002\000\005\u01a8\001\002\000\006\002\ufffe" +
    "\005\ufffe\001\002\000\012\007\011\010\012\056\013\057" +
    "\010\001\002\000\004\005\u0167\001\002\000\004\005\u0158" +
    "\001\002\000\004\005\137\001\002\000\004\017\014\001" +
    "\002\000\004\047\015\001\002\000\004\072\016\001\002" +
    "\000\004\005\023\001\002\000\004\005\020\001\002\000" +
    "\004\056\021\001\002\000\004\006\022\001\002\000\006" +
    "\002\ufffd\005\ufffd\001\002\000\006\004\026\074\025\001" +
    "\002\000\010\004\026\005\ufffc\074\025\001\002\000\004" +
    "\052\036\001\002\000\004\074\030\001\002\000\010\004" +
    "\ufffa\005\ufffa\074\ufffa\001\002\000\004\047\031\001\002" +
    "\000\006\045\032\072\033\001\002\000\004\044\uffda\001" +
    "\002\000\004\044\uffd9\001\002\000\004\044\035\001\002" +
    "\000\010\004\ufff8\005\ufff8\074\ufff8\001\002\000\004\074" +
    "\040\001\002\000\006\046\ufff6\053\ufff6\001\002\000\006" +
    "\046\ufff5\053\ufff5\001\002\000\006\046\043\053\042\001" +
    "\002\000\004\047\045\001\002\000\004\074\040\001\002" +
    "\000\006\046\ufff7\053\ufff7\001\002\000\004\054\046\001" +
    "\002\000\004\050\050\001\002\000\004\055\134\001\002" +
    "\000\004\074\117\001\002\000\036\005\ufff3\006\ufff3\013" +
    "\ufff3\017\ufff3\025\ufff3\030\ufff3\035\105\040\ufff3\042\ufff3" +
    "\044\ufff3\053\ufff3\055\ufff3\061\ufff3\062\ufff3\001\002\000" +
    "\044\005\uffe6\006\uffe6\013\uffe6\017\uffe6\025\uffe6\030\uffe6" +
    "\033\uffe6\034\062\035\uffe6\036\uffe6\040\uffe6\042\uffe6\044" +
    "\uffe6\053\uffe6\055\uffe6\061\uffe6\062\uffe6\001\002\000\042" +
    "\005\uffe8\006\uffe8\013\uffe8\017\uffe8\025\uffe8\030\uffe8\033" +
    "\060\035\uffe8\036\uffe8\040\uffe8\042\uffe8\044\uffe8\053\uffe8" +
    "\055\uffe8\061\uffe8\062\uffe8\001\002\000\040\005\uffea\006" +
    "\uffea\013\uffea\017\uffea\025\uffea\030\uffea\035\uffea\036\056" +
    "\040\uffea\042\uffea\044\uffea\053\uffea\055\uffea\061\uffea\062" +
    "\uffea\001\002\000\034\005\ufff2\006\ufff2\013\ufff2\017\ufff2" +
    "\025\ufff2\030\ufff2\040\ufff2\042\ufff2\044\ufff2\053\ufff2\055" +
    "\ufff2\061\ufff2\062\ufff2\001\002\000\002\001\002\000\042" +
    "\005\uffe9\006\uffe9\013\uffe9\017\uffe9\025\uffe9\030\uffe9\033" +
    "\060\035\uffe9\036\uffe9\040\uffe9\042\uffe9\044\uffe9\053\uffe9" +
    "\055\uffe9\061\uffe9\062\uffe9\001\002\000\002\001\002\000" +
    "\044\005\uffe7\006\uffe7\013\uffe7\017\uffe7\025\uffe7\030\uffe7" +
    "\033\uffe7\034\062\035\uffe7\036\uffe7\040\uffe7\042\uffe7\044" +
    "\uffe7\053\uffe7\055\uffe7\061\uffe7\062\uffe7\001\002\000\016" +
    "\031\063\032\071\045\072\052\070\054\074\074\073\001" +
    "\002\000\004\050\112\001\002\000\064\005\uffde\006\uffde" +
    "\013\uffde\017\uffde\025\uffde\030\uffde\031\uffde\032\uffde\033" +
    "\uffde\034\uffde\035\uffde\036\uffde\040\uffde\042\uffde\044\uffde" +
    "\045\uffde\046\uffde\051\uffde\052\uffde\053\uffde\054\uffde\055" +
    "\uffde\061\uffde\062\uffde\074\uffde\001\002\000\064\005\uffe0" +
    "\006\uffe0\013\uffe0\017\uffe0\025\uffe0\030\uffe0\031\uffe0\032" +
    "\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0\040\uffe0\042\uffe0" +
    "\044\uffe0\045\uffe0\046\uffe0\051\uffe0\052\uffe0\053\uffe0\054" +
    "\uffe0\055\uffe0\061\uffe0\062\uffe0\074\uffe0\001\002\000\060" +
    "\005\uffe2\006\uffe2\013\uffe2\017\uffe2\025\uffe2\030\uffe2\031" +
    "\uffe2\032\uffe2\033\uffe2\034\uffe2\035\uffe2\036\uffe2\040\uffe2" +
    "\042\uffe2\044\uffe2\045\uffe2\052\uffe2\053\uffe2\054\uffe2\055" +
    "\uffe2\061\uffe2\062\uffe2\074\uffe2\001\002\000\016\031\uffe5" +
    "\032\uffe5\045\uffe5\052\uffe5\054\uffe5\074\uffe5\001\002\000" +
    "\002\001\002\000\004\050\077\001\002\000\064\005\uffdc" +
    "\006\uffdc\013\uffdc\017\uffdc\025\uffdc\030\uffdc\031\uffdc\032" +
    "\uffdc\033\uffdc\034\uffdc\035\uffdc\036\uffdc\040\uffdc\042\uffdc" +
    "\044\uffdc\045\uffdc\046\uffdc\051\uffdc\052\uffdc\053\uffdc\054" +
    "\uffdc\055\uffdc\061\uffdc\062\uffdc\074\uffdc\001\002\000\064" +
    "\005\uffdb\006\uffdb\013\uffdb\017\uffdb\025\uffdb\030\uffdb\031" +
    "\uffdb\032\uffdb\033\uffdb\034\uffdb\035\uffdb\036\uffdb\040\uffdb" +
    "\042\uffdb\044\uffdb\045\uffdb\046\uffdb\051\uffdb\052\uffdb\053" +
    "\uffdb\054\uffdb\055\uffdb\061\uffdb\062\uffdb\074\uffdb\001\002" +
    "\000\010\045\072\052\070\074\073\001\002\000\004\055" +
    "\076\001\002\000\064\005\uffdf\006\uffdf\013\uffdf\017\uffdf" +
    "\025\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf\035" +
    "\uffdf\036\uffdf\040\uffdf\042\uffdf\044\uffdf\045\uffdf\046\uffdf" +
    "\051\uffdf\052\uffdf\053\uffdf\054\uffdf\055\uffdf\061\uffdf\062" +
    "\uffdf\074\uffdf\001\002\000\012\045\072\052\070\054\074" +
    "\074\073\001\002\000\004\046\101\001\002\000\012\045" +
    "\072\052\070\054\074\074\073\001\002\000\004\051\103" +
    "\001\002\000\064\005\uffe1\006\uffe1\013\uffe1\017\uffe1\025" +
    "\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1" +
    "\036\uffe1\040\uffe1\042\uffe1\044\uffe1\045\uffe1\046\uffe1\051" +
    "\uffe1\052\uffe1\053\uffe1\054\uffe1\055\uffe1\061\uffe1\062\uffe1" +
    "\074\uffe1\001\002\000\006\035\105\053\106\001\002\000" +
    "\002\001\002\000\064\005\uffdd\006\uffdd\013\uffdd\017\uffdd" +
    "\025\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd\035" +
    "\uffdd\036\uffdd\040\uffdd\042\uffdd\044\uffdd\045\uffdd\046\uffdd" +
    "\051\uffdd\052\uffdd\053\uffdd\054\uffdd\055\uffdd\061\uffdd\062" +
    "\uffdd\074\uffdd\001\002\000\040\005\uffeb\006\uffeb\013\uffeb" +
    "\017\uffeb\025\uffeb\030\uffeb\035\uffeb\036\056\040\uffeb\042" +
    "\uffeb\044\uffeb\053\uffeb\055\uffeb\061\uffeb\062\uffeb\001\002" +
    "\000\016\031\063\032\071\045\072\052\070\054\074\074" +
    "\073\001\002\000\044\005\uffe4\006\uffe4\013\uffe4\017\uffe4" +
    "\025\uffe4\030\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4\040" +
    "\uffe4\042\uffe4\044\uffe4\053\uffe4\055\uffe4\061\uffe4\062\uffe4" +
    "\001\002\000\014\032\071\045\072\052\070\054\074\074" +
    "\073\001\002\000\004\046\114\001\002\000\014\032\071" +
    "\045\072\052\070\054\074\074\073\001\002\000\004\051" +
    "\116\001\002\000\060\005\uffe3\006\uffe3\013\uffe3\017\uffe3" +
    "\025\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3\034\uffe3\035" +
    "\uffe3\036\uffe3\040\uffe3\042\uffe3\044\uffe3\045\uffe3\052\uffe3" +
    "\053\uffe3\054\uffe3\055\uffe3\061\uffe3\062\uffe3\074\uffe3\001" +
    "\002\000\004\046\120\001\002\000\004\074\121\001\002" +
    "\000\006\051\ufff0\052\122\001\002\000\004\045\125\001" +
    "\002\000\004\051\124\001\002\000\034\005\ufff1\006\ufff1" +
    "\013\ufff1\017\ufff1\025\ufff1\030\ufff1\040\ufff1\042\ufff1\044" +
    "\ufff1\053\ufff1\055\ufff1\061\ufff1\062\ufff1\001\002\000\006" +
    "\046\uffec\053\uffec\001\002\000\006\046\130\053\131\001" +
    "\002\000\006\046\uffed\053\uffed\001\002\000\004\045\125" +
    "\001\002\000\004\051\uffef\001\002\000\006\046\uffee\053" +
    "\uffee\001\002\000\036\005\ufff4\006\ufff4\013\ufff4\017\ufff4" +
    "\025\ufff4\030\ufff4\035\105\040\ufff4\042\ufff4\044\ufff4\053" +
    "\ufff4\055\ufff4\061\ufff4\062\ufff4\001\002\000\004\044\135" +
    "\001\002\000\010\004\ufff9\005\ufff9\074\ufff9\001\002\000" +
    "\010\004\ufffb\005\ufffb\074\ufffb\001\002\000\004\005\143" +
    "\001\002\000\004\005\u0155\001\002\000\004\005\uffd0\001" +
    "\002\000\004\005\u0152\001\002\000\012\011\147\016\150" +
    "\024\146\037\145\001\002\000\004\005\uffce\001\002\000" +
    "\016\013\u0103\017\u0109\025\u010a\030\u011c\040\u0106\042\u0104" +
    "\001\002\000\020\012\257\017\267\021\264\023\260\025" +
    "\266\026\262\030\265\001\002\000\004\005\233\001\002" +
    "\000\004\005\151\001\002\000\004\005\154\001\002\000" +
    "\004\005\230\001\002\000\004\005\uff9e\001\002\000\020" +
    "\012\163\014\157\017\162\020\161\021\155\022\156\023" +
    "\160\001\002\000\004\005\222\001\002\000\004\005\215" +
    "\001\002\000\004\005\210\001\002\000\004\005\203\001" +
    "\002\000\004\005\176\001\002\000\004\005\171\001\002" +
    "\000\004\005\164\001\002\000\004\045\165\001\002\000" +
    "\004\005\166\001\002\000\004\012\167\001\002\000\004" +
    "\006\170\001\002\000\004\005\uff9d\001\002\000\004\072" +
    "\172\001\002\000\004\005\173\001\002\000\004\017\174" +
    "\001\002\000\004\006\175\001\002\000\004\005\uff9c\001" +
    "\002\000\004\072\177\001\002\000\004\005\200\001\002" +
    "\000\004\020\201\001\002\000\004\006\202\001\002\000" +
    "\004\005\uff9b\001\002\000\004\072\204\001\002\000\004" +
    "\005\205\001\002\000\004\023\206\001\002\000\004\006" +
    "\207\001\002\000\004\005\uff97\001\002\000\004\074\211" +
    "\001\002\000\004\005\212\001\002\000\004\014\213\001" +
    "\002\000\004\006\214\001\002\000\004\005\uff9a\001\002" +
    "\000\004\073\216\001\002\000\004\005\217\001\002\000" +
    "\004\022\220\001\002\000\004\006\221\001\002\000\004" +
    "\005\uff98\001\002\000\004\045\223\001\002\000\004\005" +
    "\224\001\002\000\004\021\225\001\002\000\004\006\226" +
    "\001\002\000\004\005\uff99\001\002\000\004\005\uff9f\001" +
    "\002\000\022\012\163\014\157\016\231\017\162\020\161" +
    "\021\155\022\156\023\160\001\002\000\004\006\232\001" +
    "\002\000\004\005\uffa1\001\002\000\004\005\236\001\002" +
    "\000\004\005\254\001\002\000\004\005\uff95\001\002\000" +
    "\006\012\240\014\237\001\002\000\004\005\246\001\002" +
    "\000\004\005\241\001\002\000\004\045\242\001\002\000" +
    "\004\005\243\001\002\000\004\012\244\001\002\000\004" +
    "\006\245\001\002\000\004\005\uff94\001\002\000\004\074" +
    "\247\001\002\000\004\005\250\001\002\000\004\014\251" +
    "\001\002\000\004\006\252\001\002\000\004\005\uff93\001" +
    "\002\000\004\005\uff96\001\002\000\010\011\255\012\240" +
    "\014\237\001\002\000\004\006\256\001\002\000\004\005" +
    "\uffa0\001\002\000\004\047\u0100\001\002\000\004\047\376" +
    "\001\002\000\006\006\uffc2\046\uffc2\001\002\000\004\047" +
    "\374\001\002\000\006\006\uffcc\046\370\001\002\000\004" +
    "\047\366\001\002\000\004\047\276\001\002\000\004\047" +
    "\274\001\002\000\004\047\272\001\002\000\004\006\271" +
    "\001\002\000\004\005\uffcf\001\002\000\004\072\273\001" +
    "\002\000\006\006\uffbe\046\uffbe\001\002\000\004\045\275" +
    "\001\002\000\006\006\uffc0\046\uffc0\001\002\000\010\067" +
    "\301\070\300\071\302\001\002\000\006\006\uffc1\046\uffc1" +
    "\001\002\000\024\005\uffa3\006\uffa3\013\uffa3\017\uffa3\025" +
    "\uffa3\030\uffa3\040\uffa3\042\uffa3\046\uffa3\001\002\000\004" +
    "\005\303\001\002\000\024\005\uffa2\006\uffa2\013\uffa2\017" +
    "\uffa2\025\uffa2\030\uffa2\040\uffa2\042\uffa2\046\uffa2\001\002" +
    "\000\004\005\305\001\002\000\004\005\363\001\002\000" +
    "\016\017\312\021\307\023\310\025\313\026\314\027\311" +
    "\001\002\000\004\005\uffca\001\002\000\004\005\356\001" +
    "\002\000\004\005\351\001\002\000\004\005\344\001\002" +
    "\000\004\005\327\001\002\000\004\005\322\001\002\000" +
    "\004\005\315\001\002\000\004\050\050\001\002\000\004" +
    "\005\317\001\002\000\004\026\320\001\002\000\004\006" +
    "\321\001\002\000\004\005\uffc8\001\002\000\004\050\050" +
    "\001\002\000\004\005\324\001\002\000\004\025\325\001" +
    "\002\000\004\006\326\001\002\000\004\005\uffc9\001\002" +
    "\000\012\045\330\050\333\060\331\072\332\001\002\000" +
    "\032\005\uffba\006\uffba\013\uffba\017\uffba\025\uffba\030\uffba" +
    "\040\uffba\042\uffba\044\uffba\053\uffba\061\uffba\062\uffba\001" +
    "\002\000\032\005\uffb9\006\uffb9\013\uffb9\017\uffb9\025\uffb9" +
    "\030\uffb9\040\uffb9\042\uffb9\044\uffb9\053\uffb9\061\uffb9\062" +
    "\uffb9\001\002\000\032\005\uffbb\006\uffbb\013\uffbb\017\uffbb" +
    "\025\uffbb\030\uffbb\040\uffbb\042\uffbb\044\uffbb\053\uffbb\061" +
    "\uffbb\062\uffbb\001\002\000\004\074\340\001\002\000\004" +
    "\005\335\001\002\000\004\017\336\001\002\000\004\006" +
    "\337\001\002\000\004\005\uffc7\001\002\000\004\046\341" +
    "\001\002\000\004\074\342\001\002\000\004\051\343\001" +
    "\002\000\032\005\uffb8\006\uffb8\013\uffb8\017\uffb8\025\uffb8" +
    "\030\uffb8\040\uffb8\042\uffb8\044\uffb8\053\uffb8\061\uffb8\062" +
    "\uffb8\001\002\000\004\074\345\001\002\000\004\005\346" +
    "\001\002\000\004\027\347\001\002\000\004\006\350\001" +
    "\002\000\004\005\uffc4\001\002\000\012\045\330\050\333" +
    "\060\331\072\332\001\002\000\004\005\353\001\002\000" +
    "\004\023\354\001\002\000\004\006\355\001\002\000\004" +
    "\005\uffc6\001\002\000\004\050\050\001\002\000\004\005" +
    "\360\001\002\000\004\021\361\001\002\000\004\006\362" +
    "\001\002\000\004\005\uffc5\001\002\000\020\017\312\021" +
    "\307\023\310\024\365\025\313\026\314\027\311\001\002" +
    "\000\004\005\uffcb\001\002\000\004\006\uffcd\001\002\000" +
    "\004\045\367\001\002\000\006\006\uffbc\046\uffbc\001\002" +
    "\000\016\017\267\021\264\023\260\025\266\026\262\030" +
    "\371\001\002\000\004\047\373\001\002\000\006\006\uffc3" +
    "\046\uffc3\001\002\000\006\070\300\071\302\001\002\000" +
    "\004\045\375\001\002\000\006\006\uffbf\046\uffbf\001\002" +
    "\000\004\072\377\001\002\000\006\006\uffbd\046\uffbd\001" +
    "\002\000\004\045\u0101\001\002\000\004\005\u0102\001\002" +
    "\000\016\013\u0103\017\u0109\025\u010a\030\u0107\040\u0106\042" +
    "\u0104\001\002\000\004\047\u0119\001\002\000\004\047\u0117" +
    "\001\002\000\020\005\u0113\013\u0103\017\u0109\025\u010a\030" +
    "\u0107\040\u0106\042\u0104\001\002\000\004\047\u0111\001\002" +
    "\000\004\047\u010f\001\002\000\022\005\uffaa\006\uffaa\013" +
    "\uffaa\017\uffaa\025\uffaa\030\uffaa\040\uffaa\042\uffaa\001\002" +
    "\000\004\047\u010d\001\002\000\004\047\u010b\001\002\000" +
    "\004\045\u010c\001\002\000\022\005\uffa8\006\uffa8\013\uffa8" +
    "\017\uffa8\025\uffa8\030\uffa8\040\uffa8\042\uffa8\001\002\000" +
    "\004\072\u010e\001\002\000\022\005\uffa6\006\uffa6\013\uffa6" +
    "\017\uffa6\025\uffa6\030\uffa6\040\uffa6\042\uffa6\001\002\000" +
    "\006\070\300\071\302\001\002\000\022\005\uffa9\006\uffa9" +
    "\013\uffa9\017\uffa9\025\uffa9\030\uffa9\040\uffa9\042\uffa9\001" +
    "\002\000\004\050\050\001\002\000\022\005\uffa4\006\uffa4" +
    "\013\uffa4\017\uffa4\025\uffa4\030\uffa4\040\uffa4\042\uffa4\001" +
    "\002\000\004\024\u0115\001\002\000\022\005\uffab\006\uffab" +
    "\013\uffab\017\uffab\025\uffab\030\uffab\040\uffab\042\uffab\001" +
    "\002\000\004\006\u0116\001\002\000\004\005\uffb5\001\002" +
    "\000\012\045\330\050\333\060\331\072\332\001\002\000" +
    "\022\005\uffa5\006\uffa5\013\uffa5\017\uffa5\025\uffa5\030\uffa5" +
    "\040\uffa5\042\uffa5\001\002\000\004\045\u011a\001\002\000" +
    "\022\005\uffa7\006\uffa7\013\uffa7\017\uffa7\025\uffa7\030\uffa7" +
    "\040\uffa7\042\uffa7\001\002\000\020\006\u0150\013\u0103\017" +
    "\u0109\025\u010a\030\u0107\040\u0106\042\u0104\001\002\000\004" +
    "\047\u011d\001\002\000\010\067\u011e\070\300\071\302\001" +
    "\002\000\004\005\u011f\001\002\000\004\005\u0121\001\002" +
    "\000\004\005\uffb3\001\002\000\020\017\u012a\025\u012b\027" +
    "\u0128\040\u0127\041\u0129\042\u0125\043\u0126\001\002\000\004" +
    "\005\u0124\001\002\000\004\005\uffb4\001\002\000\022\006" +
    "\u012c\017\u012a\025\u012b\027\u0128\040\u0127\041\u0129\042\u0125" +
    "\043\u0126\001\002\000\004\005\u014b\001\002\000\004\005" +
    "\u0146\001\002\000\004\005\u0141\001\002\000\004\005\u013c" +
    "\001\002\000\004\005\u0137\001\002\000\004\005\u0132\001" +
    "\002\000\004\005\u012d\001\002\000\004\005\uffb7\001\002" +
    "\000\004\050\050\001\002\000\004\005\u012f\001\002\000" +
    "\004\025\u0130\001\002\000\004\006\u0131\001\002\000\004" +
    "\005\uffb2\001\002\000\012\045\330\050\333\060\331\072" +
    "\332\001\002\000\004\005\u0134\001\002\000\004\017\u0135" +
    "\001\002\000\004\006\u0136\001\002\000\004\005\uffb1\001" +
    "\002\000\012\045\330\050\333\060\331\072\332\001\002" +
    "\000\004\005\u0139\001\002\000\004\041\u013a\001\002\000" +
    "\004\006\u013b\001\002\000\004\005\uffaf\001\002\000\004" +
    "\074\u013d\001\002\000\004\005\u013e\001\002\000\004\027" +
    "\u013f\001\002\000\004\006\u0140\001\002\000\004\005\uffac" +
    "\001\002\000\004\050\050\001\002\000\004\005\u0143\001" +
    "\002\000\004\040\u0144\001\002\000\004\006\u0145\001\002" +
    "\000\004\005\uffb0\001\002\000\004\050\050\001\002\000" +
    "\004\005\u0148\001\002\000\004\043\u0149\001\002\000\004" +
    "\006\u014a\001\002\000\004\005\uffae\001\002\000\012\045" +
    "\330\050\333\060\331\072\332\001\002\000\004\005\u014d" +
    "\001\002\000\004\042\u014e\001\002\000\004\006\u014f\001" +
    "\002\000\004\005\uffad\001\002\000\004\005\uffb6\001\002" +
    "\000\004\005\uffd1\001\002\000\010\010\u0153\024\146\037" +
    "\145\001\002\000\004\006\u0154\001\002\000\006\002\uffd8" +
    "\005\uffd8\001\002\000\004\010\u0156\001\002\000\004\006" +
    "\u0157\001\002\000\006\002\uffd5\005\uffd5\001\002\000\004" +
    "\030\u0159\001\002\000\004\047\u015a\001\002\000\004\072" +
    "\u015b\001\002\000\004\026\u0160\001\002\000\004\005\u015d" +
    "\001\002\000\004\007\u015e\001\002\000\004\006\u015f\001" +
    "\002\000\006\002\uffd6\005\uffd6\001\002\000\004\047\u0161" +
    "\001\002\000\004\045\u0162\001\002\000\006\005\uffd3\013" +
    "\u0163\001\002\000\004\047\u0165\001\002\000\004\005\uffd4" +
    "\001\002\000\004\045\u0166\001\002\000\004\005\uffd2\001" +
    "\002\000\004\064\u0168\001\002\000\004\065\u016d\001\002" +
    "\000\004\005\u016a\001\002\000\004\057\u016b\001\002\000" +
    "\004\006\u016c\001\002\000\006\002\uffd7\005\uffd7\001\002" +
    "\000\010\015\u0170\024\u0171\037\u016e\001\002\000\034\012" +
    "\uff8f\013\uff8f\017\uff8f\020\uff8f\021\uff8f\022\uff8f\023\uff8f" +
    "\025\uff8f\040\uff8f\043\uff8f\044\uff8f\063\uff8f\066\uff8f\001" +
    "\002\000\034\012\u0173\013\u017e\017\u017d\020\u017f\021\u017a" +
    "\022\u0177\023\u0174\025\u017c\040\u0176\043\u0179\044\uff8e\063" +
    "\u017b\066\u0172\001\002\000\034\012\uff91\013\uff91\017\uff91" +
    "\020\uff91\021\uff91\022\uff91\023\uff91\025\uff91\040\uff91\043" +
    "\uff91\044\uff91\063\uff91\066\uff91\001\002\000\034\012\uff90" +
    "\013\uff90\017\uff90\020\uff90\021\uff90\022\uff90\023\uff90\025" +
    "\uff90\040\uff90\043\uff90\044\uff90\063\uff90\066\uff90\001\002" +
    "\000\036\012\u0173\013\u017e\017\u017d\020\u017f\021\u017a\022" +
    "\u0177\023\u0174\025\u017c\040\u0176\043\u0179\061\uff8e\062\uff8e" +
    "\063\u017b\066\u0172\001\002\000\004\047\u019f\001\002\000" +
    "\004\047\u019c\001\002\000\010\044\uff8c\061\uff8c\062\uff8c" +
    "\001\002\000\004\047\u0199\001\002\000\004\047\u0196\001" +
    "\002\000\004\044\u0195\001\002\000\004\047\u0192\001\002" +
    "\000\004\047\u018f\001\002\000\004\052\u018c\001\002\000" +
    "\004\047\u0189\001\002\000\004\047\u0186\001\002\000\004" +
    "\047\u0183\001\002\000\004\047\u0180\001\002\000\004\047" +
    "\u0181\001\002\000\012\045\330\050\333\060\331\072\332" +
    "\001\002\000\012\044\uff88\053\uff88\061\uff88\062\uff88\001" +
    "\002\000\004\047\u0184\001\002\000\012\045\330\050\333" +
    "\060\331\072\332\001\002\000\012\044\uff83\053\uff83\061" +
    "\uff83\062\uff83\001\002\000\004\047\u0187\001\002\000\012" +
    "\045\330\050\333\060\331\072\332\001\002\000\012\044" +
    "\uff89\053\uff89\061\uff89\062\uff89\001\002\000\004\047\u018a" +
    "\001\002\000\012\045\330\050\333\060\331\072\332\001" +
    "\002\000\012\044\uff84\053\uff84\061\uff84\062\uff84\001\002" +
    "\000\030\012\u0173\013\u017e\017\u017d\020\u017f\021\u017a\022" +
    "\u0177\023\u0174\025\u017c\040\u0176\043\u0179\063\u017b\001\002" +
    "\000\004\053\u018e\001\002\000\012\044\uff8b\053\uff8b\061" +
    "\uff8b\062\uff8b\001\002\000\004\047\u0190\001\002\000\004" +
    "\050\050\001\002\000\012\044\uff87\053\uff87\061\uff87\062" +
    "\uff87\001\002\000\004\047\u0193\001\002\000\004\050\050" +
    "\001\002\000\012\044\uff81\053\uff81\061\uff81\062\uff81\001" +
    "\002\000\004\005\uff92\001\002\000\004\047\u0197\001\002" +
    "\000\012\045\330\050\333\060\331\072\332\001\002\000" +
    "\012\044\uff86\053\uff86\061\uff86\062\uff86\001\002\000\004" +
    "\047\u019a\001\002\000\004\050\050\001\002\000\012\044" +
    "\uff82\053\uff82\061\uff82\062\uff82\001\002\000\004\047\u019d" +
    "\001\002\000\012\045\330\050\333\060\331\072\332\001" +
    "\002\000\012\044\uff85\053\uff85\061\uff85\062\uff85\001\002" +
    "\000\004\047\u01a0\001\002\000\004\050\050\001\002\000" +
    "\012\044\uff8a\053\uff8a\061\uff8a\062\uff8a\001\002\000\006" +
    "\061\u01a3\062\u01a5\001\002\000\030\012\uff7f\013\uff7f\017" +
    "\uff7f\020\uff7f\021\uff7f\022\uff7f\023\uff7f\025\uff7f\040\uff7f" +
    "\043\uff7f\063\uff7f\001\002\000\030\012\u0173\013\u017e\017" +
    "\u017d\020\u017f\021\u017a\022\u0177\023\u0174\025\u017c\040\u0176" +
    "\043\u0179\063\u017b\001\002\000\030\012\uff80\013\uff80\017" +
    "\uff80\020\uff80\021\uff80\022\uff80\023\uff80\025\uff80\040\uff80" +
    "\043\uff80\063\uff80\001\002\000\010\044\uff8d\061\uff8d\062" +
    "\uff8d\001\002\000\006\002\uffff\005\uffff\001\002\000\010" +
    "\007\011\010\012\057\010\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01a7\000\010\002\003\003\004\012\005\001\001\000" +
    "\002\001\001\000\004\012\u01a6\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\016\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\023\006\026\001\001\000\004\006\135\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\033\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\007\040\010\036\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\043" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\043" +
    "\046\044\050\045\053\046\052\047\051\056\054\001\001" +
    "\000\012\044\132\045\053\046\052\047\051\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\046" +
    "\056\047\051\001\001\000\002\001\001\000\004\047\060" +
    "\001\001\000\002\001\001\000\012\050\066\051\065\052" +
    "\064\053\063\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\062\107\001" +
    "\001\000\012\044\103\045\053\046\052\047\051\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\053\074\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\052\077\053\063\001\001\000\002\001\001\000" +
    "\006\052\101\053\063\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\045\106\046\052\047" +
    "\051\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\050\110\051\065\052\064\053\063\001\001\000\002\001" +
    "\001\000\010\051\112\052\064\053\063\001\001\000\002" +
    "\001\001\000\010\051\114\052\064\053\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\057\122\001\001\000\006\054\125\055" +
    "\126\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\055" +
    "\131\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\013\141\014\140\021\143\024\137\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\014\u0150\021" +
    "\143\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\033\u011a\034\u0107\001\001\000\010\015\267\036\262\037" +
    "\260\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\025\151\026\152\001\001\000\004\026\226\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\027\233" +
    "\030\234\001\001\000\004\030\252\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\035\276\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\016\303\017" +
    "\305\001\001\000\004\017\363\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\043\315\044\050\045\053\046\052\047" +
    "\051\056\054\001\001\000\012\044\132\045\053\046\052" +
    "\047\051\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\043\322\044\050\045\053\046\052" +
    "\047\051\056\054\001\001\000\012\044\132\045\053\046" +
    "\052\047\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\333\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\351\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\043\356" +
    "\044\050\045\053\046\052\047\051\056\054\001\001\000" +
    "\012\044\132\045\053\046\052\047\051\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\037\371\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\035\276\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\033\u0104" +
    "\034\u0107\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\034\u0113\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\035\u010f\001\001\000\002\001\001\000" +
    "\016\043\u0111\044\050\045\053\046\052\047\051\056\054" +
    "\001\001\000\012\044\132\045\053\046\052\047\051\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\u0117\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\034\u0113" +
    "\001\001\000\002\001\001\000\004\035\u010f\001\001\000" +
    "\002\001\001\000\006\022\u0121\023\u011f\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\023\u0122\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\043\u012d\044\050\045\053\046\052\047\051\056" +
    "\054\001\001\000\012\044\132\045\053\046\052\047\051" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\u0132\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\u0137\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\043\u0141\044\050\045\053\046\052\047\051\056" +
    "\054\001\001\000\012\044\132\045\053\046\052\047\051" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\043\u0146\044\050\045\053\046\052\047\051" +
    "\056\054\001\001\000\012\044\132\045\053\046\052\047" +
    "\051\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\u014b\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\060\u015b\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\061\u0163\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\031\u0168\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\032\u016e\001\001\000\002\001\001" +
    "\000\006\040\u0177\041\u0174\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\040\u01a1\041\u0174\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\u0181\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\u0184\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\u0187\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\u018a\001\001\000\002" +
    "\001\001\000\004\041\u018c\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\043\u0190\044\050" +
    "\045\053\046\052\047\051\056\054\001\001\000\012\044" +
    "\132\045\053\046\052\047\051\001\001\000\002\001\001" +
    "\000\016\043\u0193\044\050\045\053\046\052\047\051\056" +
    "\054\001\001\000\012\044\132\045\053\046\052\047\051" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\u0197\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\043\u019a\044\050\045\053\046\052\047\051\056\054\001" +
    "\001\000\012\044\132\045\053\046\052\047\051\001\001" +
    "\000\002\001\001\000\004\020\u019d\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\043\u01a0\044\050\045\053" +
    "\046\052\047\051\056\054\001\001\000\012\044\132\045" +
    "\053\046\052\047\051\001\001\000\004\042\u01a3\001\001" +
    "\000\002\001\001\000\004\041\u01a5\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico_compilador$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico_compilador$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico_compilador$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /**Metodo al que se llama automáticamente ante algún error sintactico.*/
    public void syntax_error(Symbol s){
		System.out.println("Error en la Línea " + (s.right+1) +" Columna "+s.left+ ". Identificador "
        +s.value + " no reconocido.");
    }

    /**Metodo al que se llama en el momento en que ya no es posible una recuperación de
    errores.*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
		System.out.println("Error en la Línea " + (s.right+1)+ "Columna "+s.left+". Identificador " +
        s.value + " no reconocido.");
    }

    private Tabla_Hash_compilador Hash = new Tabla_Hash_compilador();


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintactico_compilador$actions {



		

  private final AnalizadorSintactico_compilador parser;

  /** Constructor */
  CUP$AnalizadorSintactico_compilador$actions(AnalizadorSintactico_compilador parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico_compilador$do_action(
    int                        CUP$AnalizadorSintactico_compilador$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico_compilador$parser,
    java.util.Stack            CUP$AnalizadorSintactico_compilador$stack,
    int                        CUP$AnalizadorSintactico_compilador$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico_compilador$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico_compilador$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // OL ::= AND 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("OL",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // OL ::= OR 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("OL",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // COMPARAP ::= tamano igual igual EQ 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("COMPARAP",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // COMPARAP ::= cantidad igual igual EQ 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("COMPARAP",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // COMPARAP ::= sucursal igual igual CONSM 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("COMPARAP",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // COMPARAP ::= codigo igual igual CONSM 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("COMPARAP",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // COMPARAP ::= direccion igual igual CONSM 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("COMPARAP",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // COMPARAP ::= email igual igual CONSM 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("COMPARAP",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // COMPARAP ::= telefono igual igual EQ 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("COMPARAP",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // COMPARAP ::= apellido igual igual CONSM 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("COMPARAP",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // COMPARAP ::= nombre igual igual CONSM 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("COMPARAP",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // COMPARAP ::= id igual igual EQ 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("COMPARAP",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // COMPARAP ::= NOT parentesisi COMPARAP parentesisf 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("COMPARAP",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // COMPARA ::= COMPARAP 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("COMPARA",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // COMPARA ::= donde COMPARA OL COMPARAP 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("COMPARA",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // COMPARA ::= 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("COMPARA",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // CONSULTAS ::= producto 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONSULTAS",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // CONSULTAS ::= tienda 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONSULTAS",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // CONSULTAS ::= usuario 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONSULTAS",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // CONSULTA ::= extraer de CONSULTAS COMPARA pyc 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONSULTA",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // LOGINP ::= DI password DI identificador DI password DF 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("LOGINP",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // LOGINP ::= DI id DI numero DI id DF 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("LOGINP",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // LOGIN ::= LOGINP 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("LOGIN",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // LOGIN ::= LOGIN LOGINP 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("LOGIN",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // REGISUSUP ::= DI direccion DI cadena DI direccion DF 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("REGISUSUP",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // REGISUSUP ::= DI email DI correo DI email DF 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("REGISUSUP",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // REGISUSUP ::= DI telefono DI numero DI telefono DF 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("REGISUSUP",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // REGISUSUP ::= DI password DI identificador DI password DF 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("REGISUSUP",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // REGISUSUP ::= DI apellido DI cadena DI apellido DF 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("REGISUSUP",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // REGISUSUP ::= DI nombre DI cadena DI nombre DF 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("REGISUSUP",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // REGISUSUP ::= DI id DI numero DI id DF 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("REGISUSUP",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // REGISUSU ::= REGISUSUP 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("REGISUSU",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // REGISUSU ::= REGISUSU REGISUSUP 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("REGISUSU",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // USUARIO ::= DI iniciousuario DI LOGIN DI iniciousuario DF 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("USUARIO",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // USUARIO ::= DI crearusuario DI REGISUSU DI crearusuario DF 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("USUARIO",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ACCION ::= ELIMINACION 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("ACCION",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ACCION ::= MODIFICACION 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("ACCION",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ACCIONESPRODUP ::= cantidad igual EQ 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("ACCIONESPRODUP",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ACCIONESPRODUP ::= color igual CONSM 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("ACCIONESPRODUP",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ACCIONESPRODUP ::= nombre igual cadena 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("ACCIONESPRODUP",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ACCIONESPRODUP ::= sucursal igual numero 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("ACCIONESPRODUP",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ACCIONESPRODUP ::= codigo igual numero 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("ACCIONESPRODUP",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ACCIONESPRODUP ::= tipo igual ACCION 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("ACCIONESPRODUP",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ACCIONESPRODU ::= ACCIONESPRODUP 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("ACCIONESPRODU",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ACCIONESPRODU ::= ACCIONESPRODU ACCIONESPRODUP 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("ACCIONESPRODU",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // REGISPRODUP ::= DI imagen DI identificador DI imagen DF 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("REGISPRODUP",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // REGISPRODUP ::= DI color DI CONSM DI color DF 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("REGISPRODUP",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // REGISPRODUP ::= DI tamano DI EQ DI tamano DF 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("REGISPRODUP",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // REGISPRODUP ::= DI marca DI CONSM DI marca DF 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("REGISPRODUP",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // REGISPRODUP ::= DI cantidad DI EQ DI cantidad DF 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("REGISPRODUP",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // REGISPRODUP ::= DI nombre DI CONSM DI nombre DF 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("REGISPRODUP",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // REGISPRODUP ::= DI codigo DI EQ DI codigo DF 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("REGISPRODUP",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // REGISPRODU ::= REGISPRODUP 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("REGISPRODU",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // REGISPRODU ::= REGISPRODU REGISPRODUP 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("REGISPRODU",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // PRODUCTO ::= DI tienda id igual numero DI ACCIONESPRODU DI tienda DF 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("PRODUCTO",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // PRODUCTO ::= DI producto ACCIONESPRODU DF 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("PRODUCTO",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // PRODUCTO ::= DI producto tipo igual CREACION DI REGISPRODU DI DF 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("PRODUCTO",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // CONSM ::= corchetei identificador coma identificador corchetef 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONSM",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // CONSM ::= avacio 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONSM",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // CONSM ::= numero 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONSM",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // CONSM ::= cadena 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONSM",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ACCIONESTIENDAP ::= telefono igual numero 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("ACCIONESTIENDAP",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ACCIONESTIENDAP ::= direccion igual cadena 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("ACCIONESTIENDAP",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ACCIONESTIENDAP ::= nombre igual cadena 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("ACCIONESTIENDAP",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ACCIONESTIENDAP ::= propietario igual numero 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("ACCIONESTIENDAP",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ACCIONESTIENDAP ::= codigo igual numero 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("ACCIONESTIENDAP",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ACCIONESTIENDAP ::= tipo igual ACCION 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("ACCIONESTIENDAP",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ACCIONESTIENDA ::= ACCIONESTIENDAP 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("ACCIONESTIENDA",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ACCIONESTIENDA ::= ACCIONESTIENDA coma ACCIONESTIENDAP 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("ACCIONESTIENDA",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CONTREGISTIENDAP ::= DI imagen DI identificador DI imagen DF 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONTREGISTIENDAP",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CONTREGISTIENDAP ::= DI telefono DI EQ DI telefono DF 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONTREGISTIENDAP",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CONTREGISTIENDAP ::= DI direccion DI CONSM DI direccion DF 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONTREGISTIENDAP",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CONTREGISTIENDAP ::= DI nombre DI CONSM DI nombre DF 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONTREGISTIENDAP",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CONTREGISTIENDAP ::= DI propietario DI EQ DI propietario DF 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONTREGISTIENDAP",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CONTREGISTIENDAP ::= DI codigo DI EQ DI codigo DF 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONTREGISTIENDAP",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CONTREGISTIENDA ::= CONTREGISTIENDAP 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONTREGISTIENDA",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CONTREGISTIENDA ::= CONTREGISTIENDA CONTREGISTIENDAP 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONTREGISTIENDA",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // TIENDA ::= ACCIONESTIENDA 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("TIENDA",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // TIENDA ::= tipo igual CREACION DI CONTREGISTIENDA DI tienda 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("TIENDA",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // PETICIONP ::= PRODUCTO 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("PETICIONP",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // PETICIONP ::= DI tienda TIENDA DF 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("PETICIONP",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // PETICION ::= PETICIONP 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("PETICION",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // PETICION ::= PETICION PETICIONP 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("PETICION",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CONTGETP ::= sucursal igual numero 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONTGETP",47, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CONTGETP ::= 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONTGETP",47, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CONTGET ::= cadena propietario igual numero CONTGETP 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONTGET",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // PETICIONES ::= DI request DI USUARIO DI request DF 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("PETICIONES",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // PETICIONES ::= DI get DI tipo igual CONTGET DI get DF 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("PETICIONES",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // PETICIONES ::= DI consulta DI CONSULTA DI consulta DF 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("PETICIONES",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // PETICIONES ::= DI request DI PETICION DI request DF 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("PETICIONES",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // VALOR ::= cadena 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("VALOR",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // VALOR ::= numero 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("VALOR",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXPREG ::= identificador 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("EXPREG",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXPREG ::= numero 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("EXPREG",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EXPREG ::= parentesisi EQP parentesisf 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("EXPREG",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EXPREF ::= EXPREG 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("EXPREF",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EXPREF ::= llavesi EXPREG llavesf 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("EXPREF",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EXPREE ::= EXPREF 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("EXPREE",39, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EXPREE ::= raiz corchetei EXPREF coma EXPREF corchetef 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("EXPREE",39, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EXPRED ::= EXPREE 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("EXPRED",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EXPRED ::= potencia corchetei EXPREE coma EXPREE corchetef 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("EXPRED",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EXPREC ::= EXPREC division EXPRED NT$0 EXPRED 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).value;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("EXPREC",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$0 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("NT$0",48, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EXPREB ::= EXPREC 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("EXPREB",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // EXPREB ::= EXPREB multiplicacion EXPREC 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("EXPREB",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // EXPREA ::= EXPREB 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("EXPREA",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // EXPREA ::= EXPREA resta EXPREB 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("EXPREA",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // EQP ::= EXPREA 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("EQP",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // EQP ::= EQP suma EXPREA 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("EQP",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // PARAMSNP ::= numero 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("PARAMSNP",43, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // PARAMSN ::= PARAMSNP 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("PARAMSN",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // PARAMSN ::= PARAMSN coma PARAMSNP 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("PARAMSN",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CONTMATEF ::= parentesisi PARAMSN parentesisf 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONTMATEF",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CONTMATEF ::= 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONTMATEF",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // MATEF ::= corchetei identificador coma identificador CONTMATEF corchetef 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("MATEF",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // EQ ::= MATEF 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("EQ",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // EQ ::= EQP 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("EQ",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // EQ ::= EQ EQP 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("EQ",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // PARAMSP ::= identificador 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("PARAMSP",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // PARAMS ::= PARAMSP 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("PARAMS",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // PARAMS ::= PARAMS coma PARAMSP 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("PARAMS",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CONTMATEP ::= constante identificador igual VALOR pyc 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONTMATEP",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CONTMATEP ::= identificador parentesisi PARAMS parentesisf igual llavesi EQ llavesf pyc 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONTMATEP",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CONTMATE ::= CONTMATEP 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONTMATE",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CONTMATE ::= CONTMATE CONTMATEP 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONTMATE",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // MATE ::= cadena DI CONTMATE 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("MATE",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // REQUEST ::= DI mate nombre igual MATE DI mate DF 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("REQUEST",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // REQUEST ::= PETICIONES 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("REQUEST",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // REQUEST ::= REQUEST PETICIONES 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("REQUEST",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIA ::= REQUEST 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("INICIA",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico_compilador$parser.done_parsing();
          return CUP$AnalizadorSintactico_compilador$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

