
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Apr 14 01:42:00 CST 2016
//----------------------------------------------------

package BackEnd.Analizador.Compilador;

import java_cup.runtime.*;
import BackEnd.DAO.Objetos.*;
import BackEnd.DAO.Compilador.*;
import BackEnd.DAO.Hash.Tabla_Hash_compilador;
import java.util.ArrayList;
import BackEnd.Conexion.Enlace_Envio;
import static compi1.proyecto1_server.pkg201403775.Compi1Proyecto1_Server201403775.hash;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Apr 14 01:42:00 CST 2016
  */
public class AnalizadorSintactico_compilador extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintactico_compilador() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico_compilador(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico_compilador(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\215\000\002\002\004\000\002\002\003\000\002\004" +
    "\004\000\002\004\003\000\002\004\012\000\002\006\005" +
    "\000\002\010\004\000\002\010\003\000\002\007\013\000" +
    "\002\007\007\000\002\007\007\000\002\024\005\000\002" +
    "\024\003\000\002\040\002\000\002\040\003\000\002\054" +
    "\003\000\002\054\003\000\002\042\010\000\002\027\005" +
    "\000\002\025\005\000\002\025\003\000\002\026\002\000" +
    "\002\026\003\000\002\055\005\000\002\055\003\000\002" +
    "\056\005\000\002\056\003\000\002\057\005\000\002\057" +
    "\003\000\002\060\005\000\002\060\003\000\002\061\010" +
    "\000\002\061\003\000\002\062\010\000\002\062\003\000" +
    "\002\063\005\000\002\063\003\000\002\064\005\000\002" +
    "\064\003\000\002\064\003\000\002\011\011\000\002\011" +
    "\011\000\002\011\011\000\002\011\011\000\002\011\004" +
    "\000\002\011\004\000\002\035\010\000\002\005\007\000" +
    "\002\036\002\000\002\036\005\000\002\012\004\000\002" +
    "\012\003\000\002\013\005\000\002\013\003\000\002\014" +
    "\012\000\002\014\004\000\002\052\004\000\002\052\003" +
    "\000\002\053\011\000\002\053\011\000\002\053\011\000" +
    "\002\053\011\000\002\053\011\000\002\053\011\000\002" +
    "\053\004\000\002\053\004\000\002\050\005\000\002\050" +
    "\003\000\002\051\005\000\002\051\005\000\002\051\005" +
    "\000\002\051\005\000\002\051\005\000\002\051\005\000" +
    "\002\037\003\000\002\037\003\000\002\037\003\000\002" +
    "\037\007\000\002\003\013\000\002\003\006\000\002\003" +
    "\014\000\002\015\004\000\002\015\003\000\002\016\006" +
    "\000\002\046\004\000\002\046\003\000\002\047\011\000" +
    "\002\047\011\000\002\047\011\000\002\047\011\000\002" +
    "\047\011\000\002\047\011\000\002\047\011\000\002\044" +
    "\004\000\002\044\003\000\002\045\005\000\002\045\005" +
    "\000\002\045\005\000\002\045\005\000\002\045\005\000" +
    "\002\045\005\000\002\041\003\000\002\041\003\000\002" +
    "\017\011\000\002\017\011\000\002\020\004\000\002\020" +
    "\003\000\002\021\011\000\002\021\011\000\002\021\011" +
    "\000\002\021\011\000\002\021\011\000\002\021\011\000" +
    "\002\021\011\000\002\022\004\000\002\022\003\000\002" +
    "\023\011\000\002\023\011\000\002\030\007\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\032\002" +
    "\000\002\032\004\000\002\033\005\000\002\033\003\000" +
    "\002\034\006\000\002\034\006\000\002\034\006\000\002" +
    "\034\006\000\002\034\006\000\002\034\006\000\002\034" +
    "\006\000\002\034\006\000\002\034\006\000\002\034\006" +
    "\000\002\034\006\000\002\043\003\000\002\043\003\000" +
    "\002\043\004\000\002\043\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01b6\000\006\003\007\036\010\001\002\000\004\002" +
    "\u01b8\001\002\000\010\002\000\003\007\036\u01b7\001\002" +
    "\000\010\002\ufffe\003\ufffe\036\ufffe\001\002\000\006\036" +
    "\u01b4\037\u01b5\001\002\000\010\041\012\072\013\073\011" +
    "\001\002\000\004\036\u0171\001\002\000\004\036\135\001" +
    "\002\000\004\050\014\001\002\000\004\063\015\001\002" +
    "\000\004\016\016\001\002\000\004\036\023\001\002\000" +
    "\004\036\020\001\002\000\004\072\021\001\002\000\004" +
    "\037\022\001\002\000\010\002\ufffd\003\ufffd\036\ufffd\001" +
    "\002\000\006\020\025\035\027\001\002\000\010\020\025" +
    "\035\027\036\ufffc\001\002\000\004\066\036\001\002\000" +
    "\010\020\ufffa\035\ufffa\036\ufffa\001\002\000\004\020\030" +
    "\001\002\000\004\063\031\001\002\000\006\016\033\017" +
    "\032\001\002\000\004\004\035\001\002\000\004\004\034" +
    "\001\002\000\010\020\ufff7\035\ufff7\036\ufff7\001\002\000" +
    "\010\020\ufff8\035\ufff8\036\ufff8\001\002\000\010\020\037" +
    "\062\ufff4\067\ufff4\001\002\000\006\062\ufff3\067\ufff3\001" +
    "\002\000\006\062\ufff5\067\ufff5\001\002\000\006\062\042" +
    "\067\043\001\002\000\010\020\037\062\ufff4\067\ufff4\001" +
    "\002\000\004\063\044\001\002\000\004\070\045\001\002" +
    "\000\020\017\064\020\065\021\046\022\062\064\052\066" +
    "\057\070\066\001\002\000\004\064\126\001\002\000\052" +
    "\003\uffdd\004\uffdd\005\uffdd\006\uffdd\011\uffdd\013\uffdd\023" +
    "\uffdd\024\uffdd\025\uffdd\026\uffdd\036\uffdd\037\uffdd\044\uffdd" +
    "\050\uffdd\056\uffdd\061\uffdd\062\uffdd\065\uffdd\067\uffdd\071" +
    "\uffdd\001\002\000\052\003\uffdf\004\uffdf\005\uffdf\006\uffdf" +
    "\011\uffdf\013\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\036" +
    "\uffdf\037\uffdf\044\uffdf\050\uffdf\056\uffdf\061\uffdf\062\uffdf" +
    "\065\uffdf\067\uffdf\071\uffdf\001\002\000\046\003\uffe1\004" +
    "\uffe1\005\uffe1\006\uffe1\011\uffe1\013\uffe1\023\uffe1\024\uffe1" +
    "\025\uffe1\026\uffe1\036\uffe1\037\uffe1\044\uffe1\050\uffe1\056" +
    "\uffe1\061\uffe1\067\uffe1\071\uffe1\001\002\000\004\020\112" +
    "\001\002\000\046\003\uffe3\004\uffe3\005\uffe3\006\uffe3\011" +
    "\uffe3\013\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3\036\uffe3" +
    "\037\uffe3\044\uffe3\050\uffe3\056\uffe3\061\uffe3\067\uffe3\071" +
    "\uffe3\001\002\000\040\003\ufff2\004\ufff2\005\ufff2\006\ufff2" +
    "\011\ufff2\013\ufff2\025\107\036\ufff2\037\ufff2\044\ufff2\050" +
    "\ufff2\056\ufff2\061\ufff2\067\ufff2\071\ufff2\001\002\000\046" +
    "\003\uffe5\004\uffe5\005\uffe5\006\uffe5\011\uffe5\013\uffe5\023" +
    "\uffe5\024\104\025\uffe5\026\uffe5\036\uffe5\037\uffe5\044\uffe5" +
    "\050\uffe5\056\uffe5\061\uffe5\067\uffe5\071\uffe5\001\002\000" +
    "\044\003\uffe7\004\uffe7\005\uffe7\006\uffe7\011\uffe7\013\uffe7" +
    "\023\102\025\uffe7\026\uffe7\036\uffe7\037\uffe7\044\uffe7\050" +
    "\uffe7\056\uffe7\061\uffe7\067\uffe7\071\uffe7\001\002\000\016" +
    "\017\064\020\065\021\046\022\062\066\057\070\066\001" +
    "\002\000\042\003\uffe9\004\uffe9\005\uffe9\006\uffe9\011\uffe9" +
    "\013\uffe9\025\uffe9\026\100\036\uffe9\037\uffe9\044\uffe9\050" +
    "\uffe9\056\uffe9\061\uffe9\067\uffe9\071\uffe9\001\002\000\004" +
    "\071\076\001\002\000\004\064\071\001\002\000\036\003" +
    "\ufff1\004\ufff1\005\ufff1\006\ufff1\011\ufff1\013\ufff1\036\ufff1" +
    "\037\ufff1\044\ufff1\050\ufff1\056\ufff1\061\ufff1\067\ufff1\071" +
    "\ufff1\001\002\000\052\003\uffdb\004\uffdb\005\uffdb\006\uffdb" +
    "\011\uffdb\013\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb\036" +
    "\uffdb\037\uffdb\044\uffdb\050\uffdb\056\uffdb\061\uffdb\062\uffdb" +
    "\065\uffdb\067\uffdb\071\uffdb\001\002\000\052\003\uffda\004" +
    "\uffda\005\uffda\006\uffda\011\uffda\013\uffda\023\uffda\024\uffda" +
    "\025\uffda\026\uffda\036\uffda\037\uffda\044\uffda\050\uffda\056" +
    "\uffda\061\uffda\062\uffda\065\uffda\067\uffda\071\uffda\001\002" +
    "\000\010\017\064\020\065\066\057\001\002\000\004\071" +
    "\070\001\002\000\052\003\uffde\004\uffde\005\uffde\006\uffde" +
    "\011\uffde\013\uffde\023\uffde\024\uffde\025\uffde\026\uffde\036" +
    "\uffde\037\uffde\044\uffde\050\uffde\056\uffde\061\uffde\062\uffde" +
    "\065\uffde\067\uffde\071\uffde\001\002\000\012\017\064\020" +
    "\065\066\057\070\066\001\002\000\004\062\073\001\002" +
    "\000\012\017\064\020\065\066\057\070\066\001\002\000" +
    "\004\065\075\001\002\000\052\003\uffe0\004\uffe0\005\uffe0" +
    "\006\uffe0\011\uffe0\013\uffe0\023\uffe0\024\uffe0\025\uffe0\026" +
    "\uffe0\036\uffe0\037\uffe0\044\uffe0\050\uffe0\056\uffe0\061\uffe0" +
    "\062\uffe0\065\uffe0\067\uffe0\071\uffe0\001\002\000\004\004" +
    "\077\001\002\000\010\020\ufff9\035\ufff9\036\ufff9\001\002" +
    "\000\016\017\064\020\065\021\046\022\062\066\057\070" +
    "\066\001\002\000\044\003\uffe8\004\uffe8\005\uffe8\006\uffe8" +
    "\011\uffe8\013\uffe8\023\102\025\uffe8\026\uffe8\036\uffe8\037" +
    "\uffe8\044\uffe8\050\uffe8\056\uffe8\061\uffe8\067\uffe8\071\uffe8" +
    "\001\002\000\016\017\064\020\065\021\046\022\062\066" +
    "\057\070\066\001\002\000\046\003\uffe6\004\uffe6\005\uffe6" +
    "\006\uffe6\011\uffe6\013\uffe6\023\uffe6\024\104\025\uffe6\026" +
    "\uffe6\036\uffe6\037\uffe6\044\uffe6\050\uffe6\056\uffe6\061\uffe6" +
    "\067\uffe6\071\uffe6\001\002\000\016\017\064\020\065\021" +
    "\046\022\062\066\057\070\066\001\002\000\046\003\uffe4" +
    "\004\uffe4\005\uffe4\006\uffe4\011\uffe4\013\uffe4\023\uffe4\024" +
    "\uffe4\025\uffe4\026\uffe4\036\uffe4\037\uffe4\044\uffe4\050\uffe4" +
    "\056\uffe4\061\uffe4\067\uffe4\071\uffe4\001\002\000\006\025" +
    "\107\067\110\001\002\000\016\017\064\020\065\021\046" +
    "\022\062\066\057\070\066\001\002\000\052\003\uffdc\004" +
    "\uffdc\005\uffdc\006\uffdc\011\uffdc\013\uffdc\023\uffdc\024\uffdc" +
    "\025\uffdc\026\uffdc\036\uffdc\037\uffdc\044\uffdc\050\uffdc\056" +
    "\uffdc\061\uffdc\062\uffdc\065\uffdc\067\uffdc\071\uffdc\001\002" +
    "\000\042\003\uffea\004\uffea\005\uffea\006\uffea\011\uffea\013" +
    "\uffea\025\uffea\026\100\036\uffea\037\uffea\044\uffea\050\uffea" +
    "\056\uffea\061\uffea\067\uffea\071\uffea\001\002\000\004\062" +
    "\113\001\002\000\004\020\114\001\002\000\004\066\115" +
    "\001\002\000\010\017\120\062\uffec\067\uffec\001\002\000" +
    "\004\065\117\001\002\000\036\003\ufff0\004\ufff0\005\ufff0" +
    "\006\ufff0\011\ufff0\013\ufff0\036\ufff0\037\ufff0\044\ufff0\050" +
    "\ufff0\056\ufff0\061\ufff0\067\ufff0\071\ufff0\001\002\000\006" +
    "\062\uffeb\067\uffeb\001\002\000\006\062\123\067\124\001" +
    "\002\000\006\062\uffed\067\uffed\001\002\000\010\017\120" +
    "\062\uffec\067\uffec\001\002\000\004\065\uffef\001\002\000" +
    "\006\062\uffee\067\uffee\001\002\000\014\017\064\020\065" +
    "\022\062\066\057\070\066\001\002\000\004\062\130\001" +
    "\002\000\014\017\064\020\065\022\062\066\057\070\066" +
    "\001\002\000\004\065\132\001\002\000\046\003\uffe2\004" +
    "\uffe2\005\uffe2\006\uffe2\011\uffe2\013\uffe2\023\uffe2\024\uffe2" +
    "\025\uffe2\026\uffe2\036\uffe2\037\uffe2\044\uffe2\050\uffe2\056" +
    "\uffe2\061\uffe2\067\uffe2\071\uffe2\001\002\000\006\062\ufff6" +
    "\067\ufff6\001\002\000\010\020\ufffb\035\ufffb\036\ufffb\001" +
    "\002\000\004\036\142\001\002\000\004\036\u016e\001\002" +
    "\000\004\036\u016b\001\002\000\004\036\uffce\001\002\000" +
    "\004\036\u0168\001\002\000\014\010\144\040\145\042\147" +
    "\047\150\055\146\001\002\000\004\036\uffcc\001\002\000" +
    "\016\011\u010f\013\u010c\044\u010b\050\u0110\056\u0111\061\u0132" +
    "\001\002\000\004\061\u0125\001\002\000\020\043\257\050" +
    "\267\052\265\054\260\056\266\057\262\061\264\001\002" +
    "\000\004\036\233\001\002\000\004\036\151\001\002\000" +
    "\004\036\154\001\002\000\004\036\230\001\002\000\004" +
    "\036\uff97\001\002\000\020\043\163\045\156\050\162\051" +
    "\161\052\155\053\157\054\160\001\002\000\004\036\222" +
    "\001\002\000\004\036\215\001\002\000\004\036\210\001" +
    "\002\000\004\036\203\001\002\000\004\036\176\001\002" +
    "\000\004\036\171\001\002\000\004\036\164\001\002\000" +
    "\004\017\165\001\002\000\004\036\166\001\002\000\004" +
    "\043\167\001\002\000\004\037\170\001\002\000\004\036" +
    "\uff96\001\002\000\004\016\172\001\002\000\004\036\173" +
    "\001\002\000\004\050\174\001\002\000\004\037\175\001" +
    "\002\000\004\036\uff95\001\002\000\004\016\177\001\002" +
    "\000\004\036\200\001\002\000\004\051\201\001\002\000" +
    "\004\037\202\001\002\000\004\036\uff94\001\002\000\004" +
    "\016\204\001\002\000\004\036\205\001\002\000\004\054" +
    "\206\001\002\000\004\037\207\001\002\000\004\036\uff90" +
    "\001\002\000\004\015\211\001\002\000\004\036\212\001" +
    "\002\000\004\053\213\001\002\000\004\037\214\001\002" +
    "\000\004\036\uff91\001\002\000\004\020\216\001\002\000" +
    "\004\036\217\001\002\000\004\045\220\001\002\000\004" +
    "\037\221\001\002\000\004\036\uff93\001\002\000\004\017" +
    "\223\001\002\000\004\036\224\001\002\000\004\052\225" +
    "\001\002\000\004\037\226\001\002\000\004\036\uff92\001" +
    "\002\000\004\036\uff98\001\002\000\022\043\163\045\156" +
    "\047\231\050\162\051\161\052\155\053\157\054\160\001" +
    "\002\000\004\037\232\001\002\000\004\036\uff9a\001\002" +
    "\000\004\036\236\001\002\000\004\036\254\001\002\000" +
    "\004\036\uff8e\001\002\000\006\043\240\045\237\001\002" +
    "\000\004\036\246\001\002\000\004\036\241\001\002\000" +
    "\004\017\242\001\002\000\004\036\243\001\002\000\004" +
    "\043\244\001\002\000\004\037\245\001\002\000\004\036" +
    "\uff8d\001\002\000\004\020\247\001\002\000\004\036\250" +
    "\001\002\000\004\045\251\001\002\000\004\037\252\001" +
    "\002\000\004\036\uff8c\001\002\000\004\036\uff8f\001\002" +
    "\000\010\042\255\043\240\045\237\001\002\000\004\037" +
    "\256\001\002\000\004\036\uff99\001\002\000\004\063\u0104" +
    "\001\002\000\004\063\u0102\001\002\000\006\037\uffbe\062" +
    "\uffbe\001\002\000\004\063\u0100\001\002\000\006\037\374" +
    "\062\373\001\002\000\004\063\277\001\002\000\004\063" +
    "\275\001\002\000\004\063\273\001\002\000\004\063\271" +
    "\001\002\000\004\036\uffcd\001\002\000\004\016\272\001" +
    "\002\000\006\037\uffba\062\uffba\001\002\000\004\017\274" +
    "\001\002\000\006\037\uffbc\062\uffbc\001\002\000\004\017" +
    "\276\001\002\000\006\037\uffb8\062\uffb8\001\002\000\010" +
    "\032\302\033\301\034\303\001\002\000\006\037\uffbd\062" +
    "\uffbd\001\002\000\022\011\uff9c\013\uff9c\037\uff9c\044\uff9c" +
    "\050\uff9c\056\uff9c\061\uff9c\062\uff9c\001\002\000\004\036" +
    "\304\001\002\000\022\011\uff9b\013\uff9b\037\uff9b\044\uff9b" +
    "\050\uff9b\056\uff9b\061\uff9b\062\uff9b\001\002\000\006\003" +
    "\305\036\306\001\002\000\006\036\371\037\372\001\002" +
    "\000\016\050\320\052\313\054\314\056\317\057\321\060" +
    "\315\001\002\000\006\003\305\036\311\001\002\000\006" +
    "\003\uffc8\036\uffc8\001\002\000\020\050\320\052\313\054" +
    "\314\055\316\056\317\057\321\060\315\001\002\000\006" +
    "\003\uffc9\036\uffc9\001\002\000\004\036\364\001\002\000" +
    "\004\036\357\001\002\000\004\036\352\001\002\000\004" +
    "\037\351\001\002\000\004\036\344\001\002\000\004\036" +
    "\327\001\002\000\004\036\322\001\002\000\004\017\323" +
    "\001\002\000\004\036\324\001\002\000\004\057\325\001" +
    "\002\000\004\037\326\001\002\000\006\003\uffc6\036\uffc6" +
    "\001\002\000\012\016\332\017\330\064\333\074\331\001" +
    "\002\000\034\003\uffb6\004\uffb6\005\uffb6\006\uffb6\011\uffb6" +
    "\013\uffb6\036\uffb6\037\uffb6\044\uffb6\050\uffb6\056\uffb6\061" +
    "\uffb6\067\uffb6\001\002\000\034\003\uffb5\004\uffb5\005\uffb5" +
    "\006\uffb5\011\uffb5\013\uffb5\036\uffb5\037\uffb5\044\uffb5\050" +
    "\uffb5\056\uffb5\061\uffb5\067\uffb5\001\002\000\034\003\uffb7" +
    "\004\uffb7\005\uffb7\006\uffb7\011\uffb7\013\uffb7\036\uffb7\037" +
    "\uffb7\044\uffb7\050\uffb7\056\uffb7\061\uffb7\067\uffb7\001\002" +
    "\000\004\020\340\001\002\000\004\036\335\001\002\000" +
    "\004\050\336\001\002\000\004\037\337\001\002\000\006" +
    "\003\uffc5\036\uffc5\001\002\000\004\062\341\001\002\000" +
    "\004\020\342\001\002\000\004\065\343\001\002\000\034" +
    "\003\uffb4\004\uffb4\005\uffb4\006\uffb4\011\uffb4\013\uffb4\036" +
    "\uffb4\037\uffb4\044\uffb4\050\uffb4\056\uffb4\061\uffb4\067\uffb4" +
    "\001\002\000\004\017\345\001\002\000\004\036\346\001" +
    "\002\000\004\056\347\001\002\000\004\037\350\001\002" +
    "\000\006\003\uffc7\036\uffc7\001\002\000\004\036\uffcb\001" +
    "\002\000\004\020\353\001\002\000\004\036\354\001\002" +
    "\000\004\060\355\001\002\000\004\037\356\001\002\000" +
    "\006\003\uffc2\036\uffc2\001\002\000\012\016\332\017\330" +
    "\064\333\074\331\001\002\000\004\036\361\001\002\000" +
    "\004\054\362\001\002\000\004\037\363\001\002\000\006" +
    "\003\uffc4\036\uffc4\001\002\000\004\017\365\001\002\000" +
    "\004\036\366\001\002\000\004\052\367\001\002\000\004" +
    "\037\370\001\002\000\006\003\uffc3\036\uffc3\001\002\000" +
    "\006\003\uffc1\036\uffc1\001\002\000\006\003\uffc0\036\uffc0" +
    "\001\002\000\016\050\267\052\265\054\260\056\266\057" +
    "\262\061\375\001\002\000\004\036\uffca\001\002\000\004" +
    "\063\377\001\002\000\006\037\uffbf\062\uffbf\001\002\000" +
    "\006\033\301\034\303\001\002\000\004\017\u0101\001\002" +
    "\000\006\037\uffbb\062\uffbb\001\002\000\004\016\u0103\001" +
    "\002\000\006\037\uffb9\062\uffb9\001\002\000\004\017\u0105" +
    "\001\002\000\004\036\u0106\001\002\000\004\036\u0108\001" +
    "\002\000\004\036\u0121\001\002\000\004\010\u010a\001\002" +
    "\000\004\036\uffaf\001\002\000\016\011\u010f\013\u010c\044" +
    "\u010b\050\u0110\056\u0111\061\u010e\001\002\000\004\063\u011f" +
    "\001\002\000\004\063\u011d\001\002\000\020\011\u010f\013" +
    "\u010c\037\u011c\044\u010b\050\u0110\056\u0111\061\u010e\001\002" +
    "\000\004\063\u0119\001\002\000\004\063\u0117\001\002\000" +
    "\004\063\u0115\001\002\000\004\063\u0113\001\002\000\020" +
    "\011\uffa3\013\uffa3\037\uffa3\044\uffa3\050\uffa3\056\uffa3\061" +
    "\uffa3\001\002\000\004\017\u0114\001\002\000\020\011\uffa1" +
    "\013\uffa1\037\uffa1\044\uffa1\050\uffa1\056\uffa1\061\uffa1\001" +
    "\002\000\004\016\u0116\001\002\000\020\011\uff9f\013\uff9f" +
    "\037\uff9f\044\uff9f\050\uff9f\056\uff9f\061\uff9f\001\002\000" +
    "\020\017\064\020\065\021\046\022\062\064\052\066\057" +
    "\070\066\001\002\000\020\011\uff9d\013\uff9d\037\uff9d\044" +
    "\uff9d\050\uff9d\056\uff9d\061\uff9d\001\002\000\006\033\301" +
    "\034\303\001\002\000\020\011\uffa2\013\uffa2\037\uffa2\044" +
    "\uffa2\050\uffa2\056\uffa2\061\uffa2\001\002\000\020\011\uffa4" +
    "\013\uffa4\037\uffa4\044\uffa4\050\uffa4\056\uffa4\061\uffa4\001" +
    "\002\000\004\036\uffae\001\002\000\012\016\332\017\330" +
    "\064\333\074\331\001\002\000\020\011\uff9e\013\uff9e\037" +
    "\uff9e\044\uff9e\050\uff9e\056\uff9e\061\uff9e\001\002\000\004" +
    "\017\u0120\001\002\000\020\011\uffa0\013\uffa0\037\uffa0\044" +
    "\uffa0\050\uffa0\056\uffa0\061\uffa0\001\002\000\006\010\u010a" +
    "\055\u0123\001\002\000\004\036\uffb0\001\002\000\004\037" +
    "\u0124\001\002\000\004\036\uffb1\001\002\000\004\063\u0126" +
    "\001\002\000\004\016\u0127\001\002\000\004\057\u012a\001" +
    "\002\000\004\037\u0129\001\002\000\004\036\uffd3\001\002" +
    "\000\004\063\u012b\001\002\000\004\017\u012c\001\002\000" +
    "\006\037\uffd1\044\u012d\001\002\000\004\063\u012f\001\002" +
    "\000\004\037\uffd2\001\002\000\004\017\u0130\001\002\000" +
    "\004\037\uffd0\001\002\000\020\011\u010f\013\u010c\037\u0166" +
    "\044\u010b\050\u0110\056\u0111\061\u010e\001\002\000\004\063" +
    "\u0133\001\002\000\010\032\u0134\033\301\034\303\001\002" +
    "\000\004\036\u0135\001\002\000\004\036\u0137\001\002\000" +
    "\004\036\uffac\001\002\000\020\011\u013c\012\u013f\013\u013b" +
    "\014\u013d\050\u0141\056\u0140\060\u013e\001\002\000\004\036" +
    "\u013a\001\002\000\004\036\uffad\001\002\000\022\011\u013c" +
    "\012\u013f\013\u013b\014\u013d\037\u0142\050\u0141\056\u0140\060" +
    "\u013e\001\002\000\004\036\u0161\001\002\000\004\036\u015c" +
    "\001\002\000\004\036\u0157\001\002\000\004\036\u0152\001" +
    "\002\000\004\036\u014d\001\002\000\004\036\u0148\001\002" +
    "\000\004\036\u0143\001\002\000\004\036\uffb3\001\002\000" +
    "\012\016\332\017\330\064\333\074\331\001\002\000\004" +
    "\036\u0145\001\002\000\004\050\u0146\001\002\000\004\037" +
    "\u0147\001\002\000\004\036\uffaa\001\002\000\020\017\064" +
    "\020\065\021\046\022\062\064\052\066\057\070\066\001" +
    "\002\000\004\036\u014a\001\002\000\004\056\u014b\001\002" +
    "\000\004\037\u014c\001\002\000\004\036\uffab\001\002\000" +
    "\012\016\332\017\330\064\333\074\331\001\002\000\004" +
    "\036\u014f\001\002\000\004\012\u0150\001\002\000\004\037" +
    "\u0151\001\002\000\004\036\uffa8\001\002\000\004\020\u0153" +
    "\001\002\000\004\036\u0154\001\002\000\004\060\u0155\001" +
    "\002\000\004\037\u0156\001\002\000\004\036\uffa5\001\002" +
    "\000\020\017\064\020\065\021\046\022\062\064\052\066" +
    "\057\070\066\001\002\000\004\036\u0159\001\002\000\004" +
    "\014\u015a\001\002\000\004\037\u015b\001\002\000\004\036" +
    "\uffa7\001\002\000\020\017\064\020\065\021\046\022\062" +
    "\064\052\066\057\070\066\001\002\000\004\036\u015e\001" +
    "\002\000\004\011\u015f\001\002\000\004\037\u0160\001\002" +
    "\000\004\036\uffa9\001\002\000\012\016\332\017\330\064" +
    "\333\074\331\001\002\000\004\036\u0163\001\002\000\004" +
    "\013\u0164\001\002\000\004\037\u0165\001\002\000\004\036" +
    "\uffa6\001\002\000\004\036\uffb2\001\002\000\004\036\uffcf" +
    "\001\002\000\010\010\144\041\u0169\055\146\001\002\000" +
    "\004\037\u016a\001\002\000\010\002\uffd9\003\uffd9\036\uffd9" +
    "\001\002\000\004\041\u016c\001\002\000\004\037\u016d\001" +
    "\002\000\010\002\uffd6\003\uffd6\036\uffd6\001\002\000\004" +
    "\041\u016f\001\002\000\004\037\u0170\001\002\000\010\002" +
    "\uffd7\003\uffd7\036\uffd7\001\002\000\004\027\u0172\001\002" +
    "\000\004\030\u0177\001\002\000\004\036\u0174\001\002\000" +
    "\004\073\u0175\001\002\000\004\037\u0176\001\002\000\010" +
    "\002\uffd8\003\uffd8\036\uffd8\001\002\000\010\010\u0178\046" +
    "\u017a\055\u017b\001\002\000\006\004\uff88\031\uff88\001\002" +
    "\000\006\004\uff87\031\u017c\001\002\000\006\004\uff8a\031" +
    "\uff8a\001\002\000\006\004\uff89\031\uff89\001\002\000\030" +
    "\007\u0188\011\u0182\014\u0184\043\u017f\044\u018a\050\u0189\051" +
    "\u018b\052\u0185\053\u0183\054\u0180\056\u0186\001\002\000\004" +
    "\004\u017e\001\002\000\004\036\uff8b\001\002\000\004\063" +
    "\u01b1\001\002\000\004\063\u01ae\001\002\000\012\003\u0198" +
    "\004\uff86\005\u0197\006\u019b\001\002\000\004\063\u01ab\001" +
    "\002\000\004\063\u01a8\001\002\000\004\063\u01a5\001\002" +
    "\000\004\063\u01a2\001\002\000\004\063\u019f\001\002\000" +
    "\014\003\uff84\004\uff84\005\uff84\006\uff84\067\uff84\001\002" +
    "\000\004\066\u0195\001\002\000\004\063\u0192\001\002\000" +
    "\004\063\u018f\001\002\000\004\063\u018c\001\002\000\004" +
    "\063\u018d\001\002\000\012\016\332\017\330\064\333\074" +
    "\331\001\002\000\014\003\uff80\004\uff80\005\uff80\006\uff80" +
    "\067\uff80\001\002\000\004\063\u0190\001\002\000\012\016" +
    "\332\017\330\064\333\074\331\001\002\000\014\003\uff7b" +
    "\004\uff7b\005\uff7b\006\uff7b\067\uff7b\001\002\000\004\063" +
    "\u0193\001\002\000\012\016\332\017\330\064\333\074\331" +
    "\001\002\000\014\003\uff81\004\uff81\005\uff81\006\uff81\067" +
    "\uff81\001\002\000\030\007\u0188\011\u0182\014\u0184\043\u017f" +
    "\044\u018a\050\u0189\051\u018b\052\u0185\053\u0183\054\u0180\056" +
    "\u0186\001\002\000\012\003\u0198\005\u0197\006\u019b\067\u019a" +
    "\001\002\000\030\007\uff77\011\uff77\014\uff77\043\uff77\044" +
    "\uff77\050\uff77\051\uff77\052\uff77\053\uff77\054\uff77\056\uff77" +
    "\001\002\000\006\004\u019d\036\u019e\001\002\000\030\007" +
    "\u0188\011\u0182\014\u0184\043\u017f\044\u018a\050\u0189\051\u018b" +
    "\052\u0185\053\u0183\054\u0180\056\u0186\001\002\000\014\003" +
    "\uff83\004\uff83\005\uff83\006\uff83\067\uff83\001\002\000\030" +
    "\007\uff78\011\uff78\014\uff78\043\uff78\044\uff78\050\uff78\051" +
    "\uff78\052\uff78\053\uff78\054\uff78\056\uff78\001\002\000\014" +
    "\003\uff85\004\uff85\005\uff85\006\uff85\067\uff85\001\002\000" +
    "\030\007\uff76\011\uff76\014\uff76\043\uff76\044\uff76\050\uff76" +
    "\051\uff76\052\uff76\053\uff76\054\uff76\056\uff76\001\002\000" +
    "\030\007\uff75\011\uff75\014\uff75\043\uff75\044\uff75\050\uff75" +
    "\051\uff75\052\uff75\053\uff75\054\uff75\056\uff75\001\002\000" +
    "\004\063\u01a0\001\002\000\012\016\332\017\330\064\333" +
    "\074\331\001\002\000\014\003\uff7c\004\uff7c\005\uff7c\006" +
    "\uff7c\067\uff7c\001\002\000\004\063\u01a3\001\002\000\020" +
    "\017\064\020\065\021\046\022\062\064\052\066\057\070" +
    "\066\001\002\000\014\003\uff7f\004\uff7f\005\uff7f\006\uff7f" +
    "\067\uff7f\001\002\000\004\063\u01a6\001\002\000\020\017" +
    "\064\020\065\021\046\022\062\064\052\066\057\070\066" +
    "\001\002\000\014\003\uff79\004\uff79\005\uff79\006\uff79\067" +
    "\uff79\001\002\000\004\063\u01a9\001\002\000\012\016\332" +
    "\017\330\064\333\074\331\001\002\000\014\003\uff7e\004" +
    "\uff7e\005\uff7e\006\uff7e\067\uff7e\001\002\000\004\063\u01ac" +
    "\001\002\000\020\017\064\020\065\021\046\022\062\064" +
    "\052\066\057\070\066\001\002\000\014\003\uff7a\004\uff7a" +
    "\005\uff7a\006\uff7a\067\uff7a\001\002\000\004\063\u01af\001" +
    "\002\000\012\016\332\017\330\064\333\074\331\001\002" +
    "\000\014\003\uff7d\004\uff7d\005\uff7d\006\uff7d\067\uff7d\001" +
    "\002\000\004\063\u01b2\001\002\000\020\017\064\020\065" +
    "\021\046\022\062\064\052\066\057\070\066\001\002\000" +
    "\014\003\uff82\004\uff82\005\uff82\006\uff82\067\uff82\001\002" +
    "\000\010\002\uffd4\003\uffd4\036\uffd4\001\002\000\010\002" +
    "\uffd5\003\uffd5\036\uffd5\001\002\000\010\002\uffff\003\uffff" +
    "\036\uffff\001\002\000\006\041\012\073\011\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01b6\000\010\002\003\004\004\011\005\001\001\000" +
    "\002\001\001\000\004\011\u01b5\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\016\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\007\025\010\023\001\001\000\004\007\133\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\024\040" +
    "\040\037\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\040\132\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\042\062\054\060\055\053\056" +
    "\057\057\055\060\054\061\052\062\050\063\047\064\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\055\105\056\057\057\055\060\054\061\052\062\050" +
    "\063\047\064\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\064\066\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\063\071\064\046\001\001" +
    "\000\002\001\001\000\006\063\073\064\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\057\100\060\054\061\052\062\050\063" +
    "\047\064\046\001\001\000\002\001\001\000\014\060\102" +
    "\061\052\062\050\063\047\064\046\001\001\000\002\001" +
    "\001\000\012\061\104\062\050\063\047\064\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\056\110\057" +
    "\055\060\054\061\052\062\050\063\047\064\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\027\115\001\001\000\006\025\120" +
    "\026\121\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\026\124\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\062\126\063\047\064\046\001\001\000\002\001\001" +
    "\000\010\062\130\063\047\064\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\003\142\012\140\013\137\017\136\035\135\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\003\142\013\u0166\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\044\u0130\045\u0111\001\001\000\002" +
    "\001\001\000\010\014\267\050\262\051\260\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\020\151\021\152" +
    "\001\001\000\004\021\226\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\022\233\023\234\001\001" +
    "\000\004\023\252\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\041\277\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\052\306\053" +
    "\307\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\053\311\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\037\333\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\037\357\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\051\375\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\041\277" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\015\u0106\016\u0108\001\001\000\004\016\u0121\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\044\u010c" +
    "\045\u0111\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\045\u011a\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\042\062\054\u0117\055\053\056\057\057" +
    "\055\060\054\061\052\062\050\063\047\064\046\001\001" +
    "\000\002\001\001\000\004\041\u0119\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\037\u011d" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\u0127\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\036\u012d\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\045\u011a\001\001\000\002\001" +
    "\001\000\004\041\u0119\001\001\000\002\001\001\000\006" +
    "\046\u0137\047\u0135\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\047\u0138\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\037\u0143\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\042\062\054\u0148\055\053\056" +
    "\057\057\055\060\054\061\052\062\050\063\047\064\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\037\u014d\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\042\062\054" +
    "\u0157\055\053\056\057\057\055\060\054\061\052\062\050" +
    "\063\047\064\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\042\062" +
    "\054\u015c\055\053\056\057\057\055\060\054\061\052\062" +
    "\050\063\047\064\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\037" +
    "\u0161\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\030\u0172\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\031\u0178\001\001\000\002\001\001\000\004\032\u017c\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\033\u0180" +
    "\034\u0186\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\043\u0198\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\037\u018d\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\037\u0190\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\037\u0193\001\001" +
    "\000\002\001\001\000\006\033\u0195\034\u0186\001\001\000" +
    "\004\043\u0198\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\034\u019b\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\037\u01a0\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\042\062\054\u01a3\055\053" +
    "\056\057\057\055\060\054\061\052\062\050\063\047\064" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\042\062\054\u01a6\055\053\056\057\057\055\060\054\061" +
    "\052\062\050\063\047\064\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\037\u01a9\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\042\062\054\u01ac\055\053" +
    "\056\057\057\055\060\054\061\052\062\050\063\047\064" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\037\u01af\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\042\062\054\u01b2\055\053\056\057\057\055\060\054" +
    "\061\052\062\050\063\047\064\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico_compilador$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico_compilador$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico_compilador$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    protected final static int _error_sync_size = 8;
    protected int error_sync_size( ) {
        return _error_sync_size; 
    }

    /**Metodo al que se llama automáticamente ante algún error sintactico.*/
    public void syntax_error(Symbol s){
		System.out.println("Error en la Línea " + (s.right+1) +" Columna "+s.left+ ". Identificador "
        +s.value + " no reconocido.");
    }

    /**Metodo al que se llama en el momento en que ya no es posible una recuperación de
    errores.*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
		System.out.println("Error en la Línea " + (s.right+1)+ "Columna "+s.left+". Identificador " +
        s.value + " no reconocido.");
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintactico_compilador$actions {


    Tabla_Hash_compilador hash_compi = new Tabla_Hash_compilador();
    private final Enlace_Envio enlace=new Enlace_Envio();
    StringBuilder reply= new StringBuilder();
    Boolean Respondido = false;
                
        		

  private final AnalizadorSintactico_compilador parser;

  /** Constructor */
  CUP$AnalizadorSintactico_compilador$actions(AnalizadorSintactico_compilador parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico_compilador$do_action(
    int                        CUP$AnalizadorSintactico_compilador$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico_compilador$parser,
    java.util.Stack            CUP$AnalizadorSintactico_compilador$stack,
    int                        CUP$AnalizadorSintactico_compilador$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico_compilador$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico_compilador$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // OL ::= error DI 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).value;
		reply.append(enlace.reply_error("sintactico","identificador no reconocido"+e.toString(),eleft,eright));
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("OL",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // OL ::= error pyc 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).value;
		reply.append(enlace.reply_error("sintactico","identificador no reconocido"+e.toString(),eleft,eright));
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("OL",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // OL ::= AND 
            {
              String RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("OL",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // OL ::= OR 
            {
              String RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("OL",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // COMPARAPP ::= tamano igual igual EQ 
            {
              Query RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("COMPARAPP",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // COMPARAPP ::= cantidad igual igual EQ 
            {
              Query RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("COMPARAPP",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // COMPARAPP ::= sucursal igual igual CONSM 
            {
              Query RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("COMPARAPP",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // COMPARAPP ::= codigo igual igual CONSM 
            {
              Query RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("COMPARAPP",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // COMPARAPP ::= direccion igual igual CONSM 
            {
              Query RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("COMPARAPP",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // COMPARAPP ::= email igual igual CONSM 
            {
              Query RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("COMPARAPP",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // COMPARAPP ::= telefono igual igual EQ 
            {
              Query RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("COMPARAPP",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // COMPARAPP ::= apellido igual igual CONSM 
            {
              Query RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("COMPARAPP",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // COMPARAPP ::= nombre igual igual CONSM 
            {
              Query RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("COMPARAPP",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // COMPARAPP ::= id igual igual EQ 
            {
              Query RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("COMPARAPP",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // COMPARAPP ::= NOT parentesisi COMPARAP parentesisf 
            {
              Query RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("COMPARAPP",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // COMPARAP ::= COMPARAPP 
            {
              Query RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("COMPARAP",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // COMPARAP ::= COMPARAP OL COMPARAPP 
            {
              Query RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("COMPARAP",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // COMPARA ::= donde COMPARAP 
            {
              Query RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("COMPARA",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // COMPARA ::= 
            {
              Query RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("COMPARA",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // CONSULTAS ::= producto 
            {
              Query RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONSULTAS",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // CONSULTAS ::= tienda 
            {
              Query RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONSULTAS",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // CONSULTAS ::= usuario 
            {
              Query RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONSULTAS",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // CONSULTA ::= extraer de CONSULTAS COMPARA pyc 
            {
              Query RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONSULTA",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // LOGINP ::= DI password DI identificador DI password DF 
            {
              Usuario RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).value;
		  
                    RESULT = new Usuario();
                    RESULT.setPassword((String)val);

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("LOGINP",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // LOGINP ::= DI id DI numero DI id DF 
            {
              Usuario RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).value;
		
                    RESULT = new Usuario();
                    RESULT.setId(Integer.parseInt(val));

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("LOGINP",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // LOGIN ::= LOGINP 
            {
              Usuario RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		Usuario val = (Usuario)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                    RESULT = val;

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("LOGIN",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // LOGIN ::= LOGIN LOGINP 
            {
              Usuario RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).right;
		Usuario val1 = (Usuario)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		Usuario val2 = (Usuario)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                    RESULT= new Usuario();
                    if(val1.getId()==0 && val2.getId()!=0){
                        RESULT.setId(val2.getId());
                    }else if(val1.getId()!=0 && val2.getId()==0){
                        RESULT.setId(val1.getId());
                    }else{
                        reply.append(enlace.reply_error("semantico", "Atributos ingresado para login incorrectos", val1left, val2right));
                    }
                    if(val1.getPassword().equals("vacio") && !val2.getPassword().equals("vacio")){
                        RESULT.setPassword(val2.getPassword());
                    }else if(!val1.getPassword().equals("vacio") && val2.getPassword().equals("vacio")){
                        RESULT.setPassword(val1.getPassword());    
                    }else{
                        reply.append(enlace.reply_error("semantico", "Atributos ingresado para login incorrectos", val2left, val2right));
                    }
                    if(RESULT.getId()==0 || RESULT.getPassword()==null){
                        reply.append(enlace.reply_error("semantico", "error en ingreso para logear, Fallo Critico", val1left, val2right));
                    }

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("LOGIN",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // REGISUSUP ::= DI direccion DI cadena DI direccion DF 
            {
              Usuario RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).value;
		
                    RESULT = new Usuario();
                    RESULT.setDirreccion(val.replace("\"",""));

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("REGISUSUP",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // REGISUSUP ::= DI email DI correo DI email DF 
            {
              Usuario RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).value;
		
                    RESULT = new Usuario();
                    RESULT.setEmail(val);

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("REGISUSUP",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // REGISUSUP ::= DI telefono DI numero DI telefono DF 
            {
              Usuario RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).value;
		
                    RESULT = new Usuario();
                    RESULT.setTelefono(Integer.parseInt(val));

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("REGISUSUP",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // REGISUSUP ::= DI password DI identificador DI password DF 
            {
              Usuario RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).value;
		
                    RESULT = new Usuario();
                    RESULT.setPassword(val);

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("REGISUSUP",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // REGISUSUP ::= DI apellido DI cadena DI apellido DF 
            {
              Usuario RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).value;
		
                    RESULT = new Usuario();
                    RESULT.setApellido(val.replace("\"",""));

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("REGISUSUP",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // REGISUSUP ::= DI nombre DI cadena DI nombre DF 
            {
              Usuario RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).value;
		
                    RESULT = new Usuario();
                    RESULT.setNombre(val.replace("\"",""));

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("REGISUSUP",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // REGISUSUP ::= DI id DI numero DI id DF 
            {
              Usuario RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).value;
		
                    RESULT = new Usuario();
                    RESULT.setId(Integer.parseInt(val));

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("REGISUSUP",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // REGISUSU ::= REGISUSUP 
            {
              Usuario RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		Usuario val = (Usuario)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                    RESULT = val;

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("REGISUSU",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // REGISUSU ::= REGISUSU REGISUSUP 
            {
              Usuario RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).right;
		Usuario val1 = (Usuario)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		Usuario val2 = (Usuario)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                    RESULT = val1;
                    if(val2.getId()!=0 && RESULT.getId()==0){
                        RESULT.setId(val2.getId());
                    }else if(val2.getId()!=0 && RESULT.getId()!=0){
                        reply.append(enlace.reply_error("semantico", "Atributo id declarado mas de una vez", val2left, val2right));
                    }
                    if(!val2.getNombre().equals("vacio") && RESULT.getNombre().equals("vacio")){
                        RESULT.setNombre(val2.getNombre());
                    }else if(!val2.getNombre().equals("vacio") && !RESULT.getNombre().equals("vacio")){
                        reply.append(enlace.reply_error("semantico", "Atributo nombre declarado mas de una vez", val2left, val2right));
                    }
                    if(!val2.getApellido().equals("vacio") && RESULT.getApellido().equals("vacio")){
                        RESULT.setApellido(val2.getApellido());
                    }else if(!val2.getApellido().equals("vacio") && !RESULT.getApellido().equals("vacio")){
                        reply.append(enlace.reply_error("semantico", "Atributo apellido declarado mas de una vez", val2left, val2right));
                    }
                    if(!val2.getPassword().equals("vacio") && RESULT.getPassword().equals("vacio")){
                        RESULT.setPassword(val2.getPassword());
                    }else if(!val2.getPassword().equals("vacio") && !RESULT.getPassword().equals("vacio")){
                        reply.append(enlace.reply_error("semantico", "Atributo password declarado mas de una vez", val2left, val2right));
                    }
                    if(val2.getTelefono()!=0 && RESULT.getTelefono()==0){
                        RESULT.setTelefono(val2.getTelefono());
                    }else if(val2.getTelefono()!=0 && RESULT.getTelefono()!=0){
                        reply.append(enlace.reply_error("semantico", "Atributo telefono declarado mas de una vez", val2left, val2right));
                    }
                    if(!val2.getEmail().equals("vacio") && RESULT.getEmail().equals("vacio")){
                        RESULT.setEmail(val2.getEmail());
                    }else if(!val2.getEmail().equals("vacio") && !RESULT.getEmail().equals("vacio")){
                        reply.append(enlace.reply_error("semantico", "Atributo email declarado mas de una vez", val2left, val2right));
                    }
                    if(!val2.getDirreccion().equals("vacio") && RESULT.getDirreccion().equals("vacio")){
                        RESULT.setDirreccion(val2.getDirreccion());
                    }else if(!val2.getDirreccion().equals("vacio") && !RESULT.getDirreccion().equals("vacio")){
                        reply.append(enlace.reply_error("semantico", "Atributo dirreccion declarado mas de una vez", val2left, val2right));
                    }

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("REGISUSU",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // USUARIO ::= DI iniciousuario DI LOGIN DI iniciousuario DF 
            {
              Usuario RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).right;
		Usuario val = (Usuario)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).value;
		

                RESULT = val;
                if(RESULT.getId()!=0 && !RESULT.getPassword().equals("vacio")){
                    if(!hash.usuExist(RESULT.getId()-1)){
                        Usuario prueba = hash.getusu(RESULT.getId());
                        if(prueba.getPassword().equals(RESULT.getPassword())){
                            enlace.reply_login(RESULT.getId(), "True");
                            Respondido = true;
                        }else{
                            enlace.reply_login(RESULT.getId(), "False");
                            Respondido = true;
                        }
                    }else{
                        enlace.reply_login(RESULT.getId(), "Fail");
                        Respondido = true;
                    }
                }


              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("USUARIO",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // USUARIO ::= DI crearusuario DI REGISUSU DI crearusuario DF 
            {
              Usuario RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).right;
		Usuario val = (Usuario)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).value;
		
                RESULT = val;
                if(RESULT.getId()!=0 && !RESULT.getNombre().equals("vacio") && !RESULT.getApellido().equals("vacio") && RESULT.getTelefono()!=0 && !RESULT.getEmail().equals("vacio")){
                    if(hash.usuExist(RESULT.getId()-1)){
                        hash.insertar_usu(RESULT.getId(),RESULT);
                        reply.append(enlace.reply_registro_usu(RESULT.getId(),"True"));
                    }else{
                        reply.append(enlace.reply_registro_usu(RESULT.getId(),"False"));
                    }
                }

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("USUARIO",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ACCION ::= ELIMINACION 
            {
              String RESULT =null;
		
              RESULT = "eliminar";

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("ACCION",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ACCION ::= MODIFICACION 
            {
              String RESULT =null;
		
              RESULT = "modificar";

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("ACCION",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ACCIONESPRODUP ::= cantidad igual EQ 
            {
              Producto RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		Ecuacion val = (Ecuacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = new Producto();
                try{
                    RESULT.setCantidad(Integer.parseInt(val.Ecuacion));
                }catch(Exception ex){
                        reply.append(enlace.reply_error("semantico", "ecuacion encontrada sin valor exacto", valleft, valright));
                }

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("ACCIONESPRODUP",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ACCIONESPRODUP ::= color igual CONSM 
            {
              Producto RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = new Producto();
                RESULT.setColor(val);

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("ACCIONESPRODUP",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ACCIONESPRODUP ::= nombre igual cadena 
            {
              Producto RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = new Producto();
                RESULT.setNombre(val.replaceAll("\"", ""));

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("ACCIONESPRODUP",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ACCIONESPRODUP ::= sucursal igual numero 
            {
              Producto RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = new Producto();
                RESULT.setSucursal(Integer.parseInt(val));

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("ACCIONESPRODUP",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ACCIONESPRODUP ::= codigo igual numero 
            {
              Producto RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = new Producto();
                RESULT.setId(Integer.parseInt(val));

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("ACCIONESPRODUP",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ACCIONESPRODUP ::= tipo igual ACCION 
            {
              Producto RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = new Producto();
                if(val.equals("eliminar")){
                    RESULT.setEliminar(false);
                }else if(val.equals("modificar")){
                    RESULT.setModificar(true);
                }else{
                    reply.append(enlace.reply_error("semantico", "valor de Accion no Encontrado", valleft, valright));
                }

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("ACCIONESPRODUP",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ACCIONESPRODU ::= ACCIONESPRODUP 
            {
              Producto RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		Producto val = (Producto)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = val;

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("ACCIONESPRODU",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ACCIONESPRODU ::= ACCIONESPRODU ACCIONESPRODUP 
            {
              Producto RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).right;
		Producto val1 = (Producto)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		Producto val2 = (Producto)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = val1;

if(val2.getId()!=0 && RESULT.getId()==0){
                    RESULT.setId(val2.getId());
                }else if(!val2.getNombre().equals("vacio") && RESULT.getNombre().equals("vacio")){
                    RESULT.setNombre(val2.getNombre());
                }else if(val2.getCantidad()!=0 && RESULT.getCantidad()==0){
                    RESULT.setCantidad(val2.getCantidad());
                }else if(!val2.getMarca().equals("vacio") && RESULT.getMarca().equals("vacio")){
                    RESULT.setMarca(val2.getMarca());
                }else if(!val2.getColor().equals("vacio") && RESULT.getColor().equals("vacio")){
                    RESULT.setColor(val2.getColor());
                }else if(val2.getTamaño()!=0 && RESULT.getTamaño()==0){
                    RESULT.setTamaño(val2.getTamaño());
                }else if(!val2.getImg().equals("vacio") && RESULT.getImg().equals("vacio")){
                    RESULT.setImg(val2.getImg());
                }else if(val2.getSucursal()!=0 && RESULT.getSucursal()==0){
                    RESULT.setSucursal(val2.getSucursal());
                }else if(val2.isModificar()&& !RESULT.isModificar()){
                    RESULT.setModificar(true);
                }else if(val2.isEliminar() && !RESULT.isEliminar()){
                    RESULT.setEliminar(true);
                }else if(val2.getId()!=0 && RESULT.getId()!=0){
                    reply.append(enlace.reply_error("semantico", "La etiqueta id ya se ha escrito con anterioridad", val2left, val2right));
                }else if(!val2.getNombre().equals("vacio") && !RESULT.getNombre().equals("vacio")){
                    reply.append(enlace.reply_error("semantico", "La etiqueta nombre ya se ha escrito con anterioridad", val2left, val2right));
                }else if(val2.getCantidad()!=0 && RESULT.getCantidad()!=0){
                    reply.append(enlace.reply_error("semantico", "La etiqueta cantidad ya se ha escrito con anterioridad", val2left, val2right));
                }else if(!val2.getMarca().equals("vacio") && !RESULT.getMarca().equals("vacio")){
                    reply.append(enlace.reply_error("semantico", "La etiqueta marca ya se ha escrito con anterioridad", val2left, val2right));
                }else if(!val2.getColor().equals("vacio") && !RESULT.getColor().equals("vacio")){
                    reply.append(enlace.reply_error("semantico", "La etiqueta color ya se ha escrito con anterioridad", val2left, val2right));
                }else if(val2.getTamaño()!=0 && RESULT.getTamaño()!=0){
                    reply.append(enlace.reply_error("semantico", "La etiqueta tamaño ya se ha escrito con anterioridad", val2left, val2right));
                }else if(!val2.getImg().equals("vacio") && !RESULT.getImg().equals("vacio")){
                    reply.append(enlace.reply_error("semantico", "La etiqueta img ya se ha escrito con anterioridad", val2left, val2right));
                }else if(val2.getSucursal()!=0 && RESULT.getSucursal()!=0){
                    reply.append(enlace.reply_error("semantico", "La etiqueta sucursal ya se ha escrito con anterioridad", val2left, val2right));
                }else if(val2.isModificar()&& RESULT.isModificar()){
                    reply.append(enlace.reply_error("semantico", "La etiqueta Accion modificar ya ha sido validada", val2left, val2right));
                }else if(val2.isEliminar() && RESULT.isEliminar()){
                    reply.append(enlace.reply_error("semantico", "La etiqueta Accion Eliminar ya ha sido validada", val2left, val2right));
                }                                

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("ACCIONESPRODU",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // REGISPRODUP ::= DI imagen DI identificador DI imagen DF 
            {
              Producto RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).value;
		
                RESULT = new Producto();
                RESULT.setImg(val);

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("REGISPRODUP",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // REGISPRODUP ::= DI color DI CONSM DI color DF 
            {
              Producto RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).value;
		
                RESULT = new Producto();
                RESULT.setColor(val);

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("REGISPRODUP",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // REGISPRODUP ::= DI tamano DI EQ DI tamano DF 
            {
              Producto RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).right;
		Ecuacion val = (Ecuacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).value;
				
                RESULT = new Producto();
                RESULT.setTamaño(Integer.parseInt(val.Ecuacion));

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("REGISPRODUP",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // REGISPRODUP ::= DI marca DI CONSM DI marca DF 
            {
              Producto RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).value;
		
                RESULT = new Producto();
                RESULT.setMarca(val);

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("REGISPRODUP",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // REGISPRODUP ::= DI cantidad DI EQ DI cantidad DF 
            {
              Producto RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).right;
		Ecuacion val = (Ecuacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).value;
		
                RESULT = new Producto();
                RESULT.setCantidad(Integer.parseInt(val.Ecuacion));

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("REGISPRODUP",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // REGISPRODUP ::= DI nombre DI CONSM DI nombre DF 
            {
              Producto RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).value;
		
                RESULT = new Producto();
                RESULT.setNombre(val);

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("REGISPRODUP",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // REGISPRODUP ::= DI codigo DI EQ DI codigo DF 
            {
              Producto RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).right;
		Ecuacion val = (Ecuacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).value;
		
                RESULT = new Producto();
                RESULT.setId(Integer.parseInt(val.Ecuacion));

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("REGISPRODUP",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // REGISPRODU ::= REGISPRODUP 
            {
              Producto RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		Producto val = (Producto)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = val;

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("REGISPRODU",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // REGISPRODU ::= REGISPRODU REGISPRODUP 
            {
              Producto RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).right;
		Producto val1 = (Producto)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		Producto val2 = (Producto)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = val1;

                if(val2.getId()!=0 && RESULT.getId()==0){
                    RESULT.setId(val2.getId());
                }else if(!val2.getNombre().equals("vacio") && RESULT.getNombre().equals("vacio")){
                    RESULT.setNombre(val2.getNombre());
                }else if(val2.getCantidad()!=0 && RESULT.getCantidad()==0){
                    RESULT.setCantidad(val2.getCantidad());
                }else if(!val2.getMarca().equals("vacio") && RESULT.getMarca().equals("vacio")){
                    RESULT.setMarca(val2.getMarca());
                }else if(!val2.getColor().equals("vacio") && RESULT.getColor().equals("vacio")){
                    RESULT.setColor(val2.getColor());
                }else if(val2.getTamaño()!=0 && RESULT.getTamaño()==0){
                    RESULT.setTamaño(val2.getTamaño());
                }else if(!val2.getImg().equals("vacio") && RESULT.getImg().equals("vacio")){
                    RESULT.setImg(val2.getImg());
                }else if(val2.getSucursal()!=0 && RESULT.getSucursal()==0){
                    RESULT.setSucursal(val2.getSucursal());
                }

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("REGISPRODU",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // CONJUNTOPP ::= DI producto ACCIONESPRODU DF 
            {
              ArrayList<Producto> RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).right;
		Producto val2 = (Producto)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).value;
		
                RESULT = new ArrayList();
                RESULT.add(val2);

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONJUNTOPP",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // CONJUNTOP ::= CONJUNTOPP 
            {
              ArrayList<Producto> RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		ArrayList<Producto> val = (ArrayList<Producto>)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = val;

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONJUNTOP",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // CONJUNTOP ::= CONJUNTOP CONJUNTOPP 
            {
              ArrayList<Producto> RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).right;
		ArrayList<Producto> val1 = (ArrayList<Producto>)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		ArrayList<Producto> val2 = (ArrayList<Producto>)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = val1;
                val2.stream().forEach(RESULT::add);

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONJUNTOP",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // PRODUCTO ::= DI tienda id igual numero DI CONJUNTOP DI tienda DF 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-5)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-5)).right;
		String val1 = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-5)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).right;
		ArrayList<Producto> val2 = (ArrayList<Producto>)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).value;
		
                val2.stream().forEach((Producto p)->{
                    p.setSucursal(Integer.parseInt(val1));
                    if(p.isEliminar()){
                        if(hash.produExist(hash.Hash_Cod_Producto(p.getSucursal(), p.getId()))){
                            hash.eliminarproduc(hash.Hash_Cod_Producto(p.getSucursal(), p.getId()));
                            reply.append(enlace.reply_eliminacion_producto(p.getId(), p.getSucursal(), "True"));
                        }else{
                            reply.append(enlace.reply_error("semantico", "No Existe Producto con id: "+p.getId(), val2left, val2right));
                            reply.append(enlace.reply_eliminacion_producto(p.getId(), p.getSucursal(), "False"));
                        }
                    }else if(p.isModificar()){
                        if(hash.produExist(hash.Hash_Cod_Producto(p.getSucursal(), p.getId()))){
                            hash.modificarprodu(hash.Hash_Cod_Producto(p.getSucursal(), p.getId()), p);
                            reply.append(enlace.reply_modificacion_producto(p.getId(), p.getSucursal(), "True"));
                        }else{
                            reply.append(enlace.reply_error("semantico", "No Existe Producto con id: "+p.getId(), val2left, val2right));
                            reply.append(enlace.reply_eliminacion_producto(p.getId(), p.getSucursal(), "False"));
                        }
                    }else if(p.isRegistro()){
                        if(!hash.produExist(hash.Hash_Cod_Producto(p.getSucursal(), p.getId()))){
                            hash.modificarprodu(hash.Hash_Cod_Producto(p.getSucursal(), p.getId()), p);
                            reply.append(enlace.reply_eliminacion_producto(p.getId(), p.getSucursal(), "True"));
                        }else{                            
                            reply.append(enlace.reply_error("semantico", "Ya Existe Producto con id: "+p.getId(), val2left, val2right));
                            reply.append(enlace.reply_eliminacion_producto(p.getId(), p.getSucursal(), "False"));
                        }
                    }else{
                        reply.append(enlace.reply_error("semantico", "No se ha especificdo ninguna accion para el producto id: "+ String.valueOf(p.getId()), val2left, val2right));
                    }
                });

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("PRODUCTO",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // PRODUCTO ::= DI producto ACCIONESPRODU DF 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).right;
		Producto val = (Producto)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).value;
		
                if(val.isEliminar()){
                        if(hash.produExist(hash.Hash_Cod_Producto(val.getSucursal(), val.getId()))){
                            hash.eliminarproduc(hash.Hash_Cod_Producto(val.getSucursal(), val.getId()));
                        }else{
                            reply.append(enlace.reply_error("semantico", "No Existe Producto con id: "+val.getId(), valleft, valright));
                        }
                    }else if(val.isModificar()){
                        if(hash.produExist(hash.Hash_Cod_Producto(val.getSucursal(), val.getId()))){
                            hash.modificarprodu(hash.Hash_Cod_Producto(val.getSucursal(), val.getId()), val);
                        }else{
                            reply.append(enlace.reply_error("semantico", "No Existe Producto con id: "+val.getId(), valleft, valright));
                        }
                    }else if(val.isRegistro()){
                        if(!hash.produExist(hash.Hash_Cod_Producto(val.getSucursal(), val.getId()))){
                            hash.modificarprodu(hash.Hash_Cod_Producto(val.getSucursal(), val.getId()), val);
                        }else{
                            reply.append(enlace.reply_error("semantico", "Ya Existe Producto con id: "+val.getId(), valleft, valright));
                        }
                    }else{
                            reply.append(enlace.reply_error("semantico","No se ha especificdo ninguna accion para el producto id: "+ String.valueOf(val.getId()), valleft, valright));
                }

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("PRODUCTO",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // PRODUCTO ::= DI producto tipo igual CREACION DI REGISPRODU DI DF 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).right;
		Producto val = (Producto)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).value;
		
                if(val!=null){
                    if(val.getId()!=0 && val.getNombre().equals("") && val.getSucursal()!=0){
                        if(!hash.produExist(hash.Hash_Cod_Producto(val.getSucursal(), val.getId()))){
                            hash.modificarprodu(hash.Hash_Cod_Producto(val.getSucursal(), val.getId()), val);
                        }else{
                            reply.append(enlace.reply_error("semantico", "Ya se Encuentra Ocupado el Id:" + val.getId(), valleft, valright));
                        }
                    }else{
                        reply.append(enlace.reply_error("semantico","ninguno de los parametros obligatorios se encuentra disponible", valleft, valright));
                    }
                }else{
                    reply.append(enlace.reply_error("semantico","no se ha epecificado ningun atributo", valleft, valright));
                }

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("PRODUCTO",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // CONSM ::= corchetei identificador coma identificador corchetef 
            {
              String RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).right;
		String val1 = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).right;
		String val2 = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).value;
		
                if(this.hash_compi.estaseccion(val1)){
                    Seccion_Mate temp1 = this.hash_compi.devolver_seccion(val1);
                    if(temp1.estacons(val2)){
                        Cons_Mate temp2 =temp1.devolverconst(val2);
                        if(temp2.valor_num!=null){
                            RESULT = temp2.valor_num;
                        }else{
                            RESULT = temp2.valor_str;
                        }
                    }else{
                        reply.append(enlace.reply_error("Semantico", "No Existe Contante Declarada en la seccion mate:"+temp1.id, val2left, val2right));
                    }
                }else{
                    reply.append(enlace.reply_error("Semantico", "No Existe la seccion mate:"+val1, val1left, val1right));
                }

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONSM",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // CONSM ::= avacio 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = "vacio";

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONSM",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // CONSM ::= numero 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = val;

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONSM",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // CONSM ::= cadena 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = val.replaceAll("\"", "");

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONSM",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ACCIONESTIENDAP ::= telefono igual numero 
            {
              Tienda RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = new Tienda();
                RESULT.setTelefono(Integer.parseInt(val));

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("ACCIONESTIENDAP",39, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ACCIONESTIENDAP ::= direccion igual cadena 
            {
              Tienda RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = new Tienda();
                RESULT.setDirreccion(val.replaceAll("\"", ""));

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("ACCIONESTIENDAP",39, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ACCIONESTIENDAP ::= nombre igual cadena 
            {
              Tienda RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = new Tienda();
                RESULT.setNombre(val.replaceAll("\"", ""));

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("ACCIONESTIENDAP",39, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ACCIONESTIENDAP ::= propietario igual numero 
            {
              Tienda RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = new Tienda();
                RESULT.setPropietario(Integer.parseInt(val));

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("ACCIONESTIENDAP",39, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ACCIONESTIENDAP ::= codigo igual numero 
            {
              Tienda RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = new Tienda();
                RESULT.setCodigo(Integer.parseInt(val));

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("ACCIONESTIENDAP",39, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ACCIONESTIENDAP ::= tipo igual ACCION 
            {
              Tienda RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = new Tienda();
                if(val.equals("eliminar")){
                    RESULT.setEliminar(true);
                }else if(val.equals("modificar")){
                    RESULT.setModificar(true);
                }

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("ACCIONESTIENDAP",39, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ACCIONESTIENDA ::= ACCIONESTIENDAP 
            {
              Tienda RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		Tienda val = (Tienda)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT=val;

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("ACCIONESTIENDA",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ACCIONESTIENDA ::= ACCIONESTIENDA coma ACCIONESTIENDAP 
            {
              Tienda RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).right;
		Tienda val1 = (Tienda)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		Tienda val2 = (Tienda)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
RESULT = val1;
                if(val2.getCodigo()!=0 && RESULT.getCodigo()==0){
                    RESULT.setCodigo(val2.getCodigo());
                }else if(!val2.getNombre().equals("vacio") && RESULT.getNombre().equals("vacio")){
                    RESULT.setNombre(val2.getNombre());
                }else if(val2.getPropietario()!=0 && RESULT.getPropietario()==0){
                    RESULT.setPropietario(val2.getPropietario());
                }else if(!val2.getDirreccion().equals("vacio") && RESULT.getDirreccion().equals("vacio")){
                    RESULT.setDirreccion(val2.getDirreccion());
                }else if(val2.getTelefono()!=0 && RESULT.getTelefono()==0){
                    RESULT.setTelefono(val2.getTelefono());
                }else if(!val2.getImg().equals("vacio") && RESULT.getImg().equals("vacio")){
                    RESULT.setImg(val2.getImg());
                }else if(val2.isEliminar() && !RESULT.isEliminar()){
                    RESULT.setEliminar(true);
                }else if(val2.isModificar() && !RESULT.isModificar()){
                    RESULT.setModificar(true);
                }else if(val2.getCodigo()!=0 && RESULT.getCodigo()!=0){
                    reply.append(enlace.reply_error("semantico", "Etiqueta Codigo ya ha sido declarada", val2left, val2right));
                }else if(!val2.getNombre().equals("vacio") && !RESULT.getNombre().equals("vacio")){
                    reply.append(enlace.reply_error("semantico", "Etiqueta Nombre ya ha sido declarada", val2left, val2right));
                }else if(val2.getPropietario()!=0 && RESULT.getPropietario()!=0){
                    reply.append(enlace.reply_error("semantico", "Etiqueta Propietario ya ha sido declarada", val2left, val2right));
                }else if(!val2.getDirreccion().equals("vacio") && !RESULT.getDirreccion().equals("vacio")){
                    reply.append(enlace.reply_error("semantico", "Etiqueta Dirreccion ya ha sido declarada", val2left, val2right));
                }else if(val2.getTelefono()!=0 && RESULT.getTelefono()==0){
                    reply.append(enlace.reply_error("semantico", "Etiqueta Telefono ya ha sido declarada", val2left, val2right));
                }else if(!val2.getImg().equals("vacio") && !RESULT.getImg().equals("vacio")){
                    reply.append(enlace.reply_error("semantico", "Etiqueta img ya ha sido declarada", val2left, val2right));
                }else if(val2.isEliminar() && RESULT.isEliminar()){
                    reply.append(enlace.reply_error("semantico", "Ya se ha estipulado que la accion es eliminar", val2left, val2right));
                }else if(val2.isModificar() && !RESULT.isModificar()){
                    reply.append(enlace.reply_error("semantico", "ya se ha estipulado que la accion es modificar", val2left, val2right));
                }

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("ACCIONESTIENDA",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // CONTREGISTIENDAP ::= error DF 
            {
              Tienda RESULT =null;
		
                RESULT = new Tienda();
                System.out.println("me sincronize con DF");

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONTREGISTIENDAP",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // CONTREGISTIENDAP ::= error DI 
            {
              Tienda RESULT =null;
		
                RESULT = new Tienda();
                System.out.println("me sincronize con DI");

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONTREGISTIENDAP",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // CONTREGISTIENDAP ::= DI imagen DI identificador DI imagen DF 
            {
              Tienda RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).value;
		
                RESULT = new Tienda();
                RESULT.setImg(val);

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONTREGISTIENDAP",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // CONTREGISTIENDAP ::= DI telefono DI numero DI telefono DF 
            {
              Tienda RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).value;
		
                RESULT = new Tienda();
                RESULT.setTelefono(Integer.parseInt(val));

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONTREGISTIENDAP",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CONTREGISTIENDAP ::= DI direccion DI CONSM DI direccion DF 
            {
              Tienda RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).value;
		
                RESULT = new Tienda();
                RESULT.setDirreccion(val);

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONTREGISTIENDAP",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CONTREGISTIENDAP ::= DI nombre DI CONSM DI nombre DF 
            {
              Tienda RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).value;
		
                RESULT = new Tienda();
                RESULT.setNombre(val);

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONTREGISTIENDAP",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CONTREGISTIENDAP ::= DI propietario DI numero DI propietario DF 
            {
              Tienda RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).value;
		
                RESULT = new Tienda();
                RESULT.setPropietario(Integer.parseInt(val));

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONTREGISTIENDAP",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CONTREGISTIENDAP ::= DI codigo DI numero DI codigo DF 
            {
              Tienda RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).value;
		
                RESULT = new Tienda();
                RESULT.setCodigo(Integer.parseInt(val));

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONTREGISTIENDAP",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CONTREGISTIENDA ::= CONTREGISTIENDAP 
            {
              Tienda RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		Tienda val = (Tienda)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = val;

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONTREGISTIENDA",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CONTREGISTIENDA ::= CONTREGISTIENDA CONTREGISTIENDAP 
            {
              Tienda RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).right;
		Tienda val1 = (Tienda)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		Tienda val2 = (Tienda)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = val1;
                if(val2.getCodigo()!=0 && RESULT.getCodigo()==0){
                    RESULT.setCodigo(val2.getCodigo());
                }else if(!val2.getNombre().equals("vacio") && RESULT.getNombre().equals("vacio")){
                    RESULT.setNombre(val2.getNombre());
                }else if(val2.getPropietario()!=0 && RESULT.getPropietario()==0){
                    RESULT.setPropietario(val2.getPropietario());
                }else if(!val2.getDirreccion().equals("vacio") && RESULT.getDirreccion().equals("vacio")){
                    RESULT.setDirreccion(val2.getDirreccion());
                }else if(val2.getTelefono()!=0 && RESULT.getTelefono()==0){
                    RESULT.setTelefono(val2.getTelefono());
                }else if(!val2.getImg().equals("vacio") && RESULT.getImg().equals("vacio")){
                    RESULT.setImg(val2.getImg());
                }

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONTREGISTIENDA",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // TIENDA ::= ACCIONESTIENDA DF 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).right;
		Tienda val = (Tienda)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).value;
		
                if(val.isEliminar()){
                    if(hash.tiendaExist(hash.Hash_Cod_Tienda(val.getPropietario(), val.getCodigo()))){
                        hash.eliminartienda(hash.Hash_Cod_Tienda(val.getPropietario(), val.getCodigo()));
                    }else{
                        reply.append(enlace.reply_error("Semantico", "No Existe La tienda con id:"+val.getCodigo(), valleft, valright));
                    }
                }else if(val.isModificar()){
                    if(hash.tiendaExist(hash.Hash_Cod_Tienda(val.getPropietario(), val.getCodigo()))){
                        hash.modificartienda(hash.Hash_Cod_Tienda(val.getPropietario(), val.getCodigo()), val);
                    }else{
                        reply.append(enlace.reply_error("Semantico", "No Existe La tienda con id:"+val.getCodigo(), valleft, valright));
                    }
                }

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("TIENDA",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // TIENDA ::= tipo igual CREACION DI CONTREGISTIENDA DI tienda DF 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).right;
		Tienda val = (Tienda)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).value;
		
                if(val!=null){
                    if(val.getCodigo()!=0 && !val.getDirreccion().equals("vacio") && !val.getImg().equals("vacio") && !val.getNombre().equals("vacio") && val.getPropietario()!=0 && val.getTelefono()!=0){
                        if(hash.tiendaExist(hash.Hash_Cod_Tienda(val.getPropietario(), val.getCodigo()))){
                            hash.modificartienda(hash.Hash_Cod_Tienda(val.getPropietario(), val.getCodigo()), val);
                            reply.append(enlace.reply_registro_tienda(val.getCodigo(), "True"));
                        }else{
                            reply.append(enlace.reply_error("Semantico","Tienda ya existente con el id:"+ String.valueOf(val.getCodigo()), valleft, valright));
                            reply.append(enlace.reply_registro_tienda(val.getCodigo(), "False"));
                        }
                    }else{
                        reply.append(enlace.reply_error("Semantico","Todos los valores son nesesario, ninguno puede ser nulo", valleft, valright));
                        reply.append(enlace.reply_registro_tienda(val.getCodigo(), "False"));
                    }
                }


              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("TIENDA",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // PETICIONP ::= PRODUCTO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
//----------------------

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("PETICIONP",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // PETICIONP ::= DI tienda TIENDA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
//----------------------

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("PETICIONP",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // PETICION ::= PETICIONP 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
//----------------------

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("PETICION",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // PETICION ::= PETICION PETICIONP 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
//----------------------

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("PETICION",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CONTGETP ::= sucursal igual numero 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
            RESULT = val;

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONTGETP",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CONTGETP ::= 
            {
              String RESULT =null;
		RESULT = "";
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONTGETP",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CONTGET ::= cadena propietario igual numero CONTGETP 
            {
              ArrayList<Object> RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-4)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-4)).value;
		int val1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).right;
		String val1 = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		String val2 = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = new ArrayList();

                if(val.replaceAll("\"", "").equals("productos")){
                    if(!val2.equals("")){
                        ArrayList<Producto> temp1 = hash.get_productosc("sucursal",(Object)val2);
                        ArrayList<Producto> temp2 = new ArrayList();
                        ArrayList<Object> temp3 = new ArrayList();
                        temp1.stream().forEach((Producto p)->{
                            temp2.add(p);
                            temp3.add((Object)p);
                        });
                        RESULT = temp3;
                        reply.append(enlace.reply_lista_productos(temp2));
                    }else{
                        reply.append(enlace.reply_error("semantico", "a solicitado productos pero no ha especificado sucursal", val2left, val2right));
                        }
                }else if(val.replaceAll("\"", "").equals("tiendas")){
                    if(!val2.equals("")){
                        reply.append(enlace.reply_error("semantico", "Atributo sucursal no era nesesario para obtener tiendas", val2left, val2right));
                    }else{
                        ArrayList<Tienda> temp1 = hash.get_tiendasc("propietario",(Object)val1);
                        ArrayList<Tienda> temp2 = new ArrayList();
                        ArrayList<Object> temp3 = new ArrayList();
                        temp1.stream().forEach((Tienda p)->{
                            temp2.add(p);
                            temp3.add((Object)p);
                        });
                        RESULT = temp3;
                        reply.append(enlace.reply_lista_tiendas(temp2));
                    }
                }

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONTGET",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // GET ::= DI get tipo igual CONTGET DF 
            {
              String RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("GET",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // PETICIONES ::= error DI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).value;
		
                System.out.println("me sincronize con $" + eleft + " " + " " + eright);

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("PETICIONES",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // PETICIONES ::= error DF 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).value;
		
                System.out.println("me sincronize con -$" + eleft + " " + " " + eright);

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("PETICIONES",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // PETICIONES ::= DI request DI USUARIO DI request DF 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).right;
		Usuario val = (Usuario)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).value;
		
//----------------------

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("PETICIONES",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // PETICIONES ::= DI request DI GET DI request DF 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).value;
		
//----------------------

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("PETICIONES",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // PETICIONES ::= DI consulta DI CONSULTA DI consulta DF 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).right;
		Query val = (Query)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).value;
		
//----------------------

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("PETICIONES",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // PETICIONES ::= DI request DI PETICION DI request DF 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).value;
		
//----------------------

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("PETICIONES",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXPREG ::= identificador 
            {
              Ecuacion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = new Ecuacion();
                RESULT.variables.add(val);
                RESULT.Ecuacion=val;

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("EXPREG",50, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXPREG ::= numero 
            {
              Ecuacion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = new Ecuacion();
                RESULT.Ecuacion = val;

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("EXPREG",50, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXPREG ::= parentesisi EQP parentesisf 
            {
              Ecuacion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).right;
		Ecuacion val = (Ecuacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).value;
		
                RESULT = new Ecuacion();
                if(!val.variables.isEmpty()){
                    RESULT.Ecuacion = "("+ val.Ecuacion +")";
                    val.variables.stream().forEach(RESULT.variables::add);
                }else{
                    RESULT.Ecuacion =val.Ecuacion;
                }

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("EXPREG",50, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EXPREF ::= EXPREG 
            {
              Ecuacion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		Ecuacion val = (Ecuacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = val;

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("EXPREF",49, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EXPREF ::= llavesi EXPREG llavesf 
            {
              Ecuacion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).right;
		Ecuacion val = (Ecuacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).value;
		
                RESULT = new Ecuacion();
                if(!val.variables.isEmpty()){
                    RESULT.variables = val.variables;
                    RESULT.Ecuacion = "{" + val.Ecuacion + "}";
                }else{
                    RESULT.Ecuacion =val.Ecuacion;
                }

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("EXPREF",49, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EXPREE ::= EXPREF 
            {
              Ecuacion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		Ecuacion val = (Ecuacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = val;

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("EXPREE",48, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EXPREE ::= raiz corchetei EXPREF coma EXPREF corchetef 
            {
              Ecuacion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).right;
		Ecuacion val1 = (Ecuacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).right;
		Ecuacion val2 = (Ecuacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).value;
		
                RESULT = new Ecuacion();
                if(val1.variables.isEmpty() && val2.variables.isEmpty()){
                    if(!val2.Ecuacion.equals("0")){
                        RESULT.Ecuacion=String.valueOf(Math.pow((double)Integer.parseInt(val1.Ecuacion),1/(double)Integer.parseInt(val2.Ecuacion)));
                    }else{
                        reply.append(enlace.reply_error("Semantico", "Se ha hecho una raiz de valor 0", val2left, val2right));
                    }
                }else{
                    RESULT.Ecuacion="Rq["+val1.Ecuacion+","+val2.Ecuacion+"]";
                    val1.variables.stream().forEach(RESULT.variables::add);
                    val2.variables.stream().forEach(RESULT.variables::add);            
                }           

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("EXPREE",48, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EXPRED ::= EXPREE 
            {
              Ecuacion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		Ecuacion val = (Ecuacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = val;

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("EXPRED",47, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EXPRED ::= potencia corchetei EXPREE coma EXPREE corchetef 
            {
              Ecuacion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).right;
		Ecuacion val1 = (Ecuacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).right;
		Ecuacion val2 = (Ecuacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).value;
		
                if(val1.variables.isEmpty() && val2.variables.isEmpty()){
                    try{
                        RESULT.Ecuacion=String.valueOf(Math.pow((double)Integer.parseInt(val1.Ecuacion),(double)Integer.parseInt(val2.Ecuacion)));
                    }catch(Exception ex){
                        reply.append(enlace.reply_error("Semantico", "Operacion matematica invalida", val1left, val1right));    
                    }
                }else{
                    RESULT.Ecuacion="Ptn["+val1.Ecuacion+","+val2.Ecuacion+"]";
                    val1.variables.stream().forEach(RESULT.variables::add);
                    val2.variables.stream().forEach(RESULT.variables::add);            
                }

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("EXPRED",47, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EXPREC ::= EXPRED 
            {
              Ecuacion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		Ecuacion val = (Ecuacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = val;

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("EXPREC",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EXPREC ::= EXPREC division EXPRED 
            {
              Ecuacion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).right;
		Ecuacion val1 = (Ecuacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		Ecuacion val2 = (Ecuacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = new Ecuacion();
                if(val1.variables.isEmpty() && val2.variables.isEmpty()){
                    if(!val2.Ecuacion.equals("0")){
                        RESULT.Ecuacion = String.valueOf((double)Integer.parseInt(val1.Ecuacion)/(double)Integer.parseInt(val2.Ecuacion));
                    }else{
                        reply.append(enlace.reply_error("Semantico", "Operacion matematica invalida", val1left, val1right));    
                    }
                }else{
                    RESULT.Ecuacion=val1.Ecuacion+"/"+val2.Ecuacion;
                    val1.variables.stream().forEach(RESULT.variables::add);
                    val2.variables.stream().forEach(RESULT.variables::add);                
                }              

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("EXPREC",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // EXPREB ::= EXPREC 
            {
              Ecuacion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		Ecuacion val = (Ecuacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = val;

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("EXPREB",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EXPREB ::= EXPREB multiplicacion EXPREC 
            {
              Ecuacion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).right;
		Ecuacion val1 = (Ecuacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		Ecuacion val2 = (Ecuacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = new Ecuacion();
                if(val1.variables.isEmpty() && val2.variables.isEmpty()){
                    RESULT.Ecuacion = String.valueOf((double)Integer.parseInt(val1.Ecuacion)*(double)Integer.parseInt(val2.Ecuacion));
                }else{
                    RESULT.Ecuacion=val1.Ecuacion+"*"+val2.Ecuacion;
                    val1.variables.stream().forEach(RESULT.variables::add);
                    val2.variables.stream().forEach(RESULT.variables::add);                
                }               

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("EXPREB",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // EXPREA ::= EXPREB 
            {
              Ecuacion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		Ecuacion val = (Ecuacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = val;

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("EXPREA",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // EXPREA ::= EXPREA resta EXPREB 
            {
              Ecuacion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).right;
		Ecuacion val1 = (Ecuacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		Ecuacion val2 = (Ecuacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = new Ecuacion();
                if(val1.variables.isEmpty() && val2.variables.isEmpty()){
                    RESULT.Ecuacion = String.valueOf((double)Integer.parseInt(val1.Ecuacion)-(double)Integer.parseInt(val2.Ecuacion));
                }else{
                    RESULT.Ecuacion=val1.Ecuacion+"-"+val2.Ecuacion;
                    val1.variables.stream().forEach(RESULT.variables::add);
                    val2.variables.stream().forEach(RESULT.variables::add);                
                }               

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("EXPREA",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // EQP ::= EXPREA 
            {
              Ecuacion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		Ecuacion val = (Ecuacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = val;

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("EQP",43, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // EQP ::= EQP suma EXPREA 
            {
              Ecuacion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).right;
		Ecuacion val1 = (Ecuacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		Ecuacion val2 = (Ecuacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = new Ecuacion();
                if(val1.variables.isEmpty() && val2.variables.isEmpty()){
                    RESULT.Ecuacion = String.valueOf((double)Integer.parseInt(val1.Ecuacion)+(double)Integer.parseInt(val2.Ecuacion));
                }else{
                    RESULT.Ecuacion=val1.Ecuacion+"-"+val2.Ecuacion;
                    val1.variables.stream().forEach(RESULT.variables::add);
                    val2.variables.stream().forEach(RESULT.variables::add);                
                }             

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("EQP",43, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // PARAMSNP ::= numero 
            {
              ArrayList<String> RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = new ArrayList();
                RESULT.add(val);

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("PARAMSNP",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // PARAMSNP ::= 
            {
              ArrayList<String> RESULT =null;
		RESULT=new ArrayList();
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("PARAMSNP",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // PARAMSN ::= PARAMSNP 
            {
              ArrayList<String> RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		ArrayList<String> val = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = new ArrayList();
                if(!val.isEmpty()){
                    val.stream().forEach(RESULT::add);
                }

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("PARAMSN",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // PARAMSN ::= PARAMSN coma PARAMSNP 
            {
              ArrayList<String> RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).right;
		ArrayList<String> val1 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		ArrayList<String> val2 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = new ArrayList();
                if((!val1.isEmpty() && val2.isEmpty()) || (val2.isEmpty() && val1.isEmpty())){
                    reply.append(enlace.reply_error("Semantico", "Declracion Erronea", val1left, val1right));
                }
                if(!val2.isEmpty() && !val1.isEmpty()){
                    val2.stream().forEach(RESULT::add);
                    val1.stream().forEach(RESULT::add);
                }

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("PARAMSN",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CONTMATEF ::= parentesisi PARAMSN parentesisf 
            {
              ArrayList<String> RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).right;
		ArrayList<String> val = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).value;
		
                RESULT = val;

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONTMATEF",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // MATEF ::= corchetei identificador coma identificador CONTMATEF corchetef 
            {
              String RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-4)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-4)).right;
		String val1 = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-4)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).right;
		String val2 = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).value;
		int val3left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).left;
		int val3right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).right;
		ArrayList<String> val3 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).value;
		
                if(this.hash_compi.estaseccion(val1)){
                    Seccion_Mate secciontemp = this.hash_compi.devolver_seccion(val1);
                    if(secciontemp.estafuncion(val2)){
                        Funcion_Mate funciontemp = secciontemp.devolverfuncion(val2);
                        if(funciontemp.parametros.size()==val3.size()){
                           RESULT = funciontemp.devolver_entero(val3);
                        }else{
                            reply.append(enlace.reply_error("semantico","El numero de Paramteroos ingresado no coiciden con los que se nesesitan",val3left,val3right));
                        }
                    }else{
                        reply.append(enlace.reply_error("Semantico", "La Funcion Declarada no Existe", val2left, val2right));
                    }
                }else{
                    reply.append(enlace.reply_error("Semantico", "La seccion Mate no Existe", val1left, val1right));
                }

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("MATEF",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // EQ ::= MATEF 
            {
              Ecuacion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = new Ecuacion();
                RESULT.Ecuacion=val;


              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("EQ",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // EQ ::= EQP 
            {
              Ecuacion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		Ecuacion val = (Ecuacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = val;

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("EQ",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // PARAMSP ::= identificador 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = val;

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("PARAMSP",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // PARAMSP ::= 
            {
              String RESULT =null;
		RESULT="";
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("PARAMSP",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // PARAMS ::= PARAMSP 
            {
              ArrayList<String> RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = new ArrayList();
                if(!val.equals("")){RESULT.add(val);}

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("PARAMS",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // PARAMS ::= PARAMS coma PARAMSP 
            {
              ArrayList<String> RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).right;
		ArrayList<String> val1 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		String val2 = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = new ArrayList();
                val1.stream().forEach(RESULT::add);
                if(RESULT.isEmpty() && !val2.equals("")){
                    reply.append(enlace.reply_error("sintactico", "error,  declaracion de paramtero antes de " + val2, val1left, val1right));
                }else if(!RESULT.isEmpty() && val2.equals("")){
                    reply.append(enlace.reply_error("sintactico","Coma sobrante", val2left, val2right));    
                }else{
                    RESULT.add(val2);
                }

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("PARAMS",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CONTMATEP ::= constante identificador igual cadena pyc 
            {
              Seccion_Mate RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).right;
		String val1 = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).right;
		String val2 = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).value;
		
                Cons_Mate constante = new Cons_Mate();
                constante.id=val1;
                constante.valor_str=val2.replaceAll("\"", "");
                RESULT = new Seccion_Mate();
                RESULT.agregar_constante(constante);

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONTMATEP",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CONTMATEP ::= constante identificador igual numero pyc 
            {
              Seccion_Mate RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).right;
		String val1 = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).right;
		String val2 = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).value;
		
                Cons_Mate constante = new Cons_Mate();
                constante.id=val1;
                constante.valor_num=val2;
                RESULT = new Seccion_Mate();
                RESULT.agregar_constante(constante);
                

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONTMATEP",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CONTMATEP ::= identificador parentesisi PARAMS parentesisf igual llavesi EQ llavesf pyc 
            {
              Seccion_Mate RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-8)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-8)).right;
		String val1 = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-8)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)).right;
		ArrayList<String> val2 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)).value;
		int val3left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).left;
		int val3right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).right;
		Ecuacion val3 = (Ecuacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).value;
		
                Funcion_Mate funcion = new Funcion_Mate();
                funcion.id=val1;
                funcion.parametros=val2;
                if(funcion.parametros.size() == val3.variables.size()){
                    if(funcion.parametros.containsAll(val3.variables)){
                        funcion.parametros=val3.variables;
                        funcion.accion=val3.Ecuacion;
                        RESULT = new Seccion_Mate();
                        RESULT.agregar_funcion(funcion);
                    }else{
                        reply.append(enlace.reply_error("semantico", "los parametros declarados no coiciden con los de la ecuacion", val2left, val2right));
                    }
                }else if(funcion.parametros.size()<val3.variables.size()){
                    reply.append(enlace.reply_error("semantico","Hay Mas Variables que parametros declarado para la funcion " + funcion.id, val3left, val3right));
                }else if(funcion.parametros.size()>val3.variables.size()){
                    reply.append(enlace.reply_error("semantico","Hay parametros declarados demas en la funcion " + funcion.id, val1left, val1right));           
                }

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONTMATEP",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CONTMATE ::= CONTMATEP 
            {
              Seccion_Mate RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		Seccion_Mate val = (Seccion_Mate)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                if(val!=null){
                    RESULT = val;
                }

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONTMATE",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CONTMATE ::= CONTMATE CONTMATEP 
            {
              Seccion_Mate RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).right;
		Seccion_Mate val1 = (Seccion_Mate)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		Seccion_Mate val2 = (Seccion_Mate)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                if(val1!=null){
                    RESULT = val1;
                    if(val2!=null){
                        if(!val2.funciones.isEmpty()){
                            val2.funciones.stream().forEach(RESULT::agregar_funcion);
                        }
                        if(!val2.constantes.isEmpty()){
                            val2.constantes.stream().forEach(RESULT::agregar_constante);
                        }
                    }
                }else if(val2!=null){
                    RESULT = val2;
                    if(val1!=null){
                        if(!val1.funciones.isEmpty()){
                            val1.funciones.stream().forEach(RESULT::agregar_funcion);
                        }
                        if(!val1.constantes.isEmpty()){
                            val1.constantes.stream().forEach(RESULT::agregar_constante);
                        }
                    }
                }

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONTMATE",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // MATE ::= cadena DI CONTMATE 
            {
              Seccion_Mate RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).right;
		String val1 = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		Seccion_Mate val2 = (Seccion_Mate)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = new Seccion_Mate();
                RESULT.id = val1.replaceAll("\"", "");
                if(val2!=null){
                    val2.funciones.stream().forEach(RESULT::agregar_funcion);
                    val2.constantes.stream().forEach(RESULT::agregar_constante);
                }

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("MATE",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // REQUEST ::= DI mate nombre igual MATE DI mate DF 
            {
              StringBuilder RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).right;
		Seccion_Mate val = (Seccion_Mate)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).value;
		
                this.hash_compi.agregar_seccion(val);

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("REQUEST",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // REQUEST ::= PETICIONES 
            {
              StringBuilder RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("REQUEST",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // REQUEST ::= REQUEST PETICIONES 
            {
              StringBuilder RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("REQUEST",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIA ::= REQUEST 
            {
              Object RESULT =null;
		
                if(!Respondido){
                    enlace.enviar_Reply(reply.toString());
                }else{
                    reply = new StringBuilder();
                    Respondido = false;
                }

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("INICIA",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico_compilador$parser.done_parsing();
          return CUP$AnalizadorSintactico_compilador$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

