
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Apr 12 02:20:01 CST 2016
//----------------------------------------------------

package BackEnd.Analizador.Compilador;

import java_cup.runtime.*;
import BackEnd.DAO.Objetos.*;
import BackEnd.DAO.Compilador.*;
import BackEnd.DAO.Hash.Tabla_Hash_compilador;
import java.util.ArrayList;
import BackEnd.Conexion.Enlace_Envio;
import java.net.InetAddress;
import static compi1.proyecto1_server.pkg201403775.Compi1Proyecto1_Server201403775.hash;
/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Apr 12 02:20:01 CST 2016
  */
public class AnalizadorSintactico_compilador extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintactico_compilador() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico_compilador(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico_compilador(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\206\000\002\002\004\000\002\002\003\000\002\015" +
    "\004\000\002\015\003\000\002\015\012\000\002\057\005" +
    "\000\002\061\004\000\002\061\003\000\002\060\013\000" +
    "\002\060\007\000\002\060\007\000\002\052\005\000\002" +
    "\052\003\000\002\047\002\000\002\047\003\000\002\033" +
    "\003\000\002\033\003\000\002\051\010\000\002\055\005" +
    "\000\002\053\005\000\002\053\003\000\002\054\002\000" +
    "\002\054\003\000\002\034\005\000\002\034\003\000\002" +
    "\035\005\000\002\035\003\000\002\036\005\000\002\036" +
    "\003\000\002\037\005\000\002\037\003\000\002\040\010" +
    "\000\002\040\003\000\002\041\010\000\002\041\003\000" +
    "\002\042\005\000\002\042\003\000\002\043\005\000\002" +
    "\043\003\000\002\043\003\000\002\003\011\000\002\003" +
    "\011\000\002\003\011\000\002\003\011\000\002\003\004" +
    "\000\002\003\004\000\002\044\010\000\002\056\007\000" +
    "\002\045\002\000\002\045\005\000\002\004\004\000\002" +
    "\004\003\000\002\005\006\000\002\005\003\000\002\006" +
    "\011\000\002\006\003\000\002\031\004\000\002\031\003" +
    "\000\002\032\011\000\002\032\011\000\002\032\011\000" +
    "\002\032\011\000\002\032\011\000\002\032\011\000\002" +
    "\027\005\000\002\027\003\000\002\030\005\000\002\030" +
    "\005\000\002\030\005\000\002\030\005\000\002\030\005" +
    "\000\002\030\005\000\002\046\003\000\002\046\003\000" +
    "\002\046\003\000\002\046\007\000\002\007\013\000\002" +
    "\007\006\000\002\007\014\000\002\025\004\000\002\025" +
    "\003\000\002\026\011\000\002\026\011\000\002\026\011" +
    "\000\002\026\011\000\002\026\011\000\002\026\011\000" +
    "\002\026\011\000\002\023\004\000\002\023\003\000\002" +
    "\024\005\000\002\024\005\000\002\024\005\000\002\024" +
    "\005\000\002\024\005\000\002\024\005\000\002\050\003" +
    "\000\002\050\003\000\002\016\011\000\002\016\011\000" +
    "\002\017\004\000\002\017\003\000\002\020\011\000\002" +
    "\020\011\000\002\020\011\000\002\020\011\000\002\020" +
    "\011\000\002\020\011\000\002\020\011\000\002\021\004" +
    "\000\002\021\003\000\002\022\011\000\002\022\011\000" +
    "\002\010\007\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\012\002\000\002\012\006\000\002\012" +
    "\003\000\002\013\006\000\002\013\006\000\002\013\006" +
    "\000\002\013\006\000\002\013\006\000\002\013\006\000" +
    "\002\013\006\000\002\013\006\000\002\013\006\000\002" +
    "\013\006\000\002\013\006\000\002\014\003\000\002\014" +
    "\003\000\002\014\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01ac\000\006\003\007\005\010\001\002\000\004\002" +
    "\u01ae\001\002\000\010\002\000\003\007\005\u01ad\001\002" +
    "\000\010\002\ufffe\003\ufffe\005\ufffe\001\002\000\006\005" +
    "\u01aa\006\u01ab\001\002\000\010\010\012\061\013\062\011" +
    "\001\002\000\004\005\u0167\001\002\000\004\005\135\001" +
    "\002\000\004\017\014\001\002\000\004\052\015\001\002" +
    "\000\004\045\016\001\002\000\004\005\023\001\002\000" +
    "\004\005\020\001\002\000\004\061\021\001\002\000\004" +
    "\006\022\001\002\000\010\002\ufffd\003\ufffd\005\ufffd\001" +
    "\002\000\006\004\027\047\025\001\002\000\010\004\027" +
    "\005\ufffc\047\025\001\002\000\004\055\036\001\002\000" +
    "\010\004\ufffa\005\ufffa\047\ufffa\001\002\000\004\047\030" +
    "\001\002\000\004\052\031\001\002\000\006\045\033\046" +
    "\032\001\002\000\004\050\035\001\002\000\004\050\034" +
    "\001\002\000\010\004\ufff7\005\ufff7\047\ufff7\001\002\000" +
    "\010\004\ufff8\005\ufff8\047\ufff8\001\002\000\010\047\037" +
    "\051\ufff4\056\ufff4\001\002\000\006\051\ufff3\056\ufff3\001" +
    "\002\000\006\051\ufff5\056\ufff5\001\002\000\006\051\042" +
    "\056\043\001\002\000\010\047\037\051\ufff4\056\ufff4\001" +
    "\002\000\004\052\044\001\002\000\004\057\045\001\002" +
    "\000\020\031\046\032\062\046\064\047\065\053\052\055" +
    "\057\057\066\001\002\000\004\053\126\001\002\000\052" +
    "\003\uffdd\005\uffdd\006\uffdd\013\uffdd\017\uffdd\025\uffdd\030" +
    "\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd\040\uffdd\042\uffdd" +
    "\050\uffdd\051\uffdd\054\uffdd\056\uffdd\060\uffdd\064\uffdd\065" +
    "\uffdd\001\002\000\052\003\uffdf\005\uffdf\006\uffdf\013\uffdf" +
    "\017\uffdf\025\uffdf\030\uffdf\033\uffdf\034\uffdf\035\uffdf\036" +
    "\uffdf\040\uffdf\042\uffdf\050\uffdf\051\uffdf\054\uffdf\056\uffdf" +
    "\060\uffdf\064\uffdf\065\uffdf\001\002\000\046\003\uffe1\005" +
    "\uffe1\006\uffe1\013\uffe1\017\uffe1\025\uffe1\030\uffe1\033\uffe1" +
    "\034\uffe1\035\uffe1\036\uffe1\040\uffe1\042\uffe1\050\uffe1\056" +
    "\uffe1\060\uffe1\064\uffe1\065\uffe1\001\002\000\004\047\112" +
    "\001\002\000\046\003\uffe3\005\uffe3\006\uffe3\013\uffe3\017" +
    "\uffe3\025\uffe3\030\uffe3\033\uffe3\034\uffe3\035\uffe3\036\uffe3" +
    "\040\uffe3\042\uffe3\050\uffe3\056\uffe3\060\uffe3\064\uffe3\065" +
    "\uffe3\001\002\000\040\003\ufff2\005\ufff2\006\ufff2\013\ufff2" +
    "\017\ufff2\025\ufff2\030\ufff2\035\107\040\ufff2\042\ufff2\050" +
    "\ufff2\056\ufff2\060\ufff2\064\ufff2\065\ufff2\001\002\000\046" +
    "\003\uffe5\005\uffe5\006\uffe5\013\uffe5\017\uffe5\025\uffe5\030" +
    "\uffe5\033\uffe5\034\104\035\uffe5\036\uffe5\040\uffe5\042\uffe5" +
    "\050\uffe5\056\uffe5\060\uffe5\064\uffe5\065\uffe5\001\002\000" +
    "\044\003\uffe7\005\uffe7\006\uffe7\013\uffe7\017\uffe7\025\uffe7" +
    "\030\uffe7\033\102\035\uffe7\036\uffe7\040\uffe7\042\uffe7\050" +
    "\uffe7\056\uffe7\060\uffe7\064\uffe7\065\uffe7\001\002\000\016" +
    "\031\046\032\062\046\064\047\065\055\057\057\066\001" +
    "\002\000\042\003\uffe9\005\uffe9\006\uffe9\013\uffe9\017\uffe9" +
    "\025\uffe9\030\uffe9\035\uffe9\036\100\040\uffe9\042\uffe9\050" +
    "\uffe9\056\uffe9\060\uffe9\064\uffe9\065\uffe9\001\002\000\004" +
    "\060\076\001\002\000\004\053\071\001\002\000\036\003" +
    "\ufff1\005\ufff1\006\ufff1\013\ufff1\017\ufff1\025\ufff1\030\ufff1" +
    "\040\ufff1\042\ufff1\050\ufff1\056\ufff1\060\ufff1\064\ufff1\065" +
    "\ufff1\001\002\000\052\003\uffdb\005\uffdb\006\uffdb\013\uffdb" +
    "\017\uffdb\025\uffdb\030\uffdb\033\uffdb\034\uffdb\035\uffdb\036" +
    "\uffdb\040\uffdb\042\uffdb\050\uffdb\051\uffdb\054\uffdb\056\uffdb" +
    "\060\uffdb\064\uffdb\065\uffdb\001\002\000\052\003\uffda\005" +
    "\uffda\006\uffda\013\uffda\017\uffda\025\uffda\030\uffda\033\uffda" +
    "\034\uffda\035\uffda\036\uffda\040\uffda\042\uffda\050\uffda\051" +
    "\uffda\054\uffda\056\uffda\060\uffda\064\uffda\065\uffda\001\002" +
    "\000\010\046\064\047\065\055\057\001\002\000\004\060" +
    "\070\001\002\000\052\003\uffde\005\uffde\006\uffde\013\uffde" +
    "\017\uffde\025\uffde\030\uffde\033\uffde\034\uffde\035\uffde\036" +
    "\uffde\040\uffde\042\uffde\050\uffde\051\uffde\054\uffde\056\uffde" +
    "\060\uffde\064\uffde\065\uffde\001\002\000\012\046\064\047" +
    "\065\055\057\057\066\001\002\000\004\051\073\001\002" +
    "\000\012\046\064\047\065\055\057\057\066\001\002\000" +
    "\004\054\075\001\002\000\052\003\uffe0\005\uffe0\006\uffe0" +
    "\013\uffe0\017\uffe0\025\uffe0\030\uffe0\033\uffe0\034\uffe0\035" +
    "\uffe0\036\uffe0\040\uffe0\042\uffe0\050\uffe0\051\uffe0\054\uffe0" +
    "\056\uffe0\060\uffe0\064\uffe0\065\uffe0\001\002\000\004\050" +
    "\077\001\002\000\010\004\ufff9\005\ufff9\047\ufff9\001\002" +
    "\000\016\031\046\032\062\046\064\047\065\055\057\057" +
    "\066\001\002\000\044\003\uffe8\005\uffe8\006\uffe8\013\uffe8" +
    "\017\uffe8\025\uffe8\030\uffe8\033\102\035\uffe8\036\uffe8\040" +
    "\uffe8\042\uffe8\050\uffe8\056\uffe8\060\uffe8\064\uffe8\065\uffe8" +
    "\001\002\000\016\031\046\032\062\046\064\047\065\055" +
    "\057\057\066\001\002\000\046\003\uffe6\005\uffe6\006\uffe6" +
    "\013\uffe6\017\uffe6\025\uffe6\030\uffe6\033\uffe6\034\104\035" +
    "\uffe6\036\uffe6\040\uffe6\042\uffe6\050\uffe6\056\uffe6\060\uffe6" +
    "\064\uffe6\065\uffe6\001\002\000\016\031\046\032\062\046" +
    "\064\047\065\055\057\057\066\001\002\000\046\003\uffe4" +
    "\005\uffe4\006\uffe4\013\uffe4\017\uffe4\025\uffe4\030\uffe4\033" +
    "\uffe4\034\uffe4\035\uffe4\036\uffe4\040\uffe4\042\uffe4\050\uffe4" +
    "\056\uffe4\060\uffe4\064\uffe4\065\uffe4\001\002\000\006\035" +
    "\107\056\110\001\002\000\016\031\046\032\062\046\064" +
    "\047\065\055\057\057\066\001\002\000\052\003\uffdc\005" +
    "\uffdc\006\uffdc\013\uffdc\017\uffdc\025\uffdc\030\uffdc\033\uffdc" +
    "\034\uffdc\035\uffdc\036\uffdc\040\uffdc\042\uffdc\050\uffdc\051" +
    "\uffdc\054\uffdc\056\uffdc\060\uffdc\064\uffdc\065\uffdc\001\002" +
    "\000\042\003\uffea\005\uffea\006\uffea\013\uffea\017\uffea\025" +
    "\uffea\030\uffea\035\uffea\036\100\040\uffea\042\uffea\050\uffea" +
    "\056\uffea\060\uffea\064\uffea\065\uffea\001\002\000\004\051" +
    "\113\001\002\000\004\047\114\001\002\000\004\055\115" +
    "\001\002\000\010\046\120\051\uffec\056\uffec\001\002\000" +
    "\004\054\117\001\002\000\036\003\ufff0\005\ufff0\006\ufff0" +
    "\013\ufff0\017\ufff0\025\ufff0\030\ufff0\040\ufff0\042\ufff0\050" +
    "\ufff0\056\ufff0\060\ufff0\064\ufff0\065\ufff0\001\002\000\006" +
    "\051\uffeb\056\uffeb\001\002\000\006\051\123\056\124\001" +
    "\002\000\006\051\uffed\056\uffed\001\002\000\010\046\120" +
    "\051\uffec\056\uffec\001\002\000\004\054\uffef\001\002\000" +
    "\006\051\uffee\056\uffee\001\002\000\014\032\062\046\064" +
    "\047\065\055\057\057\066\001\002\000\004\051\130\001" +
    "\002\000\014\032\062\046\064\047\065\055\057\057\066" +
    "\001\002\000\004\054\132\001\002\000\046\003\uffe2\005" +
    "\uffe2\006\uffe2\013\uffe2\017\uffe2\025\uffe2\030\uffe2\033\uffe2" +
    "\034\uffe2\035\uffe2\036\uffe2\040\uffe2\042\uffe2\050\uffe2\056" +
    "\uffe2\060\uffe2\064\uffe2\065\uffe2\001\002\000\006\051\ufff6" +
    "\056\ufff6\001\002\000\010\004\ufffb\005\ufffb\047\ufffb\001" +
    "\002\000\004\005\142\001\002\000\004\005\u0164\001\002" +
    "\000\004\005\u0161\001\002\000\004\005\uffce\001\002\000" +
    "\004\005\u015e\001\002\000\014\007\145\011\147\016\150" +
    "\024\146\037\144\001\002\000\004\005\uffcc\001\002\000" +
    "\016\013\u0103\017\u0108\025\u0109\030\u0128\040\u0106\042\u0104" +
    "\001\002\000\004\030\u011b\001\002\000\020\012\257\017" +
    "\267\021\265\023\260\025\266\026\262\030\264\001\002" +
    "\000\004\005\233\001\002\000\004\005\151\001\002\000" +
    "\004\005\154\001\002\000\004\005\230\001\002\000\004" +
    "\005\uff9c\001\002\000\020\012\163\014\157\017\162\020" +
    "\161\021\155\022\156\023\160\001\002\000\004\005\222" +
    "\001\002\000\004\005\215\001\002\000\004\005\210\001" +
    "\002\000\004\005\203\001\002\000\004\005\176\001\002" +
    "\000\004\005\171\001\002\000\004\005\164\001\002\000" +
    "\004\046\165\001\002\000\004\005\166\001\002\000\004" +
    "\012\167\001\002\000\004\006\170\001\002\000\004\005" +
    "\uff9b\001\002\000\004\045\172\001\002\000\004\005\173" +
    "\001\002\000\004\017\174\001\002\000\004\006\175\001" +
    "\002\000\004\005\uff9a\001\002\000\004\045\177\001\002" +
    "\000\004\005\200\001\002\000\004\020\201\001\002\000" +
    "\004\006\202\001\002\000\004\005\uff99\001\002\000\004" +
    "\045\204\001\002\000\004\005\205\001\002\000\004\023" +
    "\206\001\002\000\004\006\207\001\002\000\004\005\uff95" +
    "\001\002\000\004\047\211\001\002\000\004\005\212\001" +
    "\002\000\004\014\213\001\002\000\004\006\214\001\002" +
    "\000\004\005\uff98\001\002\000\004\044\216\001\002\000" +
    "\004\005\217\001\002\000\004\022\220\001\002\000\004" +
    "\006\221\001\002\000\004\005\uff96\001\002\000\004\046" +
    "\223\001\002\000\004\005\224\001\002\000\004\021\225" +
    "\001\002\000\004\006\226\001\002\000\004\005\uff97\001" +
    "\002\000\004\005\uff9d\001\002\000\022\012\163\014\157" +
    "\016\231\017\162\020\161\021\155\022\156\023\160\001" +
    "\002\000\004\006\232\001\002\000\004\005\uff9f\001\002" +
    "\000\004\005\236\001\002\000\004\005\254\001\002\000" +
    "\004\005\uff93\001\002\000\006\012\240\014\237\001\002" +
    "\000\004\005\246\001\002\000\004\005\241\001\002\000" +
    "\004\046\242\001\002\000\004\005\243\001\002\000\004" +
    "\012\244\001\002\000\004\006\245\001\002\000\004\005" +
    "\uff92\001\002\000\004\047\247\001\002\000\004\005\250" +
    "\001\002\000\004\014\251\001\002\000\004\006\252\001" +
    "\002\000\004\005\uff91\001\002\000\004\005\uff94\001\002" +
    "\000\010\011\255\012\240\014\237\001\002\000\004\006" +
    "\256\001\002\000\004\005\uff9e\001\002\000\004\052\u0100" +
    "\001\002\000\004\052\376\001\002\000\006\006\uffc0\051" +
    "\uffc0\001\002\000\004\052\374\001\002\000\006\006\uffca" +
    "\051\370\001\002\000\004\052\300\001\002\000\004\052" +
    "\276\001\002\000\004\052\274\001\002\000\004\052\272" +
    "\001\002\000\004\006\271\001\002\000\004\005\uffcd\001" +
    "\002\000\004\045\273\001\002\000\006\006\uffbc\051\uffbc" +
    "\001\002\000\004\046\275\001\002\000\006\006\uffbe\051" +
    "\uffbe\001\002\000\004\046\277\001\002\000\006\006\uffba" +
    "\051\uffba\001\002\000\010\072\303\073\302\074\304\001" +
    "\002\000\006\006\uffbf\051\uffbf\001\002\000\024\005\uffa1" +
    "\006\uffa1\013\uffa1\017\uffa1\025\uffa1\030\uffa1\040\uffa1\042" +
    "\uffa1\051\uffa1\001\002\000\004\005\305\001\002\000\024" +
    "\005\uffa0\006\uffa0\013\uffa0\017\uffa0\025\uffa0\030\uffa0\040" +
    "\uffa0\042\uffa0\051\uffa0\001\002\000\004\005\306\001\002" +
    "\000\016\017\320\021\313\023\314\025\317\026\321\027" +
    "\315\001\002\000\004\005\311\001\002\000\004\005\uffc8" +
    "\001\002\000\020\017\320\021\313\023\314\024\316\025" +
    "\317\026\321\027\315\001\002\000\004\005\uffc9\001\002" +
    "\000\004\005\363\001\002\000\004\005\356\001\002\000" +
    "\004\005\351\001\002\000\004\006\uffcb\001\002\000\004" +
    "\005\344\001\002\000\004\005\327\001\002\000\004\005" +
    "\322\001\002\000\020\031\046\032\062\046\064\047\065" +
    "\053\052\055\057\057\066\001\002\000\004\005\324\001" +
    "\002\000\004\026\325\001\002\000\004\006\326\001\002" +
    "\000\004\005\uffc6\001\002\000\012\045\331\046\330\053" +
    "\333\063\332\001\002\000\034\003\uffb8\005\uffb8\006\uffb8" +
    "\013\uffb8\017\uffb8\025\uffb8\030\uffb8\040\uffb8\042\uffb8\050" +
    "\uffb8\056\uffb8\064\uffb8\065\uffb8\001\002\000\034\003\uffb9" +
    "\005\uffb9\006\uffb9\013\uffb9\017\uffb9\025\uffb9\030\uffb9\040" +
    "\uffb9\042\uffb9\050\uffb9\056\uffb9\064\uffb9\065\uffb9\001\002" +
    "\000\034\003\uffb7\005\uffb7\006\uffb7\013\uffb7\017\uffb7\025" +
    "\uffb7\030\uffb7\040\uffb7\042\uffb7\050\uffb7\056\uffb7\064\uffb7" +
    "\065\uffb7\001\002\000\004\047\340\001\002\000\004\005" +
    "\335\001\002\000\004\017\336\001\002\000\004\006\337" +
    "\001\002\000\004\005\uffc5\001\002\000\004\051\341\001" +
    "\002\000\004\047\342\001\002\000\004\054\343\001\002" +
    "\000\034\003\uffb6\005\uffb6\006\uffb6\013\uffb6\017\uffb6\025" +
    "\uffb6\030\uffb6\040\uffb6\042\uffb6\050\uffb6\056\uffb6\064\uffb6" +
    "\065\uffb6\001\002\000\020\031\046\032\062\046\064\047" +
    "\065\053\052\055\057\057\066\001\002\000\004\005\346" +
    "\001\002\000\004\025\347\001\002\000\004\006\350\001" +
    "\002\000\004\005\uffc7\001\002\000\004\047\352\001\002" +
    "\000\004\005\353\001\002\000\004\027\354\001\002\000" +
    "\004\006\355\001\002\000\004\005\uffc2\001\002\000\012" +
    "\045\331\046\330\053\333\063\332\001\002\000\004\005" +
    "\360\001\002\000\004\023\361\001\002\000\004\006\362" +
    "\001\002\000\004\005\uffc4\001\002\000\020\031\046\032" +
    "\062\046\064\047\065\053\052\055\057\057\066\001\002" +
    "\000\004\005\365\001\002\000\004\021\366\001\002\000" +
    "\004\006\367\001\002\000\004\005\uffc3\001\002\000\016" +
    "\017\267\021\265\023\260\025\266\026\262\030\371\001" +
    "\002\000\004\052\373\001\002\000\006\006\uffc1\051\uffc1" +
    "\001\002\000\006\073\302\074\304\001\002\000\004\046" +
    "\375\001\002\000\006\006\uffbd\051\uffbd\001\002\000\004" +
    "\045\377\001\002\000\006\006\uffbb\051\uffbb\001\002\000" +
    "\004\046\u0101\001\002\000\004\005\u0102\001\002\000\016" +
    "\013\u0103\017\u0108\025\u0109\030\u0107\040\u0106\042\u0104\001" +
    "\002\000\004\052\u0119\001\002\000\004\052\u0117\001\002" +
    "\000\020\005\u0113\013\u0103\017\u0108\025\u0109\030\u0107\040" +
    "\u0106\042\u0104\001\002\000\004\052\u0111\001\002\000\004" +
    "\052\u010f\001\002\000\004\052\u010d\001\002\000\004\052" +
    "\u010b\001\002\000\022\005\uffa8\006\uffa8\013\uffa8\017\uffa8" +
    "\025\uffa8\030\uffa8\040\uffa8\042\uffa8\001\002\000\004\046" +
    "\u010c\001\002\000\022\005\uffa6\006\uffa6\013\uffa6\017\uffa6" +
    "\025\uffa6\030\uffa6\040\uffa6\042\uffa6\001\002\000\004\045" +
    "\u010e\001\002\000\022\005\uffa4\006\uffa4\013\uffa4\017\uffa4" +
    "\025\uffa4\030\uffa4\040\uffa4\042\uffa4\001\002\000\006\073" +
    "\302\074\304\001\002\000\022\005\uffa7\006\uffa7\013\uffa7" +
    "\017\uffa7\025\uffa7\030\uffa7\040\uffa7\042\uffa7\001\002\000" +
    "\020\031\046\032\062\046\064\047\065\053\052\055\057" +
    "\057\066\001\002\000\022\005\uffa2\006\uffa2\013\uffa2\017" +
    "\uffa2\025\uffa2\030\uffa2\040\uffa2\042\uffa2\001\002\000\004" +
    "\024\u0115\001\002\000\022\005\uffa9\006\uffa9\013\uffa9\017" +
    "\uffa9\025\uffa9\030\uffa9\040\uffa9\042\uffa9\001\002\000\004" +
    "\006\u0116\001\002\000\004\005\uffb3\001\002\000\012\045" +
    "\331\046\330\053\333\063\332\001\002\000\022\005\uffa3" +
    "\006\uffa3\013\uffa3\017\uffa3\025\uffa3\030\uffa3\040\uffa3\042" +
    "\uffa3\001\002\000\004\046\u011a\001\002\000\022\005\uffa5" +
    "\006\uffa5\013\uffa5\017\uffa5\025\uffa5\030\uffa5\040\uffa5\042" +
    "\uffa5\001\002\000\004\052\u011c\001\002\000\004\045\u011d" +
    "\001\002\000\004\026\u0120\001\002\000\004\006\u011f\001" +
    "\002\000\004\005\uffd3\001\002\000\004\052\u0121\001\002" +
    "\000\004\046\u0122\001\002\000\006\006\uffd1\013\u0123\001" +
    "\002\000\004\052\u0125\001\002\000\004\006\uffd2\001\002" +
    "\000\004\046\u0126\001\002\000\004\006\uffd0\001\002\000" +
    "\020\006\u015c\013\u0103\017\u0108\025\u0109\030\u0107\040\u0106" +
    "\042\u0104\001\002\000\004\052\u0129\001\002\000\010\072" +
    "\u012a\073\302\074\304\001\002\000\004\005\u012b\001\002" +
    "\000\004\005\u012d\001\002\000\004\005\uffb1\001\002\000" +
    "\020\017\u0137\025\u0136\027\u0134\040\u0133\041\u0135\042\u0131" +
    "\043\u0132\001\002\000\004\005\u0130\001\002\000\004\005" +
    "\uffb2\001\002\000\022\006\u0138\017\u0137\025\u0136\027\u0134" +
    "\040\u0133\041\u0135\042\u0131\043\u0132\001\002\000\004\005" +
    "\u0157\001\002\000\004\005\u0152\001\002\000\004\005\u014d" +
    "\001\002\000\004\005\u0148\001\002\000\004\005\u0143\001" +
    "\002\000\004\005\u013e\001\002\000\004\005\u0139\001\002" +
    "\000\004\005\uffb5\001\002\000\012\045\331\046\330\053" +
    "\333\063\332\001\002\000\004\005\u013b\001\002\000\004" +
    "\017\u013c\001\002\000\004\006\u013d\001\002\000\004\005" +
    "\uffaf\001\002\000\020\031\046\032\062\046\064\047\065" +
    "\053\052\055\057\057\066\001\002\000\004\005\u0140\001" +
    "\002\000\004\025\u0141\001\002\000\004\006\u0142\001\002" +
    "\000\004\005\uffb0\001\002\000\012\045\331\046\330\053" +
    "\333\063\332\001\002\000\004\005\u0145\001\002\000\004" +
    "\041\u0146\001\002\000\004\006\u0147\001\002\000\004\005" +
    "\uffad\001\002\000\004\047\u0149\001\002\000\004\005\u014a" +
    "\001\002\000\004\027\u014b\001\002\000\004\006\u014c\001" +
    "\002\000\004\005\uffaa\001\002\000\020\031\046\032\062" +
    "\046\064\047\065\053\052\055\057\057\066\001\002\000" +
    "\004\005\u014f\001\002\000\004\040\u0150\001\002\000\004" +
    "\006\u0151\001\002\000\004\005\uffae\001\002\000\020\031" +
    "\046\032\062\046\064\047\065\053\052\055\057\057\066" +
    "\001\002\000\004\005\u0154\001\002\000\004\043\u0155\001" +
    "\002\000\004\006\u0156\001\002\000\004\005\uffac\001\002" +
    "\000\012\045\331\046\330\053\333\063\332\001\002\000" +
    "\004\005\u0159\001\002\000\004\042\u015a\001\002\000\004" +
    "\006\u015b\001\002\000\004\005\uffab\001\002\000\004\005" +
    "\uffb4\001\002\000\004\005\uffcf\001\002\000\010\010\u015f" +
    "\024\146\037\144\001\002\000\004\006\u0160\001\002\000" +
    "\010\002\uffd9\003\uffd9\005\uffd9\001\002\000\004\010\u0162" +
    "\001\002\000\004\006\u0163\001\002\000\010\002\uffd6\003" +
    "\uffd6\005\uffd6\001\002\000\004\010\u0165\001\002\000\004" +
    "\006\u0166\001\002\000\010\002\uffd7\003\uffd7\005\uffd7\001" +
    "\002\000\004\067\u0168\001\002\000\004\070\u016d\001\002" +
    "\000\004\005\u016a\001\002\000\004\062\u016b\001\002\000" +
    "\004\006\u016c\001\002\000\010\002\uffd8\003\uffd8\005\uffd8" +
    "\001\002\000\010\015\u0170\024\u0171\037\u016e\001\002\000" +
    "\034\012\uff8d\013\uff8d\017\uff8d\020\uff8d\021\uff8d\022\uff8d" +
    "\023\uff8d\025\uff8d\040\uff8d\043\uff8d\050\uff8d\066\uff8d\071" +
    "\uff8d\001\002\000\034\012\u0173\013\u017e\017\u017d\020\u017f" +
    "\021\u017a\022\u0177\023\u0174\025\u017b\040\u0176\043\u0178\050" +
    "\uff8c\066\u017c\071\u0172\001\002\000\034\012\uff8f\013\uff8f" +
    "\017\uff8f\020\uff8f\021\uff8f\022\uff8f\023\uff8f\025\uff8f\040" +
    "\uff8f\043\uff8f\050\uff8f\066\uff8f\071\uff8f\001\002\000\034" +
    "\012\uff8e\013\uff8e\017\uff8e\020\uff8e\021\uff8e\022\uff8e\023" +
    "\uff8e\025\uff8e\040\uff8e\043\uff8e\050\uff8e\066\uff8e\071\uff8e" +
    "\001\002\000\040\003\uff8c\012\u0173\013\u017e\017\u017d\020" +
    "\u017f\021\u017a\022\u0177\023\u0174\025\u017b\040\u0176\043\u0178" +
    "\064\uff8c\065\uff8c\066\u017c\071\u0172\001\002\000\004\052" +
    "\u019f\001\002\000\004\052\u019c\001\002\000\012\003\uff8a" +
    "\050\uff8a\064\uff8a\065\uff8a\001\002\000\004\052\u0199\001" +
    "\002\000\004\052\u0196\001\002\000\004\052\u0193\001\002" +
    "\000\004\050\u0192\001\002\000\004\052\u018f\001\002\000" +
    "\004\052\u018c\001\002\000\004\055\u0189\001\002\000\004" +
    "\052\u0186\001\002\000\004\052\u0183\001\002\000\004\052" +
    "\u0180\001\002\000\004\052\u0181\001\002\000\012\045\331" +
    "\046\330\053\333\063\332\001\002\000\014\003\uff86\050" +
    "\uff86\056\uff86\064\uff86\065\uff86\001\002\000\004\052\u0184" +
    "\001\002\000\012\045\331\046\330\053\333\063\332\001" +
    "\002\000\014\003\uff81\050\uff81\056\uff81\064\uff81\065\uff81" +
    "\001\002\000\004\052\u0187\001\002\000\012\045\331\046" +
    "\330\053\333\063\332\001\002\000\014\003\uff87\050\uff87" +
    "\056\uff87\064\uff87\065\uff87\001\002\000\030\012\u0173\013" +
    "\u017e\017\u017d\020\u017f\021\u017a\022\u0177\023\u0174\025\u017b" +
    "\040\u0176\043\u0178\066\u017c\001\002\000\004\056\u018b\001" +
    "\002\000\014\003\uff89\050\uff89\056\uff89\064\uff89\065\uff89" +
    "\001\002\000\004\052\u018d\001\002\000\012\045\331\046" +
    "\330\053\333\063\332\001\002\000\014\003\uff82\050\uff82" +
    "\056\uff82\064\uff82\065\uff82\001\002\000\004\052\u0190\001" +
    "\002\000\020\031\046\032\062\046\064\047\065\053\052" +
    "\055\057\057\066\001\002\000\014\003\uff85\050\uff85\056" +
    "\uff85\064\uff85\065\uff85\001\002\000\004\005\uff90\001\002" +
    "\000\004\052\u0194\001\002\000\020\031\046\032\062\046" +
    "\064\047\065\053\052\055\057\057\066\001\002\000\014" +
    "\003\uff7f\050\uff7f\056\uff7f\064\uff7f\065\uff7f\001\002\000" +
    "\004\052\u0197\001\002\000\012\045\331\046\330\053\333" +
    "\063\332\001\002\000\014\003\uff84\050\uff84\056\uff84\064" +
    "\uff84\065\uff84\001\002\000\004\052\u019a\001\002\000\020" +
    "\031\046\032\062\046\064\047\065\053\052\055\057\057" +
    "\066\001\002\000\014\003\uff80\050\uff80\056\uff80\064\uff80" +
    "\065\uff80\001\002\000\004\052\u019d\001\002\000\012\045" +
    "\331\046\330\053\333\063\332\001\002\000\014\003\uff83" +
    "\050\uff83\056\uff83\064\uff83\065\uff83\001\002\000\004\052" +
    "\u01a0\001\002\000\020\031\046\032\062\046\064\047\065" +
    "\053\052\055\057\057\066\001\002\000\014\003\uff88\050" +
    "\uff88\056\uff88\064\uff88\065\uff88\001\002\000\010\003\u01a4" +
    "\064\u01a3\065\u01a6\001\002\000\030\012\uff7d\013\uff7d\017" +
    "\uff7d\020\uff7d\021\uff7d\022\uff7d\023\uff7d\025\uff7d\040\uff7d" +
    "\043\uff7d\066\uff7d\001\002\000\004\050\u01a8\001\002\000" +
    "\030\012\u0173\013\u017e\017\u017d\020\u017f\021\u017a\022\u0177" +
    "\023\u0174\025\u017b\040\u0176\043\u0178\066\u017c\001\002\000" +
    "\030\012\uff7e\013\uff7e\017\uff7e\020\uff7e\021\uff7e\022\uff7e" +
    "\023\uff7e\025\uff7e\040\uff7e\043\uff7e\066\uff7e\001\002\000" +
    "\012\003\uff8b\050\uff8b\064\uff8b\065\uff8b\001\002\000\004" +
    "\005\u01a9\001\002\000\030\012\uff7c\013\uff7c\017\uff7c\020" +
    "\uff7c\021\uff7c\022\uff7c\023\uff7c\025\uff7c\040\uff7c\043\uff7c" +
    "\066\uff7c\001\002\000\010\002\uffd4\003\uffd4\005\uffd4\001" +
    "\002\000\010\002\uffd5\003\uffd5\005\uffd5\001\002\000\010" +
    "\002\uffff\003\uffff\005\uffff\001\002\000\006\010\012\062" +
    "\011\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01ac\000\010\002\003\003\005\015\004\001\001\000" +
    "\002\001\001\000\004\003\u01ab\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\057\016\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\060\025\061\023\001\001\000\004\060\133\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\047\037" +
    "\052\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\047\132\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\033\060\034\053\035\057\036" +
    "\055\037\054\040\052\041\050\042\047\043\046\051\062" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\034\105\035\057\036\055\037\054\040\052\041\050" +
    "\042\047\043\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\043\066\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\042\071\043\046\001\001" +
    "\000\002\001\001\000\006\042\073\043\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\036\100\037\054\040\052\041\050\042" +
    "\047\043\046\001\001\000\002\001\001\000\014\037\102" +
    "\040\052\041\050\042\047\043\046\001\001\000\002\001" +
    "\001\000\012\040\104\041\050\042\047\043\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\035\110\036" +
    "\055\037\054\040\052\041\050\042\047\043\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\055\115\001\001\000\006\053\120" +
    "\054\121\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\054\124\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\041\126\042\047\043\046\001\001\000\002\001\001" +
    "\000\010\041\130\042\047\043\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\004\140\005\137\007\142\016\136\044\135\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\u015c\007\142\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\023\u0126\024\u0109\001\001\000\002" +
    "\001\001\000\010\006\267\027\262\030\260\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\017\151\020\152" +
    "\001\001\000\004\020\226\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\021\233\022\234\001\001" +
    "\000\004\022\252\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\050\300\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\031\306\032\307\001\001\000\002\001\001\000\004" +
    "\032\311\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\033\322\034\053\035\057" +
    "\036\055\037\054\040\052\041\050\042\047\043\046\051" +
    "\062\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\046\333\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\033\344\034" +
    "\053\035\057\036\055\037\054\040\052\041\050\042\047" +
    "\043\046\051\062\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\046\356\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\033\363\034\053\035\057\036\055\037\054\040\052" +
    "\041\050\042\047\043\046\051\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\030\371\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\050\300\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\023\u0104\024\u0109\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\024\u0113\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\050\u010f\001\001\000\002\001\001\000\026\033\u0111\034" +
    "\053\035\057\036\055\037\054\040\052\041\050\042\047" +
    "\043\046\051\062\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\046\u0117\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\056\u011d" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\045\u0123" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\u0113\001\001\000\002" +
    "\001\001\000\004\050\u010f\001\001\000\002\001\001\000" +
    "\006\025\u012d\026\u012b\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\026\u012e\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\046\u0139" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\033\u013e\034\053\035\057" +
    "\036\055\037\054\040\052\041\050\042\047\043\046\051" +
    "\062\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\046\u0143\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\033\u014d" +
    "\034\053\035\057\036\055\037\054\040\052\041\050\042" +
    "\047\043\046\051\062\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\033" +
    "\u0152\034\053\035\057\036\055\037\054\040\052\041\050" +
    "\042\047\043\046\051\062\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\046\u0157\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\u0168\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\u016e\001\001\000\002\001\001\000\006\012\u0178" +
    "\013\u0174\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\012\u01a1\013\u0174\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\046\u0181\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\046\u0184\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\046\u0187\001\001\000\002\001\001\000\004\013" +
    "\u0189\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\046\u018d\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\033\u0190\034\053\035\057\036\055" +
    "\037\054\040\052\041\050\042\047\043\046\051\062\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\033\u0194\034\053\035\057\036\055\037\054\040" +
    "\052\041\050\042\047\043\046\051\062\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\046\u0197\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\033\u019a\034\053" +
    "\035\057\036\055\037\054\040\052\041\050\042\047\043" +
    "\046\051\062\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\046\u019d\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\033\u01a0\034\053\035\057\036\055\037\054" +
    "\040\052\041\050\042\047\043\046\051\062\001\001\000" +
    "\002\001\001\000\004\014\u01a4\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\u01a6\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico_compilador$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico_compilador$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico_compilador$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /**Metodo al que se llama automáticamente ante algún error sintactico.*/
    @Override
    public void syntax_error(Symbol s){
		System.out.println("Error en la Línea " + (s.right+1) +" Columna "+s.left+ ". Identificador "
        +s.value + " no reconocido.");
    }

    /**Metodo al que se llama en el momento en que ya no es posible una recuperación de
    @Override
    errores.*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
		System.out.println("Error en la Línea " + (s.right+1)+ "Columna "+s.left+". Identificador " +
        s.value + " no reconocido.");
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintactico_compilador$actions {


    Tabla_Hash_compilador hash_compi = new Tabla_Hash_compilador();
    ArrayList<String> errores = new ArrayList();
    private Enlace_Envio enlace=new Enlace_Envio();
        		

  private final AnalizadorSintactico_compilador parser;

  /** Constructor */
  CUP$AnalizadorSintactico_compilador$actions(AnalizadorSintactico_compilador parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico_compilador$do_action(
    int                        CUP$AnalizadorSintactico_compilador$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico_compilador$parser,
    java.util.Stack            CUP$AnalizadorSintactico_compilador$stack,
    int                        CUP$AnalizadorSintactico_compilador$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico_compilador$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico_compilador$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // OL ::= error pyc DI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).value;
		//errores.add("Operador Logico Invalido " e.toString());
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("OL",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // OL ::= AND 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("OL",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // OL ::= OR 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("OL",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // COMPARAP ::= tamano igual igual EQ 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("COMPARAP",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // COMPARAP ::= cantidad igual igual EQ 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("COMPARAP",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // COMPARAP ::= sucursal igual igual CONSM 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("COMPARAP",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // COMPARAP ::= codigo igual igual CONSM 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("COMPARAP",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // COMPARAP ::= direccion igual igual CONSM 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("COMPARAP",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // COMPARAP ::= email igual igual CONSM 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("COMPARAP",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // COMPARAP ::= telefono igual igual EQ 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("COMPARAP",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // COMPARAP ::= apellido igual igual CONSM 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("COMPARAP",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // COMPARAP ::= nombre igual igual CONSM 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("COMPARAP",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // COMPARAP ::= id igual igual EQ 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("COMPARAP",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // COMPARAP ::= NOT parentesisi COMPARAP parentesisf 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("COMPARAP",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // COMPARA ::= COMPARAP 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("COMPARA",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // COMPARA ::= donde COMPARA OL COMPARAP 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("COMPARA",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // COMPARA ::= 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("COMPARA",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // CONSULTAS ::= producto 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONSULTAS",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // CONSULTAS ::= tienda 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONSULTAS",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // CONSULTAS ::= usuario 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONSULTAS",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // CONSULTA ::= extraer de CONSULTAS COMPARA pyc 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONSULTA",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // LOGINP ::= DI password DI identificador DI password DF 
            {
              Usuario RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).value;
		  
                    RESULT = new Usuario();
                    RESULT.setPassword((String)val);

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("LOGINP",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // LOGINP ::= DI id DI numero DI id DF 
            {
              Usuario RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).value;
		
                    RESULT = new Usuario();
                    RESULT.setId(Integer.parseInt(val));

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("LOGINP",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // LOGIN ::= LOGINP 
            {
              Usuario RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		Usuario val = (Usuario)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                    RESULT = val;

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("LOGIN",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // LOGIN ::= LOGIN LOGINP 
            {
              Usuario RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).right;
		Usuario val1 = (Usuario)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		Usuario val2 = (Usuario)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		

                    RESULT= new Usuario();
                    if(val1.getId()==0 && val2.getId()!=0){
                        RESULT.setId(val2.getId());
                    }else if(val1.getId()!=0 && val2.getId()==0){
                        RESULT.setId(val1.getId());
                    }else{
                        errores.add("Atributos ingresado para login incorrectos");
                    }
                    if(val1.getPassword().equals("vacio") && !val2.getPassword().equals("vacio")){
                        RESULT.setPassword(val2.getPassword());
                    }else if(!val1.getPassword().equals("vacio") && val2.getPassword().equals("vacio")){
                        RESULT.setPassword(val1.getPassword());    
                    }else{
                        errores.add("Atributos ingresados para login erroneos");
                    }
                    if(RESULT.getId()==0 || RESULT.getPassword()==null){
                        errores.add("ERROR EN INGRESO DE DATOS PARA LOGEAR, FALLO CRITICO");
                    }


              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("LOGIN",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // REGISUSUP ::= DI direccion DI cadena DI direccion DF 
            {
              Usuario RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).value;
		
                    RESULT = new Usuario();
                    RESULT.setDirreccion(val.replace("\"",""));

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("REGISUSUP",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // REGISUSUP ::= DI email DI correo DI email DF 
            {
              Usuario RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).value;
		
                    RESULT = new Usuario();
                    RESULT.setEmail(val);

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("REGISUSUP",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // REGISUSUP ::= DI telefono DI numero DI telefono DF 
            {
              Usuario RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).value;
		
                    RESULT = new Usuario();
                    RESULT.setTelefono(Integer.parseInt(val));

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("REGISUSUP",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // REGISUSUP ::= DI password DI identificador DI password DF 
            {
              Usuario RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).value;
		
                    RESULT = new Usuario();
                    RESULT.setPassword(val);

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("REGISUSUP",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // REGISUSUP ::= DI apellido DI cadena DI apellido DF 
            {
              Usuario RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).value;
		
                    RESULT = new Usuario();
                    RESULT.setApellido(val.replace("\"",""));

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("REGISUSUP",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // REGISUSUP ::= DI nombre DI cadena DI nombre DF 
            {
              Usuario RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).value;
		
                    RESULT = new Usuario();
                    RESULT.setNombre(val.replace("\"",""));

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("REGISUSUP",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // REGISUSUP ::= DI id DI numero DI id DF 
            {
              Usuario RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).value;
		
                    RESULT = new Usuario();
                    RESULT.setId(Integer.parseInt(val));

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("REGISUSUP",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // REGISUSU ::= REGISUSUP 
            {
              Usuario RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		Usuario val = (Usuario)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                    RESULT = val;

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("REGISUSU",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // REGISUSU ::= REGISUSU REGISUSUP 
            {
              Usuario RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).right;
		Usuario val1 = (Usuario)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		Usuario val2 = (Usuario)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                    RESULT = val1;
                    if(val2.getId()!=0 && RESULT.getId()==0){
                        RESULT.setId(val2.getId());
                    }else if(val2.getId()!=0 && RESULT.getId()!=0){
                        errores.add("Atributo id declarado mas de una vez");
                    }
                    if(!val2.getNombre().equals("vacio") && RESULT.getNombre().equals("vacio")){
                        RESULT.setNombre(val2.getNombre());
                    }else if(!val2.getNombre().equals("vacio") && !RESULT.getNombre().equals("vacio")){
                        errores.add("Atributo nombre Declarado mas una vez");
                    }
                    if(!val2.getApellido().equals("vacio") && RESULT.getApellido().equals("vacio")){
                        RESULT.setApellido(val2.getApellido());
                    }else if(!val2.getApellido().equals("vacio") && !RESULT.getApellido().equals("vacio")){
                        errores.add("Atributo Apellido declarado mas de una vez");
                    }
                    if(!val2.getPassword().equals("vacio") && RESULT.getPassword().equals("vacio")){
                        RESULT.setPassword(val2.getPassword());
                    }else if(!val2.getPassword().equals("vacio") && !RESULT.getPassword().equals("vacio")){
                        errores.add("Atributo apssword declarado mas de una vez");
                    }
                    if(val2.getTelefono()!=0 && RESULT.getTelefono()==0){
                        RESULT.setTelefono(val2.getTelefono());
                    }else if(val2.getTelefono()!=0 && RESULT.getTelefono()!=0){
                        errores.add("atributo Telefono declarado mas de una vez");
                    }
                    if(!val2.getEmail().equals("vacio") && RESULT.getEmail().equals("vacio")){
                        RESULT.setEmail(val2.getEmail());
                    }else if(!val2.getEmail().equals("vacio") && !RESULT.getEmail().equals("vacio")){
                        errores.add("atributo correo declrado mas de una vez");
                    }
                    if(!val2.getDirreccion().equals("vacio") && RESULT.getDirreccion().equals("vacio")){
                        RESULT.setDirreccion(val2.getDirreccion());
                    }else if(!val2.getDirreccion().equals("vacio") && !RESULT.getDirreccion().equals("vacio")){
                        errores.add("atributo dirreccion declarado mas de una vez");
                    }

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("REGISUSU",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // USUARIO ::= DI iniciousuario DI LOGIN DI iniciousuario DF 
            {
              Usuario RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).right;
		Usuario val = (Usuario)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).value;
		

                RESULT = val;
                if(RESULT.getId()!=0 && !RESULT.getPassword().equals("vacio")){
                    if(!hash.usuExist(RESULT.getId()-1)){
                        Usuario prueba = hash.getusu(RESULT.getId());
                        if(prueba.getPassword().equals(RESULT.getPassword())){
                            enlace.reply_login(RESULT.getId(), "True");
                        }else{
                            enlace.reply_login(RESULT.getId(), "False");    
                        }
                    }else{
                        enlace.reply_login(RESULT.getId(), "Fail");
                    }
                }


              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("USUARIO",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // USUARIO ::= DI crearusuario DI REGISUSU DI crearusuario DF 
            {
              Usuario RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).right;
		Usuario val = (Usuario)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).value;
		
                RESULT = val;
                if(RESULT.getId()!=0 && !RESULT.getNombre().equals("vacio") && !RESULT.getApellido().equals("vacio") && RESULT.getTelefono()!=0 && !RESULT.getEmail().equals("vacio")){
                    if(hash.usuExist(RESULT.getId()-1)){
                        hash.insertar_usu(RESULT.getId(),RESULT);
                        enlace.enviar_Reply(enlace.reply_registro_usu(RESULT.getId(),"True"));
                    }else{
                        enlace.enviar_Reply(enlace.reply_registro_usu(RESULT.getId(),"False"));
                    }
                }

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("USUARIO",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ACCION ::= ELIMINACION 
            {
              String RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("ACCION",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ACCION ::= MODIFICACION 
            {
              String RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("ACCION",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ACCIONESPRODUP ::= cantidad igual EQ 
            {
              Producto RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("ACCIONESPRODUP",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ACCIONESPRODUP ::= color igual CONSM 
            {
              Producto RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("ACCIONESPRODUP",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ACCIONESPRODUP ::= nombre igual cadena 
            {
              Producto RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("ACCIONESPRODUP",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ACCIONESPRODUP ::= sucursal igual numero 
            {
              Producto RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("ACCIONESPRODUP",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ACCIONESPRODUP ::= codigo igual numero 
            {
              Producto RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("ACCIONESPRODUP",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ACCIONESPRODUP ::= tipo igual ACCION 
            {
              Producto RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("ACCIONESPRODUP",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ACCIONESPRODU ::= ACCIONESPRODUP 
            {
              Producto RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("ACCIONESPRODU",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ACCIONESPRODU ::= ACCIONESPRODU ACCIONESPRODUP 
            {
              Producto RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("ACCIONESPRODU",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // REGISPRODUP ::= DI imagen DI identificador DI imagen DF 
            {
              Producto RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("REGISPRODUP",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // REGISPRODUP ::= DI color DI CONSM DI color DF 
            {
              Producto RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("REGISPRODUP",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // REGISPRODUP ::= DI tamano DI EQ DI tamano DF 
            {
              Producto RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("REGISPRODUP",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // REGISPRODUP ::= DI marca DI CONSM DI marca DF 
            {
              Producto RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("REGISPRODUP",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // REGISPRODUP ::= DI cantidad DI EQ DI cantidad DF 
            {
              Producto RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("REGISPRODUP",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // REGISPRODUP ::= DI nombre DI CONSM DI nombre DF 
            {
              Producto RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("REGISPRODUP",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // REGISPRODUP ::= DI codigo DI EQ DI codigo DF 
            {
              Producto RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("REGISPRODUP",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // REGISPRODU ::= REGISPRODUP 
            {
              Producto RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("REGISPRODU",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // REGISPRODU ::= REGISPRODU REGISPRODUP 
            {
              Producto RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("REGISPRODU",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // PRODUCTO ::= DI tienda id igual numero DI ACCIONESPRODU DI tienda DF 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("PRODUCTO",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // PRODUCTO ::= DI producto ACCIONESPRODU DF 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("PRODUCTO",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // PRODUCTO ::= DI producto tipo igual CREACION DI REGISPRODU DI DF 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("PRODUCTO",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // CONSM ::= corchetei identificador coma identificador corchetef 
            {
              String RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).right;
		String val1 = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).right;
		String val2 = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).value;
		
                if(this.hash_compi.estaseccion(val1)){
                    Seccion_Mate temp1 = this.hash_compi.devolver_seccion(val1);
                    if(temp1.estacons(val2)){
                        Cons_Mate temp2 =temp1.devolverconst(val2);
                        if(temp2.valor_num!=null){
                            RESULT = temp2.valor_num;
                        }else{
                            RESULT = temp2.valor_str;
                        }
                    }else{
                        errores.add("Error, no existe Constante " + val2);
                    }
                }else{
                    errores.add("error, no existe la seccion " + val1);
                }

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONSM",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // CONSM ::= avacio 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = "vacio";

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONSM",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // CONSM ::= numero 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = val;

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONSM",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // CONSM ::= cadena 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = val;

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONSM",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ACCIONESTIENDAP ::= telefono igual numero 
            {
              Tienda RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("ACCIONESTIENDAP",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ACCIONESTIENDAP ::= direccion igual cadena 
            {
              Tienda RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("ACCIONESTIENDAP",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ACCIONESTIENDAP ::= nombre igual cadena 
            {
              Tienda RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("ACCIONESTIENDAP",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ACCIONESTIENDAP ::= propietario igual numero 
            {
              Tienda RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("ACCIONESTIENDAP",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ACCIONESTIENDAP ::= codigo igual numero 
            {
              Tienda RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("ACCIONESTIENDAP",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ACCIONESTIENDAP ::= tipo igual ACCION 
            {
              Tienda RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("ACCIONESTIENDAP",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ACCIONESTIENDA ::= ACCIONESTIENDAP 
            {
              Tienda RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("ACCIONESTIENDA",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ACCIONESTIENDA ::= ACCIONESTIENDA coma ACCIONESTIENDAP 
            {
              Tienda RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("ACCIONESTIENDA",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // CONTREGISTIENDAP ::= DI imagen DI identificador DI imagen DF 
            {
              Tienda RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONTREGISTIENDAP",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // CONTREGISTIENDAP ::= DI telefono DI EQ DI telefono DF 
            {
              Tienda RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONTREGISTIENDAP",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CONTREGISTIENDAP ::= DI direccion DI CONSM DI direccion DF 
            {
              Tienda RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONTREGISTIENDAP",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CONTREGISTIENDAP ::= DI nombre DI CONSM DI nombre DF 
            {
              Tienda RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONTREGISTIENDAP",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CONTREGISTIENDAP ::= DI propietario DI EQ DI propietario DF 
            {
              Tienda RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONTREGISTIENDAP",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CONTREGISTIENDAP ::= DI codigo DI EQ DI codigo DF 
            {
              Tienda RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONTREGISTIENDAP",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CONTREGISTIENDA ::= CONTREGISTIENDAP 
            {
              Tienda RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONTREGISTIENDA",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CONTREGISTIENDA ::= CONTREGISTIENDA CONTREGISTIENDAP 
            {
              Tienda RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONTREGISTIENDA",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // TIENDA ::= ACCIONESTIENDA 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("TIENDA",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // TIENDA ::= tipo igual CREACION DI CONTREGISTIENDA DI tienda 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("TIENDA",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // PETICIONP ::= PRODUCTO 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("PETICIONP",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // PETICIONP ::= DI tienda TIENDA DF 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("PETICIONP",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // PETICION ::= PETICIONP 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("PETICION",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // PETICION ::= PETICION PETICIONP 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("PETICION",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CONTGETP ::= sucursal igual numero 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
RESULT = val;

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONTGETP",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CONTGETP ::= 
            {
              String RESULT =null;
		RESULT = "";
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONTGETP",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CONTGET ::= cadena propietario igual numero CONTGETP 
            {
              ArrayList<Object> RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-4)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-4)).value;
		int val1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).right;
		String val1 = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		String val2 = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = new ArrayList();

                if(val.equals("productos")){
                    if(val2.equals("")){
                        errores.add("a solicitado productos pero no ha especificado sucursal");
                    }else{
                        ArrayList<Producto> temp1 = hash.get_productosc("sucursal",(Object)val2);
                        ArrayList<Producto> temp2 = new ArrayList();
                        ArrayList<Object> temp3 = new ArrayList();
                        temp1.stream().forEach((Producto p)->{
                            temp2.add(p);
                            temp3.add((Object)p);
                        });
                        RESULT = temp3;
                        enlace.reply_lista_productos(temp2);
                    }
                }else if(val.equals("tiendas")){
                    if(!val2.equals("")){
                        errores.add("Atributo sucursal no era nesesario para obtener tiendas");
                    }else{
                        ArrayList<Tienda> temp1 = hash.get_tiendasc("propietario",(Object)val1);
                        ArrayList<Tienda> temp2 = new ArrayList();
                        ArrayList<Object> temp3 = new ArrayList();
                        temp1.stream().forEach((Tienda p)->{
                            temp2.add(p);
                            temp3.add((Object)p);
                        });
                        RESULT = temp3;
                        enlace.reply_lista_tiendas(temp2);
                    }
                }

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONTGET",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // GET ::= DI get tipo igual CONTGET DF 
            {
              String RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("GET",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // PETICIONES ::= error DI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).value;
		
System.out.println("me sincronize con $" + eleft + " " + " " + eright);

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("PETICIONES",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // PETICIONES ::= error DF 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).value;
		
System.out.println("me sincronize con -$" + eleft + " " + " " + eright);

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("PETICIONES",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // PETICIONES ::= DI request DI USUARIO DI request DF 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("PETICIONES",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // PETICIONES ::= DI request DI GET DI request DF 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("PETICIONES",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // PETICIONES ::= DI consulta DI CONSULTA DI consulta DF 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("PETICIONES",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // PETICIONES ::= DI request DI PETICION DI request DF 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("PETICIONES",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXPREG ::= identificador 
            {
              Ecuacion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = new Ecuacion();
                RESULT.variables.add(val);
                RESULT.Ecuacion+=val;

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("EXPREG",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXPREG ::= numero 
            {
              Ecuacion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = new Ecuacion();
                RESULT.Ecuacion += val;

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("EXPREG",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXPREG ::= parentesisi EQP parentesisf 
            {
              Ecuacion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).right;
		Ecuacion val = (Ecuacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).value;
		
                RESULT = new Ecuacion();
                RESULT.Ecuacion = "("+ val.Ecuacion +")";
                val.variables.stream().forEach(RESULT.variables::add);

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("EXPREG",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EXPREF ::= EXPREG 
            {
              Ecuacion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		Ecuacion val = (Ecuacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = val;

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("EXPREF",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EXPREF ::= llavesi EXPREG llavesf 
            {
              Ecuacion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).right;
		Ecuacion val = (Ecuacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).value;
		
                RESULT = new Ecuacion();
                RESULT.variables = val.variables;
                RESULT.Ecuacion = "{" + val.Ecuacion + "}";

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("EXPREF",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EXPREE ::= EXPREF 
            {
              Ecuacion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		Ecuacion val = (Ecuacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = val;

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("EXPREE",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EXPREE ::= raiz corchetei EXPREF coma EXPREF corchetef 
            {
              Ecuacion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).right;
		Ecuacion val1 = (Ecuacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).right;
		Ecuacion val2 = (Ecuacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).value;
		
                RESULT = new Ecuacion();
                RESULT.Ecuacion="Rq["+val1.Ecuacion+","+val2.Ecuacion+"]";
                val1.variables.stream().forEach(RESULT.variables::add);
                val2.variables.stream().forEach(RESULT.variables::add);            

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("EXPREE",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EXPRED ::= EXPREE 
            {
              Ecuacion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		Ecuacion val = (Ecuacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = val;

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("EXPRED",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EXPRED ::= potencia corchetei EXPREE coma EXPREE corchetef 
            {
              Ecuacion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).right;
		Ecuacion val1 = (Ecuacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).right;
		Ecuacion val2 = (Ecuacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).value;
		
                RESULT=new Ecuacion();
                RESULT.Ecuacion="Ptn["+val1.Ecuacion+","+val2.Ecuacion+"]";
                val1.variables.stream().forEach(RESULT.variables::add);
                val2.variables.stream().forEach(RESULT.variables::add);

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("EXPRED",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EXPREC ::= EXPRED 
            {
              Ecuacion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		Ecuacion val = (Ecuacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = val;

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("EXPREC",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EXPREC ::= EXPREC division EXPRED 
            {
              Ecuacion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).right;
		Ecuacion val1 = (Ecuacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		Ecuacion val2 = (Ecuacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = new Ecuacion();
                RESULT.Ecuacion=val1.Ecuacion+"/"+val2.Ecuacion;
                val1.variables.stream().forEach(RESULT.variables::add);
                val2.variables.stream().forEach(RESULT.variables::add);                

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("EXPREC",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // EXPREB ::= EXPREC 
            {
              Ecuacion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		Ecuacion val = (Ecuacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = val;

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("EXPREB",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EXPREB ::= EXPREB multiplicacion EXPREC 
            {
              Ecuacion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).right;
		Ecuacion val1 = (Ecuacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		Ecuacion val2 = (Ecuacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = new Ecuacion();
                RESULT.Ecuacion=val1.Ecuacion+"*"+val2.Ecuacion;
                val1.variables.stream().forEach(RESULT.variables::add);
                val2.variables.stream().forEach(RESULT.variables::add);                

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("EXPREB",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // EXPREA ::= EXPREB 
            {
              Ecuacion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		Ecuacion val = (Ecuacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = val;

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("EXPREA",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // EXPREA ::= EXPREA resta EXPREB 
            {
              Ecuacion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).right;
		Ecuacion val1 = (Ecuacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		Ecuacion val2 = (Ecuacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = new Ecuacion();
                RESULT.Ecuacion=val1.Ecuacion+"-"+val2.Ecuacion;
                val1.variables.stream().forEach(RESULT.variables::add);
                val2.variables.stream().forEach(RESULT.variables::add);                

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("EXPREA",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // EQP ::= EXPREA 
            {
              Ecuacion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		Ecuacion val = (Ecuacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = val;

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("EQP",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // EQP ::= EQP suma EXPREA 
            {
              Ecuacion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).right;
		Ecuacion val1 = (Ecuacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		Ecuacion val2 = (Ecuacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = new Ecuacion();
                RESULT.Ecuacion=val1.Ecuacion+"+"+val2.Ecuacion;
                val1.variables.stream().forEach(RESULT.variables::add);
                val2.variables.stream().forEach(RESULT.variables::add);                

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("EQP",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // PARAMSNP ::= numero 
            {
              ArrayList<String> RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = new ArrayList();
                RESULT.add(val);

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("PARAMSNP",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // PARAMSNP ::= 
            {
              ArrayList<String> RESULT =null;
		RESULT=new ArrayList();
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("PARAMSNP",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // PARAMSN ::= PARAMSNP 
            {
              ArrayList<String> RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		ArrayList<String> val = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = new ArrayList();
                if(!val.isEmpty()){
                    val.stream().forEach(RESULT::add);
                }

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("PARAMSN",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // PARAMSN ::= PARAMSN coma PARAMSNP 
            {
              ArrayList<String> RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).right;
		ArrayList<String> val1 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		ArrayList<String> val2 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = new ArrayList();
                if((!val1.isEmpty() && val2.isEmpty()) || (val2.isEmpty() && val1.isEmpty())){
                    errores.add("Declracion Erronea");
                }
                if(!val2.isEmpty() && !val1.isEmpty()){
                    val2.stream().forEach(RESULT::add);
                    val1.stream().forEach(RESULT::add);
                }

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("PARAMSN",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CONTMATEF ::= parentesisi PARAMSN parentesisf 
            {
              ArrayList<String> RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).right;
		ArrayList<String> val = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).value;
		
                RESULT = val;

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONTMATEF",43, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // MATEF ::= corchetei identificador coma identificador CONTMATEF corchetef 
            {
              String RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-4)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-4)).right;
		String val1 = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-4)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).right;
		String val2 = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).value;
		int val3left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).left;
		int val3right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).right;
		ArrayList<String> val3 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).value;
		
                if(this.hash_compi.estaseccion(val1)){
                    Seccion_Mate secciontemp = this.hash_compi.devolver_seccion(val1);
                    if(secciontemp.estafuncion(val2)){
                        Funcion_Mate funciontemp = secciontemp.devolverfuncion(val2);
                        if(funciontemp.parametros.size()==val3.size()){
                           RESULT = funciontemp.devolver_entero(val3);
                        }else{
                            errores.add("El numero de Paramteroos ingresado no coiciden con los que se nesesitan");
                        }
                    }else{
                    errores.add("La Funcion Declarada no existe");
                    }
                }else{
                    errores.add("la seccion de mate dclarada no existe");
                }

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("MATEF",39, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // EQ ::= MATEF 
            {
              Ecuacion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = new Ecuacion();
                RESULT.Ecuacion=val;


              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("EQ",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // EQ ::= EQP 
            {
              Ecuacion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		Ecuacion val = (Ecuacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = val;

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("EQ",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // PARAMSP ::= identificador 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = val;

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("PARAMSP",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // PARAMSP ::= 
            {
              String RESULT =null;
		RESULT="";
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("PARAMSP",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // PARAMS ::= PARAMSP 
            {
              ArrayList<String> RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = new ArrayList();
                if(!val.equals("")){RESULT.add(val);}

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("PARAMS",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // PARAMS ::= PARAMS coma PARAMSP 
            {
              ArrayList<String> RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).right;
		ArrayList<String> val1 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		String val2 = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = new ArrayList();
                val1.stream().forEach(RESULT::add);
                if(RESULT.isEmpty() && !val2.equals("")){
                    errores.add("error,  declaracion de paramtero antes de " + val2);
                }else if(!RESULT.isEmpty() && val2.equals("")){
                    errores.add("error, coma demas");
                }else{
                    RESULT.add(val2);
                }

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("PARAMS",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CONTMATEP ::= constante identificador igual cadena pyc 
            {
              Seccion_Mate RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).right;
		String val1 = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).right;
		String val2 = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).value;
		
                Cons_Mate constante = new Cons_Mate();
                constante.id=val1;
                constante.valor_str=val2;
                RESULT = new Seccion_Mate();
                RESULT.agregar_constante(constante);

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONTMATEP",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CONTMATEP ::= constante identificador igual numero pyc 
            {
              Seccion_Mate RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).right;
		String val1 = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).right;
		String val2 = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).value;
		
                Cons_Mate constante = new Cons_Mate();
                constante.id=val1;
                constante.valor_num=val2;
                RESULT = new Seccion_Mate();
                RESULT.agregar_constante(constante);
                

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONTMATEP",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CONTMATEP ::= identificador parentesisi PARAMS parentesisf igual llavesi EQ llavesf pyc 
            {
              Seccion_Mate RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-8)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-8)).right;
		String val1 = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-8)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)).right;
		ArrayList<String> val2 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)).value;
		int val3left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).left;
		int val3right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).right;
		Ecuacion val3 = (Ecuacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).value;
		
                Funcion_Mate funcion = new Funcion_Mate();
                funcion.id=val1;
                funcion.parametros=val2;
                if(funcion.parametros.size() == val3.variables.size()){
                    if(funcion.parametros.containsAll(val3.variables)){
                        funcion.parametros=val3.variables;
                        funcion.accion=val3.Ecuacion;
                        RESULT = new Seccion_Mate();
                        RESULT.agregar_funcion(funcion);
                    }else{
                        errores.add("los parametros declarados no coiciden con los de la ecuacion");
                    }
                }else if(funcion.parametros.size()<val3.variables.size()){
                    errores.add("Hay Mas Variables que parametros declarado para la funcion " + funcion.id);
                }else if(funcion.parametros.size()>val3.variables.size()){
                    errores.add("Hay parametros declarados demas en la funcion " + funcion.id);           
                }

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONTMATEP",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CONTMATE ::= CONTMATEP 
            {
              Seccion_Mate RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		Seccion_Mate val = (Seccion_Mate)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                if(val!=null){
                    RESULT = val;
                }

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONTMATE",47, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CONTMATE ::= CONTMATE CONTMATEP 
            {
              Seccion_Mate RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).right;
		Seccion_Mate val1 = (Seccion_Mate)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		Seccion_Mate val2 = (Seccion_Mate)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                if(val1!=null){
                    RESULT = val1;
                    if(val2!=null){
                        if(!val2.funciones.isEmpty()){
                            val2.funciones.stream().forEach(RESULT::agregar_funcion);
                        }
                        if(!val2.constantes.isEmpty()){
                            val2.constantes.stream().forEach(RESULT::agregar_constante);
                        }
                    }
                }else if(val2!=null){
                    RESULT = val2;
                    if(val1!=null){
                        if(!val1.funciones.isEmpty()){
                            val1.funciones.stream().forEach(RESULT::agregar_funcion);
                        }
                        if(!val1.constantes.isEmpty()){
                            val1.constantes.stream().forEach(RESULT::agregar_constante);
                        }
                    }
                }

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONTMATE",47, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // MATE ::= cadena DI CONTMATE 
            {
              Seccion_Mate RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).right;
		String val1 = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		Seccion_Mate val2 = (Seccion_Mate)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = new Seccion_Mate();
                RESULT.id = val1;
                if(val2!=null){
                    val2.funciones.stream().forEach(RESULT::agregar_funcion);
                    val2.constantes.stream().forEach(RESULT::agregar_constante);
                }

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("MATE",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // REQUEST ::= DI mate nombre igual MATE DI mate DF 
            {
              StringBuilder RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).right;
		Seccion_Mate val = (Seccion_Mate)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).value;
		
                this.hash_compi.agregar_seccion(val);

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("REQUEST",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // REQUEST ::= PETICIONES 
            {
              StringBuilder RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("REQUEST",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // REQUEST ::= REQUEST PETICIONES 
            {
              StringBuilder RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("REQUEST",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIA ::= REQUEST 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("INICIA",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico_compilador$parser.done_parsing();
          return CUP$AnalizadorSintactico_compilador$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

