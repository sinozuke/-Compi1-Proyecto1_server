
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Apr 16 03:59:44 CST 2016
//----------------------------------------------------

package BackEnd.Analizador.Compilador;

import java_cup.runtime.*;
import BackEnd.DAO.Objetos.*;
import BackEnd.DAO.Compilador.*;
import BackEnd.DAO.Hash.Tabla_Hash_compilador;
import java.util.ArrayList;
import BackEnd.Conexion.Enlace_Envio;
import static compi1.proyecto1_server.pkg201403775.Compi1Proyecto1_Server201403775.hash;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Apr 16 03:59:44 CST 2016
  */
public class AnalizadorSintactico_compilador extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintactico_compilador() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico_compilador(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico_compilador(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\243\000\002\002\004\000\002\002\003\000\002\004" +
    "\004\000\002\004\003\000\002\004\012\000\002\006\005" +
    "\000\002\010\004\000\002\010\003\000\002\007\013\000" +
    "\002\007\007\000\002\007\007\000\002\024\005\000\002" +
    "\024\003\000\002\034\002\000\002\034\003\000\002\047" +
    "\003\000\002\047\003\000\002\036\010\000\002\027\005" +
    "\000\002\025\005\000\002\025\003\000\002\026\002\000" +
    "\002\026\003\000\002\050\005\000\002\050\003\000\002" +
    "\051\005\000\002\051\003\000\002\052\005\000\002\052" +
    "\003\000\002\053\005\000\002\053\003\000\002\054\010" +
    "\000\002\054\003\000\002\055\010\000\002\055\003\000" +
    "\002\056\005\000\002\056\003\000\002\057\005\000\002" +
    "\057\003\000\002\057\003\000\002\011\011\000\002\011" +
    "\011\000\002\011\011\000\002\011\011\000\002\011\004" +
    "\000\002\011\004\000\002\031\010\000\002\005\007\000" +
    "\002\032\002\000\002\032\005\000\002\012\004\000\002" +
    "\012\003\000\002\013\006\000\002\013\003\000\002\014" +
    "\011\000\002\014\003\000\002\045\004\000\002\045\003" +
    "\000\002\046\011\000\002\046\011\000\002\046\011\000" +
    "\002\046\011\000\002\046\011\000\002\046\011\000\002" +
    "\046\011\000\002\046\004\000\002\046\004\000\002\043" +
    "\005\000\002\043\003\000\002\044\005\000\002\044\005" +
    "\000\002\044\005\000\002\044\005\000\002\044\005\000" +
    "\002\044\005\000\002\033\003\000\002\033\003\000\002" +
    "\033\003\000\002\033\007\000\002\003\013\000\002\003" +
    "\006\000\002\003\014\000\002\015\004\000\002\015\003" +
    "\000\002\016\006\000\002\041\004\000\002\041\003\000" +
    "\002\042\011\000\002\042\011\000\002\042\011\000\002" +
    "\042\011\000\002\042\011\000\002\042\011\000\002\042" +
    "\011\000\002\042\011\000\002\037\004\000\002\037\003" +
    "\000\002\040\005\000\002\040\005\000\002\040\005\000" +
    "\002\040\005\000\002\040\005\000\002\040\005\000\002" +
    "\035\003\000\002\035\003\000\002\017\011\000\002\017" +
    "\011\000\002\020\004\000\002\020\003\000\002\021\011" +
    "\000\002\021\011\000\002\021\011\000\002\021\011\000" +
    "\002\021\011\000\002\021\011\000\002\021\011\000\002" +
    "\022\004\000\002\022\003\000\002\023\011\000\002\023" +
    "\011\000\002\030\010\000\002\030\010\000\002\030\010" +
    "\000\002\030\006\000\002\030\006\000\002\030\006\000" +
    "\002\060\005\000\002\060\003\000\002\063\005\000\002" +
    "\063\003\000\002\064\006\000\002\064\003\000\002\065" +
    "\006\000\002\065\006\000\002\065\006\000\002\065\006" +
    "\000\002\065\006\000\002\065\006\000\002\065\006\000" +
    "\002\061\005\000\002\061\003\000\002\066\005\000\002" +
    "\066\003\000\002\067\006\000\002\067\003\000\002\070" +
    "\006\000\002\070\006\000\002\070\006\000\002\070\006" +
    "\000\002\070\006\000\002\062\005\000\002\062\003\000" +
    "\002\071\005\000\002\071\003\000\002\072\006\000\002" +
    "\072\003\000\002\073\006\000\002\073\006\000\002\073" +
    "\006\000\002\073\006\000\002\073\006\000\002\073\006" +
    "\000\002\073\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0201\000\006\003\007\036\010\001\002\000\004\002" +
    "\u0203\001\002\000\010\002\000\003\007\036\u0202\001\002" +
    "\000\010\002\ufffe\003\ufffe\036\ufffe\001\002\000\006\036" +
    "\u01ff\037\u0200\001\002\000\010\041\012\073\013\074\011" +
    "\001\002\000\004\036\u017c\001\002\000\004\036\135\001" +
    "\002\000\004\050\014\001\002\000\004\064\015\001\002" +
    "\000\004\016\016\001\002\000\004\036\023\001\002\000" +
    "\004\036\020\001\002\000\004\073\021\001\002\000\004" +
    "\037\022\001\002\000\010\002\ufffd\003\ufffd\036\ufffd\001" +
    "\002\000\006\020\025\035\027\001\002\000\010\020\025" +
    "\035\027\036\ufffc\001\002\000\004\067\036\001\002\000" +
    "\010\020\ufffa\035\ufffa\036\ufffa\001\002\000\004\020\030" +
    "\001\002\000\004\064\031\001\002\000\006\016\033\017" +
    "\032\001\002\000\004\004\035\001\002\000\004\004\034" +
    "\001\002\000\010\020\ufff7\035\ufff7\036\ufff7\001\002\000" +
    "\010\020\ufff8\035\ufff8\036\ufff8\001\002\000\010\020\037" +
    "\063\ufff4\070\ufff4\001\002\000\006\063\ufff3\070\ufff3\001" +
    "\002\000\006\063\ufff5\070\ufff5\001\002\000\006\063\042" +
    "\070\043\001\002\000\010\020\037\063\ufff4\070\ufff4\001" +
    "\002\000\004\064\044\001\002\000\004\071\045\001\002" +
    "\000\020\017\064\020\065\021\046\022\062\065\052\067" +
    "\057\071\066\001\002\000\004\065\126\001\002\000\050" +
    "\004\uffdd\005\uffdd\006\uffdd\011\uffdd\013\uffdd\023\uffdd\024" +
    "\uffdd\025\uffdd\026\uffdd\036\uffdd\037\uffdd\044\uffdd\050\uffdd" +
    "\056\uffdd\061\uffdd\063\uffdd\066\uffdd\070\uffdd\072\uffdd\001" +
    "\002\000\050\004\uffdf\005\uffdf\006\uffdf\011\uffdf\013\uffdf" +
    "\023\uffdf\024\uffdf\025\uffdf\026\uffdf\036\uffdf\037\uffdf\044" +
    "\uffdf\050\uffdf\056\uffdf\061\uffdf\063\uffdf\066\uffdf\070\uffdf" +
    "\072\uffdf\001\002\000\044\004\uffe1\005\uffe1\006\uffe1\011" +
    "\uffe1\013\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\036\uffe1" +
    "\037\uffe1\044\uffe1\050\uffe1\056\uffe1\061\uffe1\070\uffe1\072" +
    "\uffe1\001\002\000\004\020\112\001\002\000\044\004\uffe3" +
    "\005\uffe3\006\uffe3\011\uffe3\013\uffe3\023\uffe3\024\uffe3\025" +
    "\uffe3\026\uffe3\036\uffe3\037\uffe3\044\uffe3\050\uffe3\056\uffe3" +
    "\061\uffe3\070\uffe3\072\uffe3\001\002\000\036\004\ufff2\005" +
    "\ufff2\006\ufff2\011\ufff2\013\ufff2\025\107\036\ufff2\037\ufff2" +
    "\044\ufff2\050\ufff2\056\ufff2\061\ufff2\070\ufff2\072\ufff2\001" +
    "\002\000\044\004\uffe5\005\uffe5\006\uffe5\011\uffe5\013\uffe5" +
    "\023\uffe5\024\104\025\uffe5\026\uffe5\036\uffe5\037\uffe5\044" +
    "\uffe5\050\uffe5\056\uffe5\061\uffe5\070\uffe5\072\uffe5\001\002" +
    "\000\042\004\uffe7\005\uffe7\006\uffe7\011\uffe7\013\uffe7\023" +
    "\102\025\uffe7\026\uffe7\036\uffe7\037\uffe7\044\uffe7\050\uffe7" +
    "\056\uffe7\061\uffe7\070\uffe7\072\uffe7\001\002\000\016\017" +
    "\064\020\065\021\046\022\062\067\057\071\066\001\002" +
    "\000\040\004\uffe9\005\uffe9\006\uffe9\011\uffe9\013\uffe9\025" +
    "\uffe9\026\100\036\uffe9\037\uffe9\044\uffe9\050\uffe9\056\uffe9" +
    "\061\uffe9\070\uffe9\072\uffe9\001\002\000\004\072\076\001" +
    "\002\000\004\065\071\001\002\000\034\004\ufff1\005\ufff1" +
    "\006\ufff1\011\ufff1\013\ufff1\036\ufff1\037\ufff1\044\ufff1\050" +
    "\ufff1\056\ufff1\061\ufff1\070\ufff1\072\ufff1\001\002\000\050" +
    "\004\uffdb\005\uffdb\006\uffdb\011\uffdb\013\uffdb\023\uffdb\024" +
    "\uffdb\025\uffdb\026\uffdb\036\uffdb\037\uffdb\044\uffdb\050\uffdb" +
    "\056\uffdb\061\uffdb\063\uffdb\066\uffdb\070\uffdb\072\uffdb\001" +
    "\002\000\050\004\uffda\005\uffda\006\uffda\011\uffda\013\uffda" +
    "\023\uffda\024\uffda\025\uffda\026\uffda\036\uffda\037\uffda\044" +
    "\uffda\050\uffda\056\uffda\061\uffda\063\uffda\066\uffda\070\uffda" +
    "\072\uffda\001\002\000\010\017\064\020\065\067\057\001" +
    "\002\000\004\072\070\001\002\000\050\004\uffde\005\uffde" +
    "\006\uffde\011\uffde\013\uffde\023\uffde\024\uffde\025\uffde\026" +
    "\uffde\036\uffde\037\uffde\044\uffde\050\uffde\056\uffde\061\uffde" +
    "\063\uffde\066\uffde\070\uffde\072\uffde\001\002\000\012\017" +
    "\064\020\065\067\057\071\066\001\002\000\004\063\073" +
    "\001\002\000\012\017\064\020\065\067\057\071\066\001" +
    "\002\000\004\066\075\001\002\000\050\004\uffe0\005\uffe0" +
    "\006\uffe0\011\uffe0\013\uffe0\023\uffe0\024\uffe0\025\uffe0\026" +
    "\uffe0\036\uffe0\037\uffe0\044\uffe0\050\uffe0\056\uffe0\061\uffe0" +
    "\063\uffe0\066\uffe0\070\uffe0\072\uffe0\001\002\000\004\004" +
    "\077\001\002\000\010\020\ufff9\035\ufff9\036\ufff9\001\002" +
    "\000\016\017\064\020\065\021\046\022\062\067\057\071" +
    "\066\001\002\000\042\004\uffe8\005\uffe8\006\uffe8\011\uffe8" +
    "\013\uffe8\023\102\025\uffe8\026\uffe8\036\uffe8\037\uffe8\044" +
    "\uffe8\050\uffe8\056\uffe8\061\uffe8\070\uffe8\072\uffe8\001\002" +
    "\000\016\017\064\020\065\021\046\022\062\067\057\071" +
    "\066\001\002\000\044\004\uffe6\005\uffe6\006\uffe6\011\uffe6" +
    "\013\uffe6\023\uffe6\024\104\025\uffe6\026\uffe6\036\uffe6\037" +
    "\uffe6\044\uffe6\050\uffe6\056\uffe6\061\uffe6\070\uffe6\072\uffe6" +
    "\001\002\000\016\017\064\020\065\021\046\022\062\067" +
    "\057\071\066\001\002\000\044\004\uffe4\005\uffe4\006\uffe4" +
    "\011\uffe4\013\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4\036" +
    "\uffe4\037\uffe4\044\uffe4\050\uffe4\056\uffe4\061\uffe4\070\uffe4" +
    "\072\uffe4\001\002\000\006\025\107\070\110\001\002\000" +
    "\016\017\064\020\065\021\046\022\062\067\057\071\066" +
    "\001\002\000\050\004\uffdc\005\uffdc\006\uffdc\011\uffdc\013" +
    "\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc\036\uffdc\037\uffdc" +
    "\044\uffdc\050\uffdc\056\uffdc\061\uffdc\063\uffdc\066\uffdc\070" +
    "\uffdc\072\uffdc\001\002\000\040\004\uffea\005\uffea\006\uffea" +
    "\011\uffea\013\uffea\025\uffea\026\100\036\uffea\037\uffea\044" +
    "\uffea\050\uffea\056\uffea\061\uffea\070\uffea\072\uffea\001\002" +
    "\000\004\063\113\001\002\000\004\020\114\001\002\000" +
    "\004\067\115\001\002\000\010\017\120\063\uffec\070\uffec" +
    "\001\002\000\004\066\117\001\002\000\034\004\ufff0\005" +
    "\ufff0\006\ufff0\011\ufff0\013\ufff0\036\ufff0\037\ufff0\044\ufff0" +
    "\050\ufff0\056\ufff0\061\ufff0\070\ufff0\072\ufff0\001\002\000" +
    "\006\063\uffeb\070\uffeb\001\002\000\006\063\123\070\124" +
    "\001\002\000\006\063\uffed\070\uffed\001\002\000\010\017" +
    "\120\063\uffec\070\uffec\001\002\000\004\066\uffef\001\002" +
    "\000\006\063\uffee\070\uffee\001\002\000\014\017\064\020" +
    "\065\022\062\067\057\071\066\001\002\000\004\063\130" +
    "\001\002\000\014\017\064\020\065\022\062\067\057\071" +
    "\066\001\002\000\004\066\132\001\002\000\044\004\uffe2" +
    "\005\uffe2\006\uffe2\011\uffe2\013\uffe2\023\uffe2\024\uffe2\025" +
    "\uffe2\026\uffe2\036\uffe2\037\uffe2\044\uffe2\050\uffe2\056\uffe2" +
    "\061\uffe2\070\uffe2\072\uffe2\001\002\000\006\063\ufff6\070" +
    "\ufff6\001\002\000\010\020\ufffb\035\ufffb\036\ufffb\001\002" +
    "\000\004\036\142\001\002\000\004\036\u0179\001\002\000" +
    "\004\036\u0176\001\002\000\004\036\uffce\001\002\000\004" +
    "\036\u0173\001\002\000\014\010\144\040\145\042\147\047" +
    "\150\055\146\001\002\000\004\036\uffcc\001\002\000\016" +
    "\011\u0113\013\u0111\044\u0110\050\u0117\056\u0115\061\u0137\001" +
    "\002\000\004\061\u012a\001\002\000\020\043\257\050\267" +
    "\052\265\054\260\056\266\057\262\061\264\001\002\000" +
    "\004\036\233\001\002\000\004\036\151\001\002\000\004" +
    "\036\154\001\002\000\004\036\230\001\002\000\004\036" +
    "\uff95\001\002\000\020\043\163\045\157\050\162\051\161" +
    "\052\155\053\156\054\160\001\002\000\004\036\222\001" +
    "\002\000\004\036\215\001\002\000\004\036\210\001\002" +
    "\000\004\036\203\001\002\000\004\036\176\001\002\000" +
    "\004\036\171\001\002\000\004\036\164\001\002\000\004" +
    "\017\165\001\002\000\004\036\166\001\002\000\004\043" +
    "\167\001\002\000\004\037\170\001\002\000\004\036\uff94" +
    "\001\002\000\004\016\172\001\002\000\004\036\173\001" +
    "\002\000\004\050\174\001\002\000\004\037\175\001\002" +
    "\000\004\036\uff93\001\002\000\004\016\177\001\002\000" +
    "\004\036\200\001\002\000\004\051\201\001\002\000\004" +
    "\037\202\001\002\000\004\036\uff92\001\002\000\004\016" +
    "\204\001\002\000\004\036\205\001\002\000\004\054\206" +
    "\001\002\000\004\037\207\001\002\000\004\036\uff8e\001" +
    "\002\000\004\020\211\001\002\000\004\036\212\001\002" +
    "\000\004\045\213\001\002\000\004\037\214\001\002\000" +
    "\004\036\uff91\001\002\000\004\015\216\001\002\000\004" +
    "\036\217\001\002\000\004\053\220\001\002\000\004\037" +
    "\221\001\002\000\004\036\uff8f\001\002\000\004\017\223" +
    "\001\002\000\004\036\224\001\002\000\004\052\225\001" +
    "\002\000\004\037\226\001\002\000\004\036\uff90\001\002" +
    "\000\004\036\uff96\001\002\000\022\043\163\045\157\047" +
    "\231\050\162\051\161\052\155\053\156\054\160\001\002" +
    "\000\004\037\232\001\002\000\004\036\uff98\001\002\000" +
    "\004\036\236\001\002\000\004\036\254\001\002\000\004" +
    "\036\uff8c\001\002\000\006\043\240\045\237\001\002\000" +
    "\004\036\246\001\002\000\004\036\241\001\002\000\004" +
    "\017\242\001\002\000\004\036\243\001\002\000\004\043" +
    "\244\001\002\000\004\037\245\001\002\000\004\036\uff8b" +
    "\001\002\000\004\020\247\001\002\000\004\036\250\001" +
    "\002\000\004\045\251\001\002\000\004\037\252\001\002" +
    "\000\004\036\uff8a\001\002\000\004\036\uff8d\001\002\000" +
    "\010\042\255\043\240\045\237\001\002\000\004\037\256" +
    "\001\002\000\004\036\uff97\001\002\000\004\064\u0109\001" +
    "\002\000\004\064\u0107\001\002\000\006\037\uffbd\063\uffbd" +
    "\001\002\000\004\064\u0105\001\002\000\006\037\uffca\063" +
    "\u0101\001\002\000\004\064\300\001\002\000\004\064\276" +
    "\001\002\000\004\064\274\001\002\000\004\064\272\001" +
    "\002\000\004\037\271\001\002\000\004\036\uffcd\001\002" +
    "\000\004\016\273\001\002\000\006\037\uffb9\063\uffb9\001" +
    "\002\000\004\017\275\001\002\000\006\037\uffbb\063\uffbb" +
    "\001\002\000\004\017\277\001\002\000\006\037\uffb7\063" +
    "\uffb7\001\002\000\010\032\303\033\302\034\304\001\002" +
    "\000\006\037\uffbc\063\uffbc\001\002\000\022\011\uff9a\013" +
    "\uff9a\037\uff9a\044\uff9a\050\uff9a\056\uff9a\061\uff9a\063\uff9a" +
    "\001\002\000\004\036\305\001\002\000\022\011\uff99\013" +
    "\uff99\037\uff99\044\uff99\050\uff99\056\uff99\061\uff99\063\uff99" +
    "\001\002\000\006\003\306\036\307\001\002\000\006\036" +
    "\377\037\u0100\001\002\000\020\050\321\052\314\054\315" +
    "\056\320\057\323\060\316\062\322\001\002\000\006\003" +
    "\306\036\312\001\002\000\006\003\uffc8\036\uffc8\001\002" +
    "\000\022\050\321\052\314\054\315\055\317\056\320\057" +
    "\323\060\316\062\322\001\002\000\006\003\uffc9\036\uffc9" +
    "\001\002\000\004\036\372\001\002\000\004\036\365\001" +
    "\002\000\004\036\360\001\002\000\004\037\uffcb\001\002" +
    "\000\004\036\353\001\002\000\004\036\336\001\002\000" +
    "\004\036\331\001\002\000\004\036\324\001\002\000\004" +
    "\017\325\001\002\000\004\036\326\001\002\000\004\057" +
    "\327\001\002\000\004\037\330\001\002\000\006\003\uffc6" +
    "\036\uffc6\001\002\000\004\016\332\001\002\000\004\036" +
    "\333\001\002\000\004\062\334\001\002\000\004\037\335" +
    "\001\002\000\006\003\uffc1\036\uffc1\001\002\000\012\016" +
    "\341\017\337\065\342\075\340\001\002\000\032\004\uffb5" +
    "\005\uffb5\006\uffb5\011\uffb5\013\uffb5\036\uffb5\037\uffb5\044" +
    "\uffb5\050\uffb5\056\uffb5\061\uffb5\070\uffb5\001\002\000\032" +
    "\004\uffb4\005\uffb4\006\uffb4\011\uffb4\013\uffb4\036\uffb4\037" +
    "\uffb4\044\uffb4\050\uffb4\056\uffb4\061\uffb4\070\uffb4\001\002" +
    "\000\032\004\uffb6\005\uffb6\006\uffb6\011\uffb6\013\uffb6\036" +
    "\uffb6\037\uffb6\044\uffb6\050\uffb6\056\uffb6\061\uffb6\070\uffb6" +
    "\001\002\000\004\020\347\001\002\000\004\036\344\001" +
    "\002\000\004\050\345\001\002\000\004\037\346\001\002" +
    "\000\006\003\uffc5\036\uffc5\001\002\000\004\063\350\001" +
    "\002\000\004\020\351\001\002\000\004\066\352\001\002" +
    "\000\032\004\uffb3\005\uffb3\006\uffb3\011\uffb3\013\uffb3\036" +
    "\uffb3\037\uffb3\044\uffb3\050\uffb3\056\uffb3\061\uffb3\070\uffb3" +
    "\001\002\000\004\017\354\001\002\000\004\036\355\001" +
    "\002\000\004\056\356\001\002\000\004\037\357\001\002" +
    "\000\006\003\uffc7\036\uffc7\001\002\000\004\016\361\001" +
    "\002\000\004\036\362\001\002\000\004\060\363\001\002" +
    "\000\004\037\364\001\002\000\006\003\uffc2\036\uffc2\001" +
    "\002\000\012\016\341\017\337\065\342\075\340\001\002" +
    "\000\004\036\367\001\002\000\004\054\370\001\002\000" +
    "\004\037\371\001\002\000\006\003\uffc4\036\uffc4\001\002" +
    "\000\004\017\373\001\002\000\004\036\374\001\002\000" +
    "\004\052\375\001\002\000\004\037\376\001\002\000\006" +
    "\003\uffc3\036\uffc3\001\002\000\006\003\uffc0\036\uffc0\001" +
    "\002\000\006\003\uffbf\036\uffbf\001\002\000\016\050\267" +
    "\052\265\054\260\056\266\057\262\061\u0102\001\002\000" +
    "\004\064\u0104\001\002\000\006\037\uffbe\063\uffbe\001\002" +
    "\000\006\033\302\034\304\001\002\000\004\017\u0106\001" +
    "\002\000\006\037\uffba\063\uffba\001\002\000\004\016\u0108" +
    "\001\002\000\006\037\uffb8\063\uffb8\001\002\000\004\017" +
    "\u010a\001\002\000\004\036\u010b\001\002\000\004\036\u010d" +
    "\001\002\000\004\036\u0126\001\002\000\004\010\u010f\001" +
    "\002\000\004\036\uffae\001\002\000\016\011\u0113\013\u0111" +
    "\044\u0110\050\u0117\056\u0115\061\u0114\001\002\000\004\064" +
    "\u0124\001\002\000\004\064\u0122\001\002\000\020\011\u0113" +
    "\013\u0111\037\u0121\044\u0110\050\u0117\056\u0115\061\u0114\001" +
    "\002\000\004\064\u011e\001\002\000\004\064\u011c\001\002" +
    "\000\004\064\u011a\001\002\000\020\011\uffa1\013\uffa1\037" +
    "\uffa1\044\uffa1\050\uffa1\056\uffa1\061\uffa1\001\002\000\004" +
    "\064\u0118\001\002\000\004\016\u0119\001\002\000\020\011" +
    "\uff9d\013\uff9d\037\uff9d\044\uff9d\050\uff9d\056\uff9d\061\uff9d" +
    "\001\002\000\004\017\u011b\001\002\000\020\011\uff9f\013" +
    "\uff9f\037\uff9f\044\uff9f\050\uff9f\056\uff9f\061\uff9f\001\002" +
    "\000\006\033\302\034\304\001\002\000\020\011\uffa0\013" +
    "\uffa0\037\uffa0\044\uffa0\050\uffa0\056\uffa0\061\uffa0\001\002" +
    "\000\020\017\064\020\065\021\046\022\062\065\052\067" +
    "\057\071\066\001\002\000\020\011\uff9b\013\uff9b\037\uff9b" +
    "\044\uff9b\050\uff9b\056\uff9b\061\uff9b\001\002\000\020\011" +
    "\uffa2\013\uffa2\037\uffa2\044\uffa2\050\uffa2\056\uffa2\061\uffa2" +
    "\001\002\000\004\036\uffad\001\002\000\012\016\341\017" +
    "\337\065\342\075\340\001\002\000\020\011\uff9c\013\uff9c" +
    "\037\uff9c\044\uff9c\050\uff9c\056\uff9c\061\uff9c\001\002\000" +
    "\004\017\u0125\001\002\000\020\011\uff9e\013\uff9e\037\uff9e" +
    "\044\uff9e\050\uff9e\056\uff9e\061\uff9e\001\002\000\006\010" +
    "\u010f\055\u0128\001\002\000\004\036\uffaf\001\002\000\004" +
    "\037\u0129\001\002\000\004\036\uffb0\001\002\000\004\064" +
    "\u012b\001\002\000\004\016\u012c\001\002\000\004\057\u012f" +
    "\001\002\000\004\037\u012e\001\002\000\004\036\uffd3\001" +
    "\002\000\004\064\u0130\001\002\000\004\017\u0131\001\002" +
    "\000\006\037\uffd1\044\u0132\001\002\000\004\064\u0134\001" +
    "\002\000\004\037\uffd2\001\002\000\004\017\u0135\001\002" +
    "\000\004\037\uffd0\001\002\000\020\011\u0113\013\u0111\037" +
    "\u0171\044\u0110\050\u0117\056\u0115\061\u0114\001\002\000\004" +
    "\064\u0138\001\002\000\010\032\u0139\033\302\034\304\001" +
    "\002\000\004\036\u013a\001\002\000\004\036\u013c\001\002" +
    "\000\004\036\uffab\001\002\000\022\011\u0143\012\u0141\013" +
    "\u0142\014\u0145\050\u0147\056\u0146\060\u0148\062\u0144\001\002" +
    "\000\004\036\u013f\001\002\000\004\036\uffac\001\002\000" +
    "\024\011\u0143\012\u0141\013\u0142\014\u0145\037\u0140\050\u0147" +
    "\056\u0146\060\u0148\062\u0144\001\002\000\004\036\uffb2\001" +
    "\002\000\004\036\u016c\001\002\000\004\036\u0167\001\002" +
    "\000\004\036\u0162\001\002\000\004\036\u015d\001\002\000" +
    "\004\036\u0158\001\002\000\004\036\u0153\001\002\000\004" +
    "\036\u014e\001\002\000\004\036\u0149\001\002\000\004\016" +
    "\u014a\001\002\000\004\036\u014b\001\002\000\004\060\u014c" +
    "\001\002\000\004\037\u014d\001\002\000\004\036\uffa4\001" +
    "\002\000\012\016\341\017\337\065\342\075\340\001\002" +
    "\000\004\036\u0150\001\002\000\004\050\u0151\001\002\000" +
    "\004\037\u0152\001\002\000\004\036\uffa9\001\002\000\020" +
    "\017\064\020\065\021\046\022\062\065\052\067\057\071" +
    "\066\001\002\000\004\036\u0155\001\002\000\004\056\u0156" +
    "\001\002\000\004\037\u0157\001\002\000\004\036\uffaa\001" +
    "\002\000\020\017\064\020\065\021\046\022\062\065\052" +
    "\067\057\071\066\001\002\000\004\036\u015a\001\002\000" +
    "\004\014\u015b\001\002\000\004\037\u015c\001\002\000\004" +
    "\036\uffa6\001\002\000\004\016\u015e\001\002\000\004\036" +
    "\u015f\001\002\000\004\062\u0160\001\002\000\004\037\u0161" +
    "\001\002\000\004\036\uffa3\001\002\000\020\017\064\020" +
    "\065\021\046\022\062\065\052\067\057\071\066\001\002" +
    "\000\004\036\u0164\001\002\000\004\011\u0165\001\002\000" +
    "\004\037\u0166\001\002\000\004\036\uffa8\001\002\000\012" +
    "\016\341\017\337\065\342\075\340\001\002\000\004\036" +
    "\u0169\001\002\000\004\013\u016a\001\002\000\004\037\u016b" +
    "\001\002\000\004\036\uffa5\001\002\000\012\016\341\017" +
    "\337\065\342\075\340\001\002\000\004\036\u016e\001\002" +
    "\000\004\012\u016f\001\002\000\004\037\u0170\001\002\000" +
    "\004\036\uffa7\001\002\000\004\036\uffb1\001\002\000\004" +
    "\036\uffcf\001\002\000\010\010\144\041\u0174\055\146\001" +
    "\002\000\004\037\u0175\001\002\000\010\002\uffd9\003\uffd9" +
    "\036\uffd9\001\002\000\004\041\u0177\001\002\000\004\037" +
    "\u0178\001\002\000\010\002\uffd6\003\uffd6\036\uffd6\001\002" +
    "\000\004\041\u017a\001\002\000\004\037\u017b\001\002\000" +
    "\010\002\uffd7\003\uffd7\036\uffd7\001\002\000\004\027\u017d" +
    "\001\002\000\004\030\u0182\001\002\000\004\036\u017f\001" +
    "\002\000\004\074\u0180\001\002\000\004\037\u0181\001\002" +
    "\000\010\002\uffd8\003\uffd8\036\uffd8\001\002\000\010\010" +
    "\u0183\046\u0184\055\u0185\001\002\000\006\004\u01d5\031\u01d4" +
    "\001\002\000\006\004\u01a9\031\u01aa\001\002\000\006\004" +
    "\u0187\031\u0186\001\002\000\016\007\u0190\050\u0191\052\u018e" +
    "\054\u0188\056\u018f\057\u0189\001\002\000\004\036\uff85\001" +
    "\002\000\004\064\u01a6\001\002\000\004\064\u01a3\001\002" +
    "\000\012\004\uff71\005\uff71\006\uff71\070\uff71\001\002\000" +
    "\012\004\uff73\005\uff73\006\uff73\070\uff73\001\002\000\012" +
    "\004\uff75\005\u019a\006\uff75\070\uff75\001\002\000\006\004" +
    "\u01a2\006\u0198\001\002\000\004\064\u019f\001\002\000\004" +
    "\064\u019c\001\002\000\004\067\u0195\001\002\000\004\064" +
    "\u0192\001\002\000\004\064\u0193\001\002\000\012\016\341" +
    "\017\337\065\342\075\340\001\002\000\012\004\uff6f\005" +
    "\uff6f\006\uff6f\070\uff6f\001\002\000\016\007\u0190\050\u0191" +
    "\052\u018e\054\u0188\056\u018f\057\u0189\001\002\000\006\006" +
    "\u0198\070\u0197\001\002\000\012\004\uff72\005\uff72\006\uff72" +
    "\070\uff72\001\002\000\016\007\u0190\050\u0191\052\u018e\054" +
    "\u0188\056\u018f\057\u0189\001\002\000\012\004\uff76\005\u019a" +
    "\006\uff76\070\uff76\001\002\000\016\007\u0190\050\u0191\052" +
    "\u018e\054\u0188\056\u018f\057\u0189\001\002\000\012\004\uff74" +
    "\005\uff74\006\uff74\070\uff74\001\002\000\004\064\u019d\001" +
    "\002\000\004\017\u019e\001\002\000\012\004\uff70\005\uff70" +
    "\006\uff70\070\uff70\001\002\000\004\064\u01a0\001\002\000" +
    "\004\017\u01a1\001\002\000\012\004\uff6d\005\uff6d\006\uff6d" +
    "\070\uff6d\001\002\000\004\036\uff88\001\002\000\004\064" +
    "\u01a4\001\002\000\004\017\u01a5\001\002\000\012\004\uff6e" +
    "\005\uff6e\006\uff6e\070\uff6e\001\002\000\004\064\u01a7\001" +
    "\002\000\012\016\341\017\337\065\342\075\340\001\002" +
    "\000\012\004\uff6c\005\uff6c\006\uff6c\070\uff6c\001\002\000" +
    "\004\036\uff86\001\002\000\022\007\u01b3\043\u01ab\045\u01b4" +
    "\050\u01b5\051\u01b6\052\u01b2\053\u01b1\054\u01ac\001\002\000" +
    "\004\064\u01d1\001\002\000\004\064\u01ce\001\002\000\012" +
    "\004\uff7e\005\uff7e\006\uff7e\070\uff7e\001\002\000\012\004" +
    "\uff80\005\uff80\006\uff80\070\uff80\001\002\000\012\004\uff82" +
    "\005\u01c5\006\uff82\070\uff82\001\002\000\006\004\u01cd\006" +
    "\u01c3\001\002\000\004\064\u01ca\001\002\000\004\064\u01c7" +
    "\001\002\000\004\067\u01c0\001\002\000\004\064\u01bd\001" +
    "\002\000\004\064\u01ba\001\002\000\004\064\u01b7\001\002" +
    "\000\004\064\u01b8\001\002\000\012\016\341\017\337\065" +
    "\342\075\340\001\002\000\012\004\uff7b\005\uff7b\006\uff7b" +
    "\070\uff7b\001\002\000\004\064\u01bb\001\002\000\012\016" +
    "\341\017\337\065\342\075\340\001\002\000\012\004\uff7c" +
    "\005\uff7c\006\uff7c\070\uff7c\001\002\000\004\064\u01be\001" +
    "\002\000\012\016\341\017\337\065\342\075\340\001\002" +
    "\000\012\004\uff77\005\uff77\006\uff77\070\uff77\001\002\000" +
    "\022\007\u01b3\043\u01ab\045\u01b4\050\u01b5\051\u01b6\052\u01b2" +
    "\053\u01b1\054\u01ac\001\002\000\006\006\u01c3\070\u01c2\001" +
    "\002\000\012\004\uff7f\005\uff7f\006\uff7f\070\uff7f\001\002" +
    "\000\022\007\u01b3\043\u01ab\045\u01b4\050\u01b5\051\u01b6\052" +
    "\u01b2\053\u01b1\054\u01ac\001\002\000\012\004\uff83\005\u01c5" +
    "\006\uff83\070\uff83\001\002\000\022\007\u01b3\043\u01ab\045" +
    "\u01b4\050\u01b5\051\u01b6\052\u01b2\053\u01b1\054\u01ac\001\002" +
    "\000\012\004\uff81\005\uff81\006\uff81\070\uff81\001\002\000" +
    "\004\064\u01c8\001\002\000\004\017\u01c9\001\002\000\012" +
    "\004\uff7a\005\uff7a\006\uff7a\070\uff7a\001\002\000\004\064" +
    "\u01cb\001\002\000\012\016\341\017\337\065\342\075\340" +
    "\001\002\000\012\004\uff79\005\uff79\006\uff79\070\uff79\001" +
    "\002\000\004\036\uff89\001\002\000\004\064\u01cf\001\002" +
    "\000\012\016\341\017\337\065\342\075\340\001\002\000" +
    "\012\004\uff78\005\uff78\006\uff78\070\uff78\001\002\000\004" +
    "\064\u01d2\001\002\000\004\017\u01d3\001\002\000\012\004" +
    "\uff7d\005\uff7d\006\uff7d\070\uff7d\001\002\000\022\007\u01df" +
    "\011\u01dd\012\u01dc\013\u01db\014\u01de\043\u01d8\044\u01e1\050" +
    "\u01e0\001\002\000\004\036\uff84\001\002\000\012\004\uff66" +
    "\005\uff66\006\uff66\070\uff66\001\002\000\012\004\uff68\005" +
    "\uff68\006\uff68\070\uff68\001\002\000\004\064\u01fc\001\002" +
    "\000\012\004\uff6a\005\u01ed\006\uff6a\070\uff6a\001\002\000" +
    "\006\004\u01fb\006\u01eb\001\002\000\004\064\u01f8\001\002" +
    "\000\004\064\u01f5\001\002\000\004\064\u01f2\001\002\000" +
    "\004\064\u01ef\001\002\000\004\067\u01e8\001\002\000\004" +
    "\064\u01e5\001\002\000\004\064\u01e2\001\002\000\004\064" +
    "\u01e3\001\002\000\012\016\341\017\337\065\342\075\340" +
    "\001\002\000\012\004\uff5f\005\uff5f\006\uff5f\070\uff5f\001" +
    "\002\000\004\064\u01e6\001\002\000\012\016\341\017\337" +
    "\065\342\075\340\001\002\000\012\004\uff64\005\uff64\006" +
    "\uff64\070\uff64\001\002\000\022\007\u01df\011\u01dd\012\u01dc" +
    "\013\u01db\014\u01de\043\u01d8\044\u01e1\050\u01e0\001\002\000" +
    "\006\006\u01eb\070\u01ea\001\002\000\012\004\uff67\005\uff67" +
    "\006\uff67\070\uff67\001\002\000\022\007\u01df\011\u01dd\012" +
    "\u01dc\013\u01db\014\u01de\043\u01d8\044\u01e1\050\u01e0\001\002" +
    "\000\012\004\uff6b\005\u01ed\006\uff6b\070\uff6b\001\002\000" +
    "\022\007\u01df\011\u01dd\012\u01dc\013\u01db\014\u01de\043\u01d8" +
    "\044\u01e1\050\u01e0\001\002\000\012\004\uff69\005\uff69\006" +
    "\uff69\070\uff69\001\002\000\004\064\u01f0\001\002\000\020" +
    "\017\064\020\065\021\046\022\062\065\052\067\057\071" +
    "\066\001\002\000\012\004\uff60\005\uff60\006\uff60\070\uff60" +
    "\001\002\000\004\064\u01f3\001\002\000\020\017\064\020" +
    "\065\021\046\022\062\065\052\067\057\071\066\001\002" +
    "\000\012\004\uff61\005\uff61\006\uff61\070\uff61\001\002\000" +
    "\004\064\u01f6\001\002\000\012\016\341\017\337\065\342" +
    "\075\340\001\002\000\012\004\uff63\005\uff63\006\uff63\070" +
    "\uff63\001\002\000\004\064\u01f9\001\002\000\012\016\341" +
    "\017\337\065\342\075\340\001\002\000\012\004\uff62\005" +
    "\uff62\006\uff62\070\uff62\001\002\000\004\036\uff87\001\002" +
    "\000\004\064\u01fd\001\002\000\004\017\u01fe\001\002\000" +
    "\012\004\uff65\005\uff65\006\uff65\070\uff65\001\002\000\010" +
    "\002\uffd4\003\uffd4\036\uffd4\001\002\000\010\002\uffd5\003" +
    "\uffd5\036\uffd5\001\002\000\010\002\uffff\003\uffff\036\uffff" +
    "\001\002\000\006\041\012\074\011\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0201\000\010\002\003\004\004\011\005\001\001\000" +
    "\002\001\001\000\004\011\u0200\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\016\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\007\025\010\023\001\001\000\004\007\133\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\024\040" +
    "\034\037\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\034\132\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\036\062\047\060\050\053\051" +
    "\057\052\055\053\054\054\052\055\050\056\047\057\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\050\105\051\057\052\055\053\054\054\052\055\050" +
    "\056\047\057\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\057\066\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\056\071\057\046\001\001" +
    "\000\002\001\001\000\006\056\073\057\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\052\100\053\054\054\052\055\050\056" +
    "\047\057\046\001\001\000\002\001\001\000\014\053\102" +
    "\054\052\055\050\056\047\057\046\001\001\000\002\001" +
    "\001\000\012\054\104\055\050\056\047\057\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\051\110\052" +
    "\055\053\054\054\052\055\050\056\047\057\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\027\115\001\001\000\006\025\120" +
    "\026\121\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\026\124\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\055\126\056\047\057\046\001\001\000\002\001\001" +
    "\000\010\055\130\056\047\057\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\003\142\012\140\013\137\017\136\031\135\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\003\142\013\u0171\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\037\u0135\040\u0115\001\001\000\002" +
    "\001\001\000\010\014\267\043\262\044\260\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\020\151\021\152" +
    "\001\001\000\004\021\226\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\022\233\023\234\001\001" +
    "\000\004\023\252\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\035\300\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\045\307\046\310\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\046\312\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\033\342\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\033\365\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\044\u0102\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\035\300\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\015\u010b\016\u010d" +
    "\001\001\000\004\016\u0126\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\037\u0111\040\u0115\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\040\u011f\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\035\u011c" +
    "\001\001\000\002\001\001\000\026\036\062\047\u011e\050" +
    "\053\051\057\052\055\053\054\054\052\055\050\056\047" +
    "\057\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\033\u0122\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\u012c\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\032\u0132\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\040\u011f\001\001\000\002\001\001\000\004\035\u011c\001" +
    "\001\000\002\001\001\000\006\041\u013c\042\u013a\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\042\u013d\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\033\u014e\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\036\062" +
    "\047\u0153\050\053\051\057\052\055\053\054\054\052\055" +
    "\050\056\047\057\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\036" +
    "\062\047\u0158\050\053\051\057\052\055\053\054\054\052" +
    "\055\050\056\047\057\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\036\062\047\u0162\050\053" +
    "\051\057\052\055\053\054\054\052\055\050\056\047\057" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\033\u0167\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\033\u016c\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\030\u017d\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\061\u018c\066\u018b\067" +
    "\u018a\070\u0189\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\033\u0193\001\001\000\002\001\001\000\012" +
    "\061\u0195\066\u018b\067\u018a\070\u0189\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\066\u0198\067\u018a\070\u0189" +
    "\001\001\000\002\001\001\000\006\067\u019a\070\u0189\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\033" +
    "\u01a7\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\060\u01af\063\u01ae\064\u01ad\065\u01ac\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\033" +
    "\u01b8\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\033\u01bb\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\033\u01be\001\001\000\002\001\001\000\012\060\u01c0" +
    "\063\u01ae\064\u01ad\065\u01ac\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\063\u01c3\064\u01ad\065\u01ac\001\001" +
    "\000\002\001\001\000\006\064\u01c5\065\u01ac\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\033\u01cb\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\033\u01cf\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\062\u01d9\071\u01d8" +
    "\072\u01d6\073\u01d5\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\033" +
    "\u01e3\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\033\u01e6\001\001\000\002\001\001\000\012\062\u01e8\071" +
    "\u01d8\072\u01d6\073\u01d5\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\071\u01eb\072\u01d6\073\u01d5\001\001\000" +
    "\002\001\001\000\006\072\u01ed\073\u01d5\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\036\062\047\u01f0\050" +
    "\053\051\057\052\055\053\054\054\052\055\050\056\047" +
    "\057\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\036\062\047\u01f3\050\053\051\057\052\055\053\054" +
    "\054\052\055\050\056\047\057\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\033\u01f6\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\033\u01f9\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico_compilador$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico_compilador$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico_compilador$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    protected final static int _error_sync_size = 8;
    protected int error_sync_size( ) {
        return _error_sync_size; 
    }

    /**Metodo al que se llama automáticamente ante algún error sintactico.*/
    public void syntax_error(Symbol s){
		System.out.println("Error en la Línea " + (s.right+1) +" Columna "+s.left+ ". Identificador "
        +s.value + " no reconocido.");
    }

    /**Metodo al que se llama en el momento en que ya no es posible una recuperación de
    errores.*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
		System.out.println("Error en la Línea " + (s.right+1)+ "Columna "+s.left+". Identificador " +
        s.value + " no reconocido.");
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintactico_compilador$actions {


    Tabla_Hash_compilador hash_compi = new Tabla_Hash_compilador();
    private final Enlace_Envio enlace=new Enlace_Envio();
    StringBuilder reply= new StringBuilder();
    Boolean Respondido = false;
                
        		

  private final AnalizadorSintactico_compilador parser;

  /** Constructor */
  CUP$AnalizadorSintactico_compilador$actions(AnalizadorSintactico_compilador parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico_compilador$do_action(
    int                        CUP$AnalizadorSintactico_compilador$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico_compilador$parser,
    java.util.Stack            CUP$AnalizadorSintactico_compilador$stack,
    int                        CUP$AnalizadorSintactico_compilador$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico_compilador$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico_compilador$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // COMPARAP4 ::= sucursal igual igual CONSM 
            {
              Query RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = new Query();
                RESULT.valuados.add("sucursal");
                RESULT.productos = hash.get_productosc("sucursal", (Object)val);

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("COMPARAP4",57, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // COMPARAP4 ::= tamano igual igual EQ 
            {
              Query RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		Ecuacion val = (Ecuacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = new Query();
                RESULT.valuados.add("tamaño");
                if(!val.variables.isEmpty() && !val.Ecuacion.equals("")){
                    RESULT.productos = hash.get_productosc("tamaño", (Object)val.Ecuacion);
                }else{
                    reply.append(enlace.reply_error("semantico", "la ecuacion ingresada no se puede evaluar", valleft, valright));
                }

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("COMPARAP4",57, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // COMPARAP4 ::= cantidad igual igual EQ 
            {
              Query RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		Ecuacion val = (Ecuacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = new Query();
                RESULT.valuados.add("cantidad");
                if(!val.variables.isEmpty() && !val.Ecuacion.equals("")){
                    RESULT.productos = hash.get_productosc("cantidad", (Object)val.Ecuacion);
                }else{
                    reply.append(enlace.reply_error("semantico", "la ecuacion ingresada no se puede evaluar", valleft, valright));
                }

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("COMPARAP4",57, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // COMPARAP4 ::= color igual igual CONSM 
            {
              Query RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = new Query();
                RESULT.valuados.add("color");
                RESULT.productos = hash.get_productosc("color", (Object)val);

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("COMPARAP4",57, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // COMPARAP4 ::= marca igual igual CONSM 
            {
              Query RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = new Query();
                RESULT.valuados.add("marca");
                RESULT.productos = hash.get_productosc("marca", (Object)val);

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("COMPARAP4",57, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // COMPARAP4 ::= nombre igual igual CONSM 
            {
              Query RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = new Query();
                RESULT.valuados.add("nombre");
                RESULT.productos = hash.get_productosc("nombre", (Object)val);

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("COMPARAP4",57, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // COMPARAP4 ::= id igual igual numero 
            {
              Query RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = new Query();
                RESULT.valuados.add("id");
                RESULT.productos = hash.get_productosc("id", (Object)val);

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("COMPARAP4",57, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // COMPARAP3 ::= COMPARAP4 
            {
              Query RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		Query val = (Query)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                    RESULT = val;

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("COMPARAP3",56, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // COMPARAP3 ::= NOT parentesisi COMPARAP1 parentesisf 
            {
              Query RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).right;
		Query val = (Query)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).value;
		
                RESULT = new Query();
                RESULT.valuados = val.valuados;
                RESULT.productos = hash.Negar_productos(val.productos);

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("COMPARAP3",56, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // COMPARAP2 ::= COMPARAP3 
            {
              Query RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		Query val = (Query)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                    RESULT = val;

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("COMPARAP2",55, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // COMPARAP2 ::= COMPARAP2 AND COMPARAP3 
            {
              Query RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).right;
		Query val1 = (Query)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		Query val2 = (Query)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = new Query();
                val1.valuados.stream().forEach(RESULT.valuados::add);
                val2.valuados.stream().forEach(RESULT.valuados::add);
                ArrayList<Producto> temp2 = new ArrayList();
                if(!val1.productos.isEmpty()){
                    Producto prueba = val1.productos.get(0);
                    val1.valuados.stream().forEach((String s)->{
                        val2.productos.stream().forEach((Producto p)->{
                            switch(s){
                                case "id":
                                    if(p.getId()==prueba.getId()){
                                        temp2.add(p);
                                    }
                                    break;
                                case "nombre":
                                    if(p.getNombre().equals(prueba.getNombre())){
                                        temp2.add(p);
                                    }
                                    break;
                                case "marca":
                                    if(p.getMarca().equals(prueba.getMarca())){
                                        temp2.add(p);
                                    }
                                    break;
                                case "color":
                                    if(p.getColor().equals(prueba.getColor())){
                                        temp2.add(p);
                                    }
                                    break;
                                case "cantidad":
                                    if(p.getCantidad()==prueba.getCantidad()){
                                        temp2.add(p);
                                    }
                                    break;
                                case "tamaño":
                                    if(p.getTamaño()==prueba.getTamaño()){
                                        temp2.add(p);
                                    }
                                    break;
                                case "sucursal":
                                    if(p.getSucursal()==prueba.getSucursal()){
                                        temp2.add(p);
                                    }
                                    break;
                            }
                        });
                    });
                }
                if(!val2.productos.isEmpty()){
                    Producto prueba = val2.productos.get(0);
                    val2.valuados.stream().forEach((String s)->{
                        val1.productos.stream().forEach((Producto p)->{
                            switch(s){
                                case "id":
                                    if(p.getId()==prueba.getId()){
                                        if(!temp2.contains(p)){
                                            temp2.add(p);
                                        }
                                    }
                                    break;
                                case "nombre":
                                    if(p.getNombre().equals(prueba.getNombre())){
                                        if(!temp2.contains(p)){
                                            temp2.add(p);
                                        }
                                    }
                                    break;
                                case "marca":
                                    if(p.getMarca().equals(prueba.getMarca())){
                                        if(!temp2.contains(p)){
                                            temp2.add(p);
                                        }
                                    }
                                    break;
                                case "color":
                                    if(p.getColor().equals(prueba.getColor())){
                                        if(!temp2.contains(p)){
                                            temp2.add(p);
                                        }
                                    }
                                    break;
                                case "cantidad":
                                    if(p.getCantidad()==prueba.getCantidad()){
                                        if(!temp2.contains(p)){
                                            temp2.add(p);
                                        }
                                    }
                                    break;
                                case "tamaño":
                                    if(p.getTamaño()==prueba.getTamaño()){
                                        if(!temp2.contains(p)){
                                            temp2.add(p);
                                        }
                                    }
                                    break;
                                case "sucursal":
                                    if(p.getSucursal()==prueba.getSucursal()){
                                        if(!temp2.contains(p)){
                                            temp2.add(p);
                                        }
                                    }
                                    break;
                            }
                        });
                    });
                }

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("COMPARAP2",55, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // COMPARAP1 ::= COMPARAP2 
            {
              Query RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		Query val = (Query)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                    RESULT = val;

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("COMPARAP1",48, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // COMPARAP1 ::= COMPARAP1 OR COMPARAP2 
            {
              Query RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).right;
		Query val1 = (Query)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		Query val2 = (Query)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = new Query();
                val1.valuados.stream().forEach(RESULT.valuados::add);
                val2.valuados.stream().forEach(RESULT.valuados::add);
                val1.productos.stream().forEach(RESULT.productos::add);
                val2.productos.stream().forEach(RESULT.productos::add);

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("COMPARAP1",48, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // COMPARAT4 ::= direccion igual igual CONSM 
            {
              Query RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = new Query();
                RESULT.valuados.add("direccion");
                RESULT.tiendas = hash.get_tiendasc("direccion", (Object)val);


              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("COMPARAT4",54, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // COMPARAT4 ::= telefono igual igual numero 
            {
              Query RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = new Query();
                RESULT.valuados.add("telefono");
                RESULT.tiendas = hash.get_tiendasc("telefono", (Object)val);

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("COMPARAT4",54, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // COMPARAT4 ::= propietario igual igual numero 
            {
              Query RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = new Query();
                RESULT.valuados.add("propietario");
                RESULT.tiendas = hash.get_tiendasc("propietario", (Object)val);

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("COMPARAT4",54, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // COMPARAT4 ::= nombre igual igual CONSM 
            {
              Query RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = new Query();
                RESULT.valuados.add("nombre");
                RESULT.tiendas = hash.get_tiendasc("nombre", (Object)val);

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("COMPARAT4",54, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // COMPARAT4 ::= codigo igual igual numero 
            {
              Query RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = new Query();
                RESULT.valuados.add("codigo");
                RESULT.tiendas = hash.get_tiendasc("codigo", (Object)val);

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("COMPARAT4",54, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // COMPARAT3 ::= COMPARAT4 
            {
              Query RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		Query val = (Query)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                    RESULT = val;

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("COMPARAT3",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // COMPARAT3 ::= NOT parentesisi COMPARAT1 parentesisf 
            {
              Query RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).right;
		Query val = (Query)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).value;
		
                RESULT = new Query();
                RESULT.tiendas = hash.Negar_tiendas(val.tiendas);

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("COMPARAT3",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // COMPARAT2 ::= COMPARAT3 
            {
              Query RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		Query val = (Query)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                    RESULT = val;

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("COMPARAT2",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // COMPARAT2 ::= COMPARAT2 AND COMPARAT3 
            {
              Query RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).right;
		Query val1 = (Query)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		Query val2 = (Query)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = new Query();
                val1.valuados.stream().forEach(RESULT.valuados::add);
                val2.valuados.stream().forEach(RESULT.valuados::add);
                ArrayList<Tienda> temp2 = new ArrayList();
                if(!val1.valuados.isEmpty()){
                    Tienda temp = val1.tiendas.get(0);
                    val1.valuados.stream().forEach((String s)->{
                        val2.tiendas.stream().forEach((Tienda t)->{
                            switch(s){
                                case "codigo":
                                    if(t.getCodigo()==temp.getCodigo()){
                                        temp2.add(t);
                                    }
                                    break;
                                case "propietario":
                                    if(t.getPropietario()==temp.getPropietario()){
                                        temp2.add(t);
                                    }
                                    break;
                                case "nombre":
                                    if(t.getNombre().equals(temp.getNombre())){
                                        temp2.add(t);
                                    }
                                    break;
                                case "dirreccion":
                                    if(t.getDirreccion().equals(temp.getDirreccion())){
                                        temp2.add(t);
                                    }
                                    break;
                                case "telefono":
                                    if(t.getTelefono()==temp.getTelefono()){
                                        temp2.add(t);
                                    }
                                    break;
                            }
                        });
                    });
                }else if(!val2.valuados.isEmpty()){
                    Tienda temp = val2.tiendas.get(0);
                    val2.valuados.stream().forEach((String s)->{
                        val1.tiendas.stream().forEach((Tienda t)->{
                            switch(s){
                                case "codigo":
                                    if(t.getCodigo()==temp.getCodigo()){
                                        temp2.add(t);
                                    }
                                    break;
                                case "propietario":
                                    if(t.getPropietario()==temp.getPropietario()){
                                        temp2.add(t);
                                    }
                                    break;
                                case "nombre":
                                    if(t.getNombre().equals(temp.getNombre())){
                                        temp2.add(t);
                                    }
                                    break;
                                case "dirreccion":
                                    if(t.getDirreccion().equals(temp.getDirreccion())){
                                        temp2.add(t);
                                    }
                                    break;
                                case "telefono":
                                    if(t.getTelefono()==temp.getTelefono()){
                                        temp2.add(t);
                                    }
                                    break;
                            }
                        });
                    });
                }
                RESULT.tiendas = temp2;

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("COMPARAT2",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // COMPARAT1 ::= COMPARAT2 
            {
              Query RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		Query val = (Query)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                    RESULT = val;

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("COMPARAT1",47, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // COMPARAT1 ::= COMPARAT1 OR COMPARAT2 
            {
              Query RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).right;
		Query val1 = (Query)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		Query val2 = (Query)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = new Query();
                val1.tiendas.stream().forEach(RESULT.tiendas::add);
                val2.tiendas.stream().forEach(RESULT.tiendas::add);
                val1.valuados.stream().forEach(RESULT.valuados::add);
                val2.valuados.stream().forEach(RESULT.valuados::add);

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("COMPARAT1",47, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // COMPARAU4 ::= password igual igual CONSM 
            {
              Query RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = new Query();
                RESULT.usuarios = hash.get_usuariosc("password", val);
                RESULT.valuados.add("password");

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("COMPARAU4",51, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // COMPARAU4 ::= direccion igual igual CONSM 
            {
              Query RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = new Query();
                RESULT.usuarios = hash.get_usuariosc("direccion", val);
                RESULT.valuados.add("direccion");

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("COMPARAU4",51, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // COMPARAU4 ::= email igual igual CONSM 
            {
              Query RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = new Query();
                RESULT.usuarios = hash.get_usuariosc("email", val);
                RESULT.valuados.add("email");

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("COMPARAU4",51, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // COMPARAU4 ::= telefono igual igual numero 
            {
              Query RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = new Query();
                RESULT.usuarios = hash.get_usuariosc("telefono", val);
                RESULT.valuados.add("telefono");

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("COMPARAU4",51, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // COMPARAU4 ::= apellido igual igual CONSM 
            {
              Query RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = new Query();
                RESULT.usuarios = hash.get_usuariosc("apellido", val);
                RESULT.valuados.add("apellido");

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("COMPARAU4",51, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // COMPARAU4 ::= nombre igual igual CONSM 
            {
              Query RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = new Query();
                RESULT.usuarios = hash.get_usuariosc("nombre", val);
                RESULT.valuados.add("nombre");

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("COMPARAU4",51, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // COMPARAU4 ::= id igual igual numero 
            {
              Query RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = new Query();
                RESULT.usuarios = hash.get_usuariosc("id", val);
                RESULT.valuados.add("id");

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("COMPARAU4",51, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // COMPARAU3 ::= COMPARAU4 
            {
              Query RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		Query val = (Query)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                    RESULT = val;

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("COMPARAU3",50, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // COMPARAU3 ::= NOT parentesisi COMPARAU1 parentesisf 
            {
              Query RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).right;
		Query val = (Query)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).value;
		
                    RESULT = new Query();
                    RESULT.usuarios = hash.Negar_usuarioss(val.usuarios);
                    val.valuados.stream().forEach(RESULT.valuados::add);

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("COMPARAU3",50, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // COMPARAU2 ::= COMPARAU3 
            {
              Query RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		Query val = (Query)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                    RESULT = val;

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("COMPARAU2",49, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // COMPARAU2 ::= COMPARAU2 AND COMPARAU3 
            {
              Query RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).right;
		Query val1 = (Query)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		Query val2 = (Query)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = new Query();
                val1.valuados.stream().forEach(RESULT.valuados::add);
                val2.valuados.stream().forEach(RESULT.valuados::add);
                ArrayList<Usuario> temp2 = new ArrayList();
                if(!val1.usuarios.isEmpty()){
                    Usuario prueba = val1.usuarios.get(0);
                    val1.valuados.stream().forEach((String s)->{
                        val2.usuarios.stream().forEach((Usuario p)->{
                            switch(s){
                                case "id":
                                    if(p.getId()==prueba.getId()){
                                        temp2.add(p);
                                    }
                                    break;
                                case "nombre":
                                    if(p.getNombre().equals(prueba.getNombre())){
                                        temp2.add(p);
                                    }
                                    break;
                                case "apellido":
                                    if(p.getApellido().equals(prueba.getApellido())){
                                        temp2.add(p);
                                    }
                                    break;
                                case "password":
                                    if(p.getPassword().equals(prueba.getPassword())){
                                        temp2.add(p);
                                    }
                                    break;
                                case "telefono":
                                    if(p.getTelefono()==prueba.getTelefono()){
                                        temp2.add(p);
                                    }
                                    break;
                                case "email":
                                    if(p.getEmail().equals(prueba.getEmail())){
                                        temp2.add(p);
                                    }
                                    break;
                                case "direeccion":
                                    if(p.getDirreccion().equals(prueba.getDirreccion())){
                                        temp2.add(p);
                                    }
                                    break;
                            }
                        });
                    });
                }
                if(!val2.usuarios.isEmpty()){
                    Usuario prueba = val2.usuarios.get(0);
                    val2.valuados.stream().forEach((String s)->{
                        val1.usuarios.stream().forEach((Usuario p)->{
                            switch(s){
                                case "id":
                                    if(p.getId()==prueba.getId()){
                                        if(!temp2.contains(p)){
                                            temp2.add(p);
                                        }
                                    }
                                    break;
                                case "nombre":
                                    if(p.getNombre().equals(prueba.getNombre())){
                                        if(!temp2.contains(p)){
                                            temp2.add(p);
                                        }
                                    }
                                    break;
                                case "apellido":
                                    if(p.getApellido().equals(prueba.getApellido())){
                                        if(!temp2.contains(p)){
                                            temp2.add(p);
                                        }
                                    }
                                    break;
                                case "password":
                                    if(p.getPassword().equals(prueba.getPassword())){
                                        if(!temp2.contains(p)){
                                            temp2.add(p);
                                        }
                                    }
                                    break;
                                case "telefono":
                                    if(p.getTelefono()==prueba.getTelefono()){
                                        if(!temp2.contains(p)){
                                            temp2.add(p);
                                        }
                                    }
                                    break;
                                case "email":
                                    if(p.getEmail().equals(prueba.getEmail())){
                                        if(!temp2.contains(p)){
                                            temp2.add(p);
                                        }
                                    }
                                    break;
                                case "direccion":
                                    if(p.getDirreccion().equals(prueba.getDirreccion())){
                                        if(!temp2.contains(p)){
                                            temp2.add(p);
                                        }
                                    }
                                    break;
                            }
                        });
                    });
                }


              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("COMPARAU2",49, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // COMPARAU1 ::= COMPARAU2 
            {
              Query RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		Query val = (Query)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                    RESULT = val;

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("COMPARAU1",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // COMPARAU1 ::= COMPARAU1 OR COMPARAU2 
            {
              Query RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).right;
		Query val1 = (Query)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		Query val2 = (Query)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                    RESULT = new Query();
                    val1.usuarios.stream().forEach(RESULT.usuarios::add);
                    val2.usuarios.stream().forEach(RESULT.usuarios::add);
                    val1.valuados.stream().forEach(RESULT.valuados::add);
                    val2.valuados.stream().forEach(RESULT.valuados::add);

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("COMPARAU1",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // CONSULTA ::= extraer de producto pyc 
            {
              Query RESULT =null;
		
                    ArrayList<Producto> val = hash.get_productos();
                    reply.append("id---nombre----marca----color----cantidad-------tamaño------sucursal");
                    val.stream().forEach((Producto u)->{
                    reply.append(u.getId());
                    reply.append(u.getNombre());
                    reply.append(u.getMarca());
                    reply.append(u.getColor());
                    reply.append(u.getCantidad());
                    reply.append(u.getTamaño());
                    reply.append(u.getSucursal());
                    });

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONSULTA",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // CONSULTA ::= extraer de tienda pyc 
            {
              Query RESULT =null;
		
                    ArrayList<Tienda> val = hash.get_tiendas();
                    reply.append("Codigo---Propietario----Nombre----Direcciones----Telefono");
                    val.stream().forEach((Tienda u)->{
                    reply.append(u.getCodigo());
                    reply.append(u.getPropietario());
                    reply.append(u.getNombre());
                    reply.append(u.getDirreccion());
                    reply.append(u.getTelefono());
                    });
               

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONSULTA",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // CONSULTA ::= extraer de usuario pyc 
            {
              Query RESULT =null;
		
                    ArrayList<Usuario> val = hash.get_usuarios();
                    reply.append("Nombre---Apellido----Id----Password----Telefono----Dirreccion");
                    val.stream().forEach((Usuario u)->{
                    reply.append(u.getNombre());
                    reply.append(u.getApellido());
                    reply.append(u.getId());
                    reply.append(u.getPassword());
                    reply.append(u.getTelefono());
                    reply.append(u.getDirreccion());
                    });

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONSULTA",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // CONSULTA ::= extraer de producto donde COMPARAP1 pyc 
            {
              Query RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).right;
		Query val = (Query)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).value;
		
                    reply.append("id---nombre----marca----color----cantidad-------tamaño------sucursal");
                    val.productos.stream().forEach((Producto u)->{
                    reply.append(u.getId());
                    reply.append(u.getNombre());
                    reply.append(u.getMarca());
                    reply.append(u.getColor());
                    reply.append(u.getCantidad());
                    reply.append(u.getTamaño());
                    reply.append(u.getSucursal());
                    });

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONSULTA",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // CONSULTA ::= extraer de tienda donde COMPARAT1 pyc 
            {
              Query RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).right;
		Query val = (Query)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).value;
		
                    reply.append("Codigo---Propietario----Nombre----Direcciones----Telefono");
                    val.tiendas.stream().forEach((Tienda u)->{
                    reply.append(u.getCodigo());
                    reply.append(u.getPropietario());
                    reply.append(u.getNombre());
                    reply.append(u.getDirreccion());
                    reply.append(u.getTelefono());
                    });
               

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONSULTA",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // CONSULTA ::= extraer de usuario donde COMPARAU1 pyc 
            {
              Query RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).right;
		Query val = (Query)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).value;
		
                    reply.append("Codigo---Propietario----Nombre----Direcciones----Telefono");
                    val.tiendas.stream().forEach((Tienda u)->{
                    reply.append(u.getCodigo());
                    reply.append(u.getPropietario());
                    reply.append(u.getNombre());
                    reply.append(u.getDirreccion());
                    reply.append(u.getTelefono());
                    });

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONSULTA",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // LOGINP ::= DI password DI identificador DI password DF 
            {
              Usuario RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).value;
		  
                    RESULT = new Usuario();
                    RESULT.setPassword((String)val);

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("LOGINP",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // LOGINP ::= DI id DI numero DI id DF 
            {
              Usuario RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).value;
		
                    RESULT = new Usuario();
                    RESULT.setId(Integer.parseInt(val));

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("LOGINP",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // LOGIN ::= LOGINP 
            {
              Usuario RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		Usuario val = (Usuario)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                    RESULT = val;

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("LOGIN",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // LOGIN ::= LOGIN LOGINP 
            {
              Usuario RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).right;
		Usuario val1 = (Usuario)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		Usuario val2 = (Usuario)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                    RESULT= new Usuario();
                    if(val1.getId()==0 && val2.getId()!=0){
                        RESULT.setId(val2.getId());
                    }else if(val1.getId()!=0 && val2.getId()==0){
                        RESULT.setId(val1.getId());
                    }else{
                        reply.append(enlace.reply_error("semantico", "Atributos ingresado para login incorrectos", val1left, val2right));
                    }
                    if(val1.getPassword().equals("vacio") && !val2.getPassword().equals("vacio")){
                        RESULT.setPassword(val2.getPassword());
                    }else if(!val1.getPassword().equals("vacio") && val2.getPassword().equals("vacio")){
                        RESULT.setPassword(val1.getPassword());    
                    }else{
                        reply.append(enlace.reply_error("semantico", "Atributos ingresado para login incorrectos", val2left, val2right));
                    }
                    if(RESULT.getId()==0 || RESULT.getPassword()==null){
                        reply.append(enlace.reply_error("semantico", "error en ingreso para logear, Fallo Critico", val1left, val2right));
                    }

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("LOGIN",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // REGISUSUP ::= DI direccion DI cadena DI direccion DF 
            {
              Usuario RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).value;
		
                    RESULT = new Usuario();
                    RESULT.setDirreccion(val.replaceAll("\"",""));

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("REGISUSUP",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // REGISUSUP ::= DI email DI correo DI email DF 
            {
              Usuario RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).value;
		
                    RESULT = new Usuario();
                    RESULT.setEmail(val);

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("REGISUSUP",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // REGISUSUP ::= DI telefono DI numero DI telefono DF 
            {
              Usuario RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).value;
		
                    RESULT = new Usuario();
                    RESULT.setTelefono(val);

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("REGISUSUP",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // REGISUSUP ::= DI password DI identificador DI password DF 
            {
              Usuario RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).value;
		
                    RESULT = new Usuario();
                    RESULT.setPassword(val);

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("REGISUSUP",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // REGISUSUP ::= DI apellido DI cadena DI apellido DF 
            {
              Usuario RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).value;
		
                    RESULT = new Usuario();
                    RESULT.setApellido(val.replaceAll("\"",""));

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("REGISUSUP",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // REGISUSUP ::= DI nombre DI cadena DI nombre DF 
            {
              Usuario RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).value;
		
                    RESULT = new Usuario();
                    RESULT.setNombre(val.replaceAll("\"",""));

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("REGISUSUP",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // REGISUSUP ::= DI id DI numero DI id DF 
            {
              Usuario RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).value;
		
                    RESULT = new Usuario();
                    RESULT.setId(Integer.parseInt(val));

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("REGISUSUP",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // REGISUSU ::= REGISUSUP 
            {
              Usuario RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		Usuario val = (Usuario)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                    RESULT = val;

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("REGISUSU",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // REGISUSU ::= REGISUSU REGISUSUP 
            {
              Usuario RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).right;
		Usuario val1 = (Usuario)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		Usuario val2 = (Usuario)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                    RESULT = val1;
                    if(val2.getId()!=0 && RESULT.getId()==0){
                        RESULT.setId(val2.getId());
                    }else if(val2.getId()!=0 && RESULT.getId()!=0){
                        reply.append(enlace.reply_error("semantico", "Atributo id declarado mas de una vez", val2left, val2right));
                    }
                    if(!val2.getNombre().equals("vacio") && RESULT.getNombre().equals("vacio")){
                        RESULT.setNombre(val2.getNombre());
                    }else if(!val2.getNombre().equals("vacio") && !RESULT.getNombre().equals("vacio")){
                        reply.append(enlace.reply_error("semantico", "Atributo nombre declarado mas de una vez", val2left, val2right));
                    }
                    if(!val2.getApellido().equals("vacio") && RESULT.getApellido().equals("vacio")){
                        RESULT.setApellido(val2.getApellido());
                    }else if(!val2.getApellido().equals("vacio") && !RESULT.getApellido().equals("vacio")){
                        reply.append(enlace.reply_error("semantico", "Atributo apellido declarado mas de una vez", val2left, val2right));
                    }
                    if(!val2.getPassword().equals("vacio") && RESULT.getPassword().equals("vacio")){
                        RESULT.setPassword(val2.getPassword());
                    }else if(!val2.getPassword().equals("vacio") && !RESULT.getPassword().equals("vacio")){
                        reply.append(enlace.reply_error("semantico", "Atributo password declarado mas de una vez", val2left, val2right));
                    }
                    if(!val2.getTelefono().equals("vacio") && RESULT.getTelefono().equals("vacio")){
                        RESULT.setTelefono(val2.getTelefono());
                    }else if(!val2.getTelefono().equals("vacio") && !RESULT.getTelefono().equals("vacio")){
                        reply.append(enlace.reply_error("semantico", "Atributo telefono declarado mas de una vez", val2left, val2right));
                    }
                    if(!val2.getEmail().equals("vacio") && RESULT.getEmail().equals("vacio")){
                        RESULT.setEmail(val2.getEmail());
                    }else if(!val2.getEmail().equals("vacio") && !RESULT.getEmail().equals("vacio")){
                        reply.append(enlace.reply_error("semantico", "Atributo email declarado mas de una vez", val2left, val2right));
                    }
                    if(!val2.getDirreccion().equals("vacio") && RESULT.getDirreccion().equals("vacio")){
                        RESULT.setDirreccion(val2.getDirreccion());
                    }else if(!val2.getDirreccion().equals("vacio") && !RESULT.getDirreccion().equals("vacio")){
                        reply.append(enlace.reply_error("semantico", "Atributo dirreccion declarado mas de una vez", val2left, val2right));
                    }

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("REGISUSU",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // USUARIO ::= DI iniciousuario DI LOGIN DI iniciousuario DF 
            {
              Usuario RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).right;
		Usuario val = (Usuario)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).value;
		

                RESULT = val;
                if(RESULT.getId()!=0 && !RESULT.getPassword().equals("vacio")){
                    if(!hash.usuExist(RESULT.getId()-1)){
                        Usuario prueba = hash.getusu(RESULT.getId());
                        if(prueba.getPassword().equals(RESULT.getPassword())){
                            enlace.reply_login(RESULT.getId(), "True");
                            Respondido = true;
                        }else{
                            enlace.reply_login(RESULT.getId(), "False");
                            Respondido = true;
                        }
                    }else{
                        enlace.reply_login(RESULT.getId(), "Fail");
                        Respondido = true;
                    }
                }


              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("USUARIO",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // USUARIO ::= DI crearusuario DI REGISUSU DI crearusuario DF 
            {
              Usuario RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).right;
		Usuario val = (Usuario)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).value;
		
                RESULT = val;
                if(RESULT.getId()!=0 && !RESULT.getNombre().equals("vacio") && !RESULT.getApellido().equals("vacio") && !RESULT.getTelefono().equals("vacio") && !RESULT.getEmail().equals("vacio")){
                    if(hash.usuExist(RESULT.getId()-1)){
                        hash.insertar_usu(RESULT.getId(),RESULT);
                        reply.append(enlace.reply_registro_usu(RESULT.getId(),"True"));
                    }else{
                        reply.append(enlace.reply_registro_usu(RESULT.getId(),"False"));
                    }
                }

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("USUARIO",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ACCION ::= ELIMINACION 
            {
              String RESULT =null;
		
              RESULT = "eliminar";

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("ACCION",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ACCION ::= MODIFICACION 
            {
              String RESULT =null;
		
              RESULT = "modificar";

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("ACCION",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ACCIONESPRODUP ::= cantidad igual EQ 
            {
              Producto RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		Ecuacion val = (Ecuacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = new Producto();
                try{
                    RESULT.setCantidad(Integer.parseInt(val.Ecuacion));
                }catch(Exception ex){
                        reply.append(enlace.reply_error("semantico", "ecuacion encontrada sin valor exacto", valleft, valright));
                }

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("ACCIONESPRODUP",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ACCIONESPRODUP ::= color igual CONSM 
            {
              Producto RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = new Producto();
                RESULT.setColor(val);

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("ACCIONESPRODUP",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ACCIONESPRODUP ::= nombre igual cadena 
            {
              Producto RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = new Producto();
                RESULT.setNombre(val.replaceAll("\"", ""));

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("ACCIONESPRODUP",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ACCIONESPRODUP ::= sucursal igual numero 
            {
              Producto RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = new Producto();
                RESULT.setSucursal(Integer.parseInt(val));

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("ACCIONESPRODUP",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ACCIONESPRODUP ::= codigo igual numero 
            {
              Producto RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = new Producto();
                RESULT.setId(Integer.parseInt(val));

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("ACCIONESPRODUP",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ACCIONESPRODUP ::= tipo igual ACCION 
            {
              Producto RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = new Producto();
                if(val.equals("eliminar")){
                    RESULT.setEliminar(false);
                }else if(val.equals("modificar")){
                    RESULT.setModificar(true);
                }else{
                    reply.append(enlace.reply_error("semantico", "valor de Accion no Encontrado", valleft, valright));
                }

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("ACCIONESPRODUP",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ACCIONESPRODU ::= ACCIONESPRODUP 
            {
              Producto RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		Producto val = (Producto)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = val;

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("ACCIONESPRODU",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ACCIONESPRODU ::= ACCIONESPRODU ACCIONESPRODUP 
            {
              Producto RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).right;
		Producto val1 = (Producto)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		Producto val2 = (Producto)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = val1;

if(val2.getId()!=0 && RESULT.getId()==0){
                    RESULT.setId(val2.getId());
                }else if(!val2.getNombre().equals("vacio") && RESULT.getNombre().equals("vacio")){
                    RESULT.setNombre(val2.getNombre());
                }else if(val2.getCantidad()!=0 && RESULT.getCantidad()==0){
                    RESULT.setCantidad(val2.getCantidad());
                }else if(!val2.getMarca().equals("vacio") && RESULT.getMarca().equals("vacio")){
                    RESULT.setMarca(val2.getMarca());
                }else if(!val2.getColor().equals("vacio") && RESULT.getColor().equals("vacio")){
                    RESULT.setColor(val2.getColor());
                }else if(val2.getTamaño()!=0 && RESULT.getTamaño()==0){
                    RESULT.setTamaño(val2.getTamaño());
                }else if(!val2.getImg().equals("vacio") && RESULT.getImg().equals("vacio")){
                    RESULT.setImg(val2.getImg());
                }else if(val2.getSucursal()!=0 && RESULT.getSucursal()==0){
                    RESULT.setSucursal(val2.getSucursal());
                }else if(val2.isModificar()&& !RESULT.isModificar()){
                    RESULT.setModificar(true);
                }else if(val2.isEliminar() && !RESULT.isEliminar()){
                    RESULT.setEliminar(true);
                }else if(val2.getId()!=0 && RESULT.getId()!=0){
                    reply.append(enlace.reply_error("semantico", "La etiqueta id ya se ha escrito con anterioridad", val2left, val2right));
                }else if(!val2.getNombre().equals("vacio") && !RESULT.getNombre().equals("vacio")){
                    reply.append(enlace.reply_error("semantico", "La etiqueta nombre ya se ha escrito con anterioridad", val2left, val2right));
                }else if(val2.getCantidad()!=0 && RESULT.getCantidad()!=0){
                    reply.append(enlace.reply_error("semantico", "La etiqueta cantidad ya se ha escrito con anterioridad", val2left, val2right));
                }else if(!val2.getMarca().equals("vacio") && !RESULT.getMarca().equals("vacio")){
                    reply.append(enlace.reply_error("semantico", "La etiqueta marca ya se ha escrito con anterioridad", val2left, val2right));
                }else if(!val2.getColor().equals("vacio") && !RESULT.getColor().equals("vacio")){
                    reply.append(enlace.reply_error("semantico", "La etiqueta color ya se ha escrito con anterioridad", val2left, val2right));
                }else if(val2.getTamaño()!=0 && RESULT.getTamaño()!=0){
                    reply.append(enlace.reply_error("semantico", "La etiqueta tamaño ya se ha escrito con anterioridad", val2left, val2right));
                }else if(!val2.getImg().equals("vacio") && !RESULT.getImg().equals("vacio")){
                    reply.append(enlace.reply_error("semantico", "La etiqueta img ya se ha escrito con anterioridad", val2left, val2right));
                }else if(val2.getSucursal()!=0 && RESULT.getSucursal()!=0){
                    reply.append(enlace.reply_error("semantico", "La etiqueta sucursal ya se ha escrito con anterioridad", val2left, val2right));
                }else if(val2.isModificar()&& RESULT.isModificar()){
                    reply.append(enlace.reply_error("semantico", "La etiqueta Accion modificar ya ha sido validada", val2left, val2right));
                }else if(val2.isEliminar() && RESULT.isEliminar()){
                    reply.append(enlace.reply_error("semantico", "La etiqueta Accion Eliminar ya ha sido validada", val2left, val2right));
                }                                

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("ACCIONESPRODU",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // REGISPRODUP ::= DI cimagen DI cadena DI cimagen DF 
            {
              Producto RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).value;
		
                RESULT = new Producto();
                RESULT.setCimg(val.replaceAll("\"",""));

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("REGISPRODUP",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // REGISPRODUP ::= DI imagen DI cadena DI imagen DF 
            {
              Producto RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).value;
		
                RESULT = new Producto();
                RESULT.setImg(val.replaceAll("\"",""));

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("REGISPRODUP",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // REGISPRODUP ::= DI color DI CONSM DI color DF 
            {
              Producto RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).value;
		
                RESULT = new Producto();
                RESULT.setColor(val);

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("REGISPRODUP",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // REGISPRODUP ::= DI tamano DI EQ DI tamano DF 
            {
              Producto RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).right;
		Ecuacion val = (Ecuacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).value;
				
                RESULT = new Producto();
                RESULT.setTamaño(Integer.parseInt(val.Ecuacion));

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("REGISPRODUP",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // REGISPRODUP ::= DI marca DI CONSM DI marca DF 
            {
              Producto RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).value;
		
                RESULT = new Producto();
                RESULT.setMarca(val);

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("REGISPRODUP",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // REGISPRODUP ::= DI cantidad DI EQ DI cantidad DF 
            {
              Producto RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).right;
		Ecuacion val = (Ecuacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).value;
		
                RESULT = new Producto();
                RESULT.setCantidad(Integer.parseInt(val.Ecuacion));

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("REGISPRODUP",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // REGISPRODUP ::= DI nombre DI CONSM DI nombre DF 
            {
              Producto RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).value;
		
                RESULT = new Producto();
                RESULT.setNombre(val);

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("REGISPRODUP",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // REGISPRODUP ::= DI codigo DI EQ DI codigo DF 
            {
              Producto RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).right;
		Ecuacion val = (Ecuacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).value;
		
                RESULT = new Producto();
                RESULT.setId(Integer.parseInt(val.Ecuacion));

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("REGISPRODUP",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // REGISPRODU ::= REGISPRODUP 
            {
              Producto RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		Producto val = (Producto)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = val;

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("REGISPRODU",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // REGISPRODU ::= REGISPRODU REGISPRODUP 
            {
              Producto RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).right;
		Producto val1 = (Producto)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		Producto val2 = (Producto)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = val1;

                if(val2.getId()!=0 && RESULT.getId()==0){
                    RESULT.setId(val2.getId());
                }else if(!val2.getNombre().equals("vacio") && RESULT.getNombre().equals("vacio")){
                    RESULT.setNombre(val2.getNombre());
                }else if(val2.getCantidad()!=0 && RESULT.getCantidad()==0){
                    RESULT.setCantidad(val2.getCantidad());
                }else if(!val2.getMarca().equals("vacio") && RESULT.getMarca().equals("vacio")){
                    RESULT.setMarca(val2.getMarca());
                }else if(!val2.getColor().equals("vacio") && RESULT.getColor().equals("vacio")){
                    RESULT.setColor(val2.getColor());
                }else if(val2.getTamaño()!=0 && RESULT.getTamaño()==0){
                    RESULT.setTamaño(val2.getTamaño());
                }else if(!val2.getImg().equals("vacio") && RESULT.getImg().equals("vacio")){
                    RESULT.setImg(val2.getImg());
                }else if(val2.getSucursal()!=0 && RESULT.getSucursal()==0){
                    RESULT.setSucursal(val2.getSucursal());
                }

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("REGISPRODU",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CONJUNTOPP ::= DI producto ACCIONESPRODU DF 
            {
              ArrayList<Producto> RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).right;
		Producto val2 = (Producto)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).value;
		
                RESULT = new ArrayList();
                RESULT.add(val2);

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONJUNTOPP",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // CONJUNTOP ::= CONJUNTOPP 
            {
              ArrayList<Producto> RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		ArrayList<Producto> val = (ArrayList<Producto>)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = val;

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONJUNTOP",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // CONJUNTOP ::= CONJUNTOP CONJUNTOPP 
            {
              ArrayList<Producto> RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).right;
		ArrayList<Producto> val1 = (ArrayList<Producto>)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		ArrayList<Producto> val2 = (ArrayList<Producto>)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = val1;
                val2.stream().forEach(RESULT::add);

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONJUNTOP",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // PRODUCTO ::= DI tienda id igual numero DI CONJUNTOP DI tienda DF 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-5)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-5)).right;
		String val1 = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-5)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).right;
		ArrayList<Producto> val2 = (ArrayList<Producto>)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).value;
		
                val2.stream().forEach((Producto p)->{
                    p.setSucursal(Integer.parseInt(val1));
                    if(p.isEliminar()){
                        if(hash.produExist(hash.Hash_Cod_Producto(p.getSucursal(), p.getId()))){
                            hash.eliminarproduc(hash.Hash_Cod_Producto(p.getSucursal(), p.getId()));
                            reply.append(enlace.reply_eliminacion_producto(p.getId(), p.getSucursal(), "True"));
                        }else{
                            reply.append(enlace.reply_error("semantico", "No Existe Producto con id: "+p.getId(), val2left, val2right));
                            reply.append(enlace.reply_eliminacion_producto(p.getId(), p.getSucursal(), "False"));
                        }
                    }else if(p.isModificar()){
                        if(hash.produExist(hash.Hash_Cod_Producto(p.getSucursal(), p.getId()))){
                            hash.modificarprodu(hash.Hash_Cod_Producto(p.getSucursal(), p.getId()), p);
                            reply.append(enlace.reply_modificacion_producto(p.getId(), p.getSucursal(), "True"));
                        }else{
                            reply.append(enlace.reply_error("semantico", "No Existe Producto con id: "+p.getId(), val2left, val2right));
                            reply.append(enlace.reply_eliminacion_producto(p.getId(), p.getSucursal(), "False"));
                        }
                    }else if(p.isRegistro()){
                        if(!hash.produExist(hash.Hash_Cod_Producto(p.getSucursal(), p.getId()))){
                            hash.modificarprodu(hash.Hash_Cod_Producto(p.getSucursal(), p.getId()), p);
                            reply.append(enlace.reply_eliminacion_producto(p.getId(), p.getSucursal(), "True"));
                        }else{                            
                            reply.append(enlace.reply_error("semantico", "Ya Existe Producto con id: "+p.getId(), val2left, val2right));
                            reply.append(enlace.reply_eliminacion_producto(p.getId(), p.getSucursal(), "False"));
                        }
                    }else{
                        reply.append(enlace.reply_error("semantico", "No se ha especificdo ninguna accion para el producto id: "+ String.valueOf(p.getId()), val2left, val2right));
                    }
                });

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("PRODUCTO",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // PRODUCTO ::= DI producto ACCIONESPRODU DF 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).right;
		Producto val = (Producto)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).value;
		
                if(val.isEliminar()){
                        if(hash.produExist(hash.Hash_Cod_Producto(val.getSucursal(), val.getId()))){
                            hash.eliminarproduc(hash.Hash_Cod_Producto(val.getSucursal(), val.getId()));
                        }else{
                            reply.append(enlace.reply_error("semantico", "No Existe Producto con id: "+val.getId(), valleft, valright));
                        }
                    }else if(val.isModificar()){
                        if(hash.produExist(hash.Hash_Cod_Producto(val.getSucursal(), val.getId()))){
                            hash.modificarprodu(hash.Hash_Cod_Producto(val.getSucursal(), val.getId()), val);
                        }else{
                            reply.append(enlace.reply_error("semantico", "No Existe Producto con id: "+val.getId(), valleft, valright));
                        }
                    }else if(val.isRegistro()){
                        if(!hash.produExist(hash.Hash_Cod_Producto(val.getSucursal(), val.getId()))){
                            hash.modificarprodu(hash.Hash_Cod_Producto(val.getSucursal(), val.getId()), val);
                        }else{
                            reply.append(enlace.reply_error("semantico", "Ya Existe Producto con id: "+val.getId(), valleft, valright));
                        }
                    }else{
                            reply.append(enlace.reply_error("semantico","No se ha especificdo ninguna accion para el producto id: "+ String.valueOf(val.getId()), valleft, valright));
                }

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("PRODUCTO",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // PRODUCTO ::= DI producto tipo igual CREACION DI REGISPRODU DI DF 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).right;
		Producto val = (Producto)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).value;
		
                if(val!=null){
                    if(val.getId()!=0 && val.getNombre().equals("") && val.getSucursal()!=0){
                        if(!hash.produExist(hash.Hash_Cod_Producto(val.getSucursal(), val.getId()))){
                            hash.modificarprodu(hash.Hash_Cod_Producto(val.getSucursal(), val.getId()), val);
                        }else{
                            reply.append(enlace.reply_error("semantico", "Ya se Encuentra Ocupado el Id:" + val.getId(), valleft, valright));
                        }
                    }else{
                        reply.append(enlace.reply_error("semantico","ninguno de los parametros obligatorios se encuentra disponible", valleft, valright));
                    }
                }else{
                    reply.append(enlace.reply_error("semantico","no se ha epecificado ningun atributo", valleft, valright));
                }

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("PRODUCTO",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // CONSM ::= corchetei identificador coma identificador corchetef 
            {
              String RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).right;
		String val1 = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).right;
		String val2 = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).value;
		
                if(this.hash_compi.estaseccion(val1)){
                    Seccion_Mate temp1 = this.hash_compi.devolver_seccion(val1);
                    if(temp1.estacons(val2)){
                        Cons_Mate temp2 =temp1.devolverconst(val2);
                        if(temp2.valor_num!=null){
                            RESULT = temp2.valor_num;
                        }else{
                            RESULT = temp2.valor_str;
                        }
                    }else{
                        reply.append(enlace.reply_error("semantico", "No Existe Contante Declarada en la seccion mate:"+temp1.id, val2left, val2right));
                    }
                }else{
                    reply.append(enlace.reply_error("semantico", "No Existe la seccion mate:"+val1, val1left, val1right));
                }

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONSM",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // CONSM ::= avacio 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = "vacio";

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONSM",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // CONSM ::= numero 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = val;

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONSM",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // CONSM ::= cadena 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = val.replaceAll("\"", "");

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONSM",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ACCIONESTIENDAP ::= telefono igual numero 
            {
              Tienda RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = new Tienda();
                RESULT.setTelefono(val);

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("ACCIONESTIENDAP",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ACCIONESTIENDAP ::= direccion igual cadena 
            {
              Tienda RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = new Tienda();
                RESULT.setDirreccion(val.replaceAll("\"", ""));

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("ACCIONESTIENDAP",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ACCIONESTIENDAP ::= nombre igual cadena 
            {
              Tienda RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = new Tienda();
                RESULT.setNombre(val.replaceAll("\"", ""));

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("ACCIONESTIENDAP",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ACCIONESTIENDAP ::= propietario igual numero 
            {
              Tienda RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = new Tienda();
                RESULT.setPropietario(Integer.parseInt(val));

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("ACCIONESTIENDAP",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ACCIONESTIENDAP ::= codigo igual numero 
            {
              Tienda RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = new Tienda();
                RESULT.setCodigo(Integer.parseInt(val));

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("ACCIONESTIENDAP",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ACCIONESTIENDAP ::= tipo igual ACCION 
            {
              Tienda RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = new Tienda();
                if(val.equals("eliminar")){
                    RESULT.setEliminar(true);
                }else if(val.equals("modificar")){
                    RESULT.setModificar(true);
                }

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("ACCIONESTIENDAP",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ACCIONESTIENDA ::= ACCIONESTIENDAP 
            {
              Tienda RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		Tienda val = (Tienda)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT=val;

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("ACCIONESTIENDA",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ACCIONESTIENDA ::= ACCIONESTIENDA coma ACCIONESTIENDAP 
            {
              Tienda RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).right;
		Tienda val1 = (Tienda)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		Tienda val2 = (Tienda)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
RESULT = val1;
                if(val2.getCodigo()!=0 && RESULT.getCodigo()==0){
                    RESULT.setCodigo(val2.getCodigo());
                }else if(!val2.getNombre().equals("vacio") && RESULT.getNombre().equals("vacio")){
                    RESULT.setNombre(val2.getNombre());
                }else if(val2.getPropietario()!=0 && RESULT.getPropietario()==0){
                    RESULT.setPropietario(val2.getPropietario());
                }else if(!val2.getDirreccion().equals("vacio") && RESULT.getDirreccion().equals("vacio")){
                    RESULT.setDirreccion(val2.getDirreccion());
                }else if(!val2.getTelefono().equals("vacio") && RESULT.getTelefono().equals("vacio")){
                    RESULT.setTelefono(val2.getTelefono());
                }else if(!val2.getImg().equals("vacio") && RESULT.getImg().equals("vacio")){
                    RESULT.setImg(val2.getImg());
                }else if(val2.isEliminar() && !RESULT.isEliminar()){
                    RESULT.setEliminar(true);
                }else if(val2.isModificar() && !RESULT.isModificar()){
                    RESULT.setModificar(true);
                }else if(val2.getCodigo()!=0 && RESULT.getCodigo()!=0){
                    reply.append(enlace.reply_error("semantico", "Etiqueta Codigo ya ha sido declarada", val2left, val2right));
                }else if(!val2.getNombre().equals("vacio") && !RESULT.getNombre().equals("vacio")){
                    reply.append(enlace.reply_error("semantico", "Etiqueta Nombre ya ha sido declarada", val2left, val2right));
                }else if(val2.getPropietario()!=0 && RESULT.getPropietario()!=0){
                    reply.append(enlace.reply_error("semantico", "Etiqueta Propietario ya ha sido declarada", val2left, val2right));
                }else if(!val2.getDirreccion().equals("vacio") && !RESULT.getDirreccion().equals("vacio")){
                    reply.append(enlace.reply_error("semantico", "Etiqueta Dirreccion ya ha sido declarada", val2left, val2right));
                }else if(!val2.getTelefono().equals("vacio") && RESULT.getTelefono().equals("vacio")){
                    reply.append(enlace.reply_error("semantico", "Etiqueta Telefono ya ha sido declarada", val2left, val2right));
                }else if(!val2.getImg().equals("vacio") && !RESULT.getImg().equals("vacio")){
                    reply.append(enlace.reply_error("semantico", "Etiqueta img ya ha sido declarada", val2left, val2right));
                }else if(val2.isEliminar() && RESULT.isEliminar()){
                    reply.append(enlace.reply_error("semantico", "Ya se ha estipulado que la accion es eliminar", val2left, val2right));
                }else if(val2.isModificar() && !RESULT.isModificar()){
                    reply.append(enlace.reply_error("semantico", "ya se ha estipulado que la accion es modificar", val2left, val2right));
                }

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("ACCIONESTIENDA",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // CONTREGISTIENDAP ::= error DF 
            {
              Tienda RESULT =null;
		
                RESULT = new Tienda();
                System.out.println("me sincronize con DF");

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONTREGISTIENDAP",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // CONTREGISTIENDAP ::= error DI 
            {
              Tienda RESULT =null;
		
                RESULT = new Tienda();
                System.out.println("me sincronize con DI");

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONTREGISTIENDAP",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // CONTREGISTIENDAP ::= DI cimagen DI cadena DI cimagen DF 
            {
              Tienda RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).value;
		
                RESULT = new Tienda();
                RESULT.setCimg(val.replaceAll("\"",""));

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONTREGISTIENDAP",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // CONTREGISTIENDAP ::= DI imagen DI cadena DI imagen DF 
            {
              Tienda RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).value;
		
                RESULT = new Tienda();
                RESULT.setImg(val.replaceAll("\"",""));

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONTREGISTIENDAP",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // CONTREGISTIENDAP ::= DI telefono DI numero DI telefono DF 
            {
              Tienda RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).value;
		
                RESULT = new Tienda();
                RESULT.setTelefono(val);

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONTREGISTIENDAP",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CONTREGISTIENDAP ::= DI direccion DI CONSM DI direccion DF 
            {
              Tienda RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).value;
		
                RESULT = new Tienda();
                RESULT.setDirreccion(val);

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONTREGISTIENDAP",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CONTREGISTIENDAP ::= DI nombre DI CONSM DI nombre DF 
            {
              Tienda RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).value;
		
                RESULT = new Tienda();
                RESULT.setNombre(val);

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONTREGISTIENDAP",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CONTREGISTIENDAP ::= DI propietario DI numero DI propietario DF 
            {
              Tienda RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).value;
		
                RESULT = new Tienda();
                RESULT.setPropietario(Integer.parseInt(val));

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONTREGISTIENDAP",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CONTREGISTIENDAP ::= DI codigo DI numero DI codigo DF 
            {
              Tienda RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).value;
		
                RESULT = new Tienda();
                RESULT.setCodigo(Integer.parseInt(val));

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONTREGISTIENDAP",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CONTREGISTIENDA ::= CONTREGISTIENDAP 
            {
              Tienda RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		Tienda val = (Tienda)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = val;

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONTREGISTIENDA",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CONTREGISTIENDA ::= CONTREGISTIENDA CONTREGISTIENDAP 
            {
              Tienda RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).right;
		Tienda val1 = (Tienda)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		Tienda val2 = (Tienda)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = val1;
                if(val2.getCodigo()!=0 && RESULT.getCodigo()==0){
                    RESULT.setCodigo(val2.getCodigo());
                }else if(!val2.getNombre().equals("vacio") && RESULT.getNombre().equals("vacio")){
                    RESULT.setNombre(val2.getNombre());
                }else if(val2.getPropietario()!=0 && RESULT.getPropietario()==0){
                    RESULT.setPropietario(val2.getPropietario());
                }else if(!val2.getDirreccion().equals("vacio") && RESULT.getDirreccion().equals("vacio")){
                    RESULT.setDirreccion(val2.getDirreccion());
                }else if(!val2.getTelefono().equals("vacio") && RESULT.getTelefono().equals("vacio")){
                    RESULT.setTelefono(val2.getTelefono());
                }else if(!val2.getImg().equals("vacio") && RESULT.getImg().equals("vacio")){
                    RESULT.setImg(val2.getImg());
                }

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONTREGISTIENDA",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // TIENDA ::= ACCIONESTIENDA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		Tienda val = (Tienda)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                if(val.isEliminar()){
                    if(!hash.tiendaExist(hash.Hash_Cod_Tienda(val.getPropietario(), val.getCodigo()))){
                        hash.eliminartienda(hash.Hash_Cod_Tienda(val.getPropietario(), val.getCodigo()));
                        reply.append(enlace.reply_eliminar_tienda(val.getCodigo(), "True"));
                    }else{
                        reply.append(enlace.reply_error("semantico", "No Existe La tienda con id:"+val.getCodigo(), valleft, valright));
                        reply.append(enlace.reply_eliminar_tienda(val.getCodigo(), "False"));
                    }
                }else if(val.isModificar()){
                    if(!hash.tiendaExist(hash.Hash_Cod_Tienda(val.getPropietario(), val.getCodigo()))){
                        hash.modificartienda(hash.Hash_Cod_Tienda(val.getPropietario(), val.getCodigo()), val);
                        reply.append(enlace.reply_modificacion_tienda(val.getCodigo(), "True"));
                    }else{
                        reply.append(enlace.reply_error("semantico", "No Existe La tienda con id:"+val.getCodigo(), valleft, valright));
                        reply.append(enlace.reply_modificacion_tienda(val.getCodigo(), "False"));
                    }
                }

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("TIENDA",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // TIENDA ::= tipo igual CREACION DI CONTREGISTIENDA DI tienda 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).right;
		Tienda val = (Tienda)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).value;
		
                if(val!=null){
                    if(val.getCodigo()!=0 && !val.getDirreccion().equals("vacio") && !val.getImg().equals("vacio") && !val.getNombre().equals("vacio") && val.getPropietario()!=0 && !val.getTelefono().equals("vacio")){
                        if(hash.tiendaExist(hash.Hash_Cod_Tienda(val.getPropietario(), val.getCodigo()))){
                            hash.modificartienda(hash.Hash_Cod_Tienda(val.getPropietario(), val.getCodigo()), val);
                            reply.append(enlace.reply_registro_tienda(val.getCodigo(), "True"));
                        }else{
                            reply.append(enlace.reply_error("semantico","Tienda ya existente con el id:"+ String.valueOf(val.getCodigo()), valleft, valright));
                            reply.append(enlace.reply_registro_tienda(val.getCodigo(), "False"));
                        }
                    }else{
                        reply.append(enlace.reply_error("semantico","Todos los valores son nesesario, ninguno puede ser nulo", valleft, valright));
                        reply.append(enlace.reply_registro_tienda(val.getCodigo(), "False"));
                    }
                }


              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("TIENDA",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // PETICIONP ::= PRODUCTO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
//----------------------

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("PETICIONP",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // PETICIONP ::= DI tienda TIENDA DF 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).value;
		
//----------------------

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("PETICIONP",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // PETICION ::= PETICIONP 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
//----------------------

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("PETICION",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // PETICION ::= PETICION PETICIONP 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
//----------------------

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("PETICION",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CONTGETP ::= sucursal igual numero 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
            RESULT = val;

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONTGETP",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CONTGETP ::= 
            {
              String RESULT =null;
		RESULT = "";
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONTGETP",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CONTGET ::= cadena propietario igual numero CONTGETP 
            {
              ArrayList<Object> RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-4)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-4)).value;
		int val1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).right;
		String val1 = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		String val2 = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = new ArrayList();

                if(val.replaceAll("\"", "").equals("productos")){
                    if(!val2.equals("")){
                        ArrayList<Producto> temp1 = hash.get_productosc("sucursal",(Object)val2);
                        ArrayList<Producto> temp2 = new ArrayList();
                        ArrayList<Object> temp3 = new ArrayList();
                        temp1.stream().forEach((Producto p)->{
                            temp2.add(p);
                            temp3.add((Object)p);
                        });
                        RESULT = temp3;
                        reply.append(enlace.reply_lista_productos(temp2));
                    }else{
                        reply.append(enlace.reply_error("semantico", "a solicitado productos pero no ha especificado sucursal", val2left, val2right));
                        }
                }else if(val.replaceAll("\"", "").equals("tiendas")){
                    if(!val2.equals("")){
                        reply.append(enlace.reply_error("semantico", "Atributo sucursal no era nesesario para obtener tiendas", val2left, val2right));
                    }else{
                        ArrayList<Tienda> temp1 = hash.get_tiendasc("propietario",(Object)val1);
                        ArrayList<Tienda> temp2 = new ArrayList();
                        ArrayList<Object> temp3 = new ArrayList();
                        temp1.stream().forEach((Tienda p)->{
                            temp2.add(p);
                            temp3.add((Object)p);
                        });
                        RESULT = temp3;
                        reply.append(enlace.reply_lista_tiendas(temp2));
                    }
                }

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONTGET",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // GET ::= DI get tipo igual CONTGET DF 
            {
              String RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("GET",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // PETICIONES ::= error DI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).value;
		
                System.out.println("me sincronize con $" + eleft + " " + " " + eright);

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("PETICIONES",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // PETICIONES ::= error DF 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).value;
		
                System.out.println("me sincronize con -$" + eleft + " " + " " + eright);

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("PETICIONES",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // PETICIONES ::= DI request DI USUARIO DI request DF 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).right;
		Usuario val = (Usuario)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).value;
		
//----------------------

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("PETICIONES",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // PETICIONES ::= DI request DI GET DI request DF 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).value;
		
//----------------------

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("PETICIONES",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // PETICIONES ::= DI consulta DI CONSULTA DI consulta DF 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).right;
		Query val = (Query)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).value;
		
//----------------------

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("PETICIONES",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // PETICIONES ::= DI request DI PETICION DI request DF 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).value;
		
//----------------------

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("PETICIONES",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXPREG ::= identificador 
            {
              Ecuacion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = new Ecuacion();
                RESULT.variables.add(val);
                RESULT.Ecuacion=val;

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("EXPREG",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXPREG ::= numero 
            {
              Ecuacion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = new Ecuacion();
                RESULT.Ecuacion = val;

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("EXPREG",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXPREG ::= parentesisi EQP parentesisf 
            {
              Ecuacion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).right;
		Ecuacion val = (Ecuacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).value;
		
                RESULT = new Ecuacion();
                if(!val.variables.isEmpty()){
                    RESULT.Ecuacion = "("+ val.Ecuacion +")";
                    val.variables.stream().forEach(RESULT.variables::add);
                }else{
                    RESULT.Ecuacion =val.Ecuacion;
                }

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("EXPREG",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EXPREF ::= EXPREG 
            {
              Ecuacion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		Ecuacion val = (Ecuacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = val;

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("EXPREF",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EXPREF ::= llavesi EXPREG llavesf 
            {
              Ecuacion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).right;
		Ecuacion val = (Ecuacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).value;
		
                RESULT = new Ecuacion();
                if(!val.variables.isEmpty()){
                    RESULT.variables = val.variables;
                    RESULT.Ecuacion = "{" + val.Ecuacion + "}";
                }else{
                    RESULT.Ecuacion =val.Ecuacion;
                }

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("EXPREF",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EXPREE ::= EXPREF 
            {
              Ecuacion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		Ecuacion val = (Ecuacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = val;

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("EXPREE",43, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EXPREE ::= raiz corchetei EXPREF coma EXPREF corchetef 
            {
              Ecuacion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).right;
		Ecuacion val1 = (Ecuacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).right;
		Ecuacion val2 = (Ecuacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).value;
		
                RESULT = new Ecuacion();
                if(val1.variables.isEmpty() && val2.variables.isEmpty()){
                    if(!val2.Ecuacion.equals("0")){
                        RESULT.Ecuacion=String.valueOf(Math.pow((double)Integer.parseInt(val1.Ecuacion),1/(double)Integer.parseInt(val2.Ecuacion)));
                    }else{
                        reply.append(enlace.reply_error("semantico", "Se ha hecho una raiz de valor 0", val2left, val2right));
                    }
                }else{
                    RESULT.Ecuacion="Rq["+val1.Ecuacion+","+val2.Ecuacion+"]";
                    val1.variables.stream().forEach(RESULT.variables::add);
                    val2.variables.stream().forEach(RESULT.variables::add);            
                }           

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("EXPREE",43, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EXPRED ::= EXPREE 
            {
              Ecuacion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		Ecuacion val = (Ecuacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = val;

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("EXPRED",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EXPRED ::= potencia corchetei EXPREE coma EXPREE corchetef 
            {
              Ecuacion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).right;
		Ecuacion val1 = (Ecuacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).right;
		Ecuacion val2 = (Ecuacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).value;
		
                if(val1.variables.isEmpty() && val2.variables.isEmpty()){
                    try{
                        RESULT.Ecuacion=String.valueOf(Math.pow((double)Integer.parseInt(val1.Ecuacion),(double)Integer.parseInt(val2.Ecuacion)));
                    }catch(Exception ex){
                        reply.append(enlace.reply_error("semantico", "Operacion matematica invalida", val1left, val1right));    
                    }
                }else{
                    RESULT.Ecuacion="Ptn["+val1.Ecuacion+","+val2.Ecuacion+"]";
                    val1.variables.stream().forEach(RESULT.variables::add);
                    val2.variables.stream().forEach(RESULT.variables::add);            
                }

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("EXPRED",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EXPREC ::= EXPRED 
            {
              Ecuacion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		Ecuacion val = (Ecuacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = val;

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("EXPREC",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EXPREC ::= EXPREC division EXPRED 
            {
              Ecuacion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).right;
		Ecuacion val1 = (Ecuacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		Ecuacion val2 = (Ecuacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = new Ecuacion();
                if(val1.variables.isEmpty() && val2.variables.isEmpty()){
                    if(!val2.Ecuacion.equals("0")){
                        RESULT.Ecuacion = String.valueOf((double)Integer.parseInt(val1.Ecuacion)/(double)Integer.parseInt(val2.Ecuacion));
                    }else{
                        reply.append(enlace.reply_error("semantico", "Operacion matematica invalida", val1left, val1right));    
                    }
                }else{
                    RESULT.Ecuacion=val1.Ecuacion+"/"+val2.Ecuacion;
                    val1.variables.stream().forEach(RESULT.variables::add);
                    val2.variables.stream().forEach(RESULT.variables::add);                
                }              

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("EXPREC",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // EXPREB ::= EXPREC 
            {
              Ecuacion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		Ecuacion val = (Ecuacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = val;

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("EXPREB",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EXPREB ::= EXPREB multiplicacion EXPREC 
            {
              Ecuacion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).right;
		Ecuacion val1 = (Ecuacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		Ecuacion val2 = (Ecuacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = new Ecuacion();
                if(val1.variables.isEmpty() && val2.variables.isEmpty()){
                    RESULT.Ecuacion = String.valueOf((double)Integer.parseInt(val1.Ecuacion)*(double)Integer.parseInt(val2.Ecuacion));
                }else{
                    RESULT.Ecuacion=val1.Ecuacion+"*"+val2.Ecuacion;
                    val1.variables.stream().forEach(RESULT.variables::add);
                    val2.variables.stream().forEach(RESULT.variables::add);                
                }               

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("EXPREB",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // EXPREA ::= EXPREB 
            {
              Ecuacion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		Ecuacion val = (Ecuacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = val;

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("EXPREA",39, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // EXPREA ::= EXPREA resta EXPREB 
            {
              Ecuacion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).right;
		Ecuacion val1 = (Ecuacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		Ecuacion val2 = (Ecuacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = new Ecuacion();
                if(val1.variables.isEmpty() && val2.variables.isEmpty()){
                    RESULT.Ecuacion = String.valueOf((double)Integer.parseInt(val1.Ecuacion)-(double)Integer.parseInt(val2.Ecuacion));
                }else{
                    RESULT.Ecuacion=val1.Ecuacion+"-"+val2.Ecuacion;
                    val1.variables.stream().forEach(RESULT.variables::add);
                    val2.variables.stream().forEach(RESULT.variables::add);                
                }               

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("EXPREA",39, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // EQP ::= EXPREA 
            {
              Ecuacion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		Ecuacion val = (Ecuacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = val;

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("EQP",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // EQP ::= EQP suma EXPREA 
            {
              Ecuacion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).right;
		Ecuacion val1 = (Ecuacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		Ecuacion val2 = (Ecuacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = new Ecuacion();
                if(val1.variables.isEmpty() && val2.variables.isEmpty()){
                    RESULT.Ecuacion = String.valueOf((double)Integer.parseInt(val1.Ecuacion)+(double)Integer.parseInt(val2.Ecuacion));
                }else{
                    RESULT.Ecuacion=val1.Ecuacion+"-"+val2.Ecuacion;
                    val1.variables.stream().forEach(RESULT.variables::add);
                    val2.variables.stream().forEach(RESULT.variables::add);                
                }             

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("EQP",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // PARAMSNP ::= numero 
            {
              ArrayList<String> RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = new ArrayList();
                RESULT.add(val);

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("PARAMSNP",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // PARAMSNP ::= 
            {
              ArrayList<String> RESULT =null;
		RESULT=new ArrayList();
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("PARAMSNP",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // PARAMSN ::= PARAMSNP 
            {
              ArrayList<String> RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		ArrayList<String> val = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = new ArrayList();
                if(!val.isEmpty()){
                    val.stream().forEach(RESULT::add);
                }

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("PARAMSN",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // PARAMSN ::= PARAMSN coma PARAMSNP 
            {
              ArrayList<String> RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).right;
		ArrayList<String> val1 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		ArrayList<String> val2 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = new ArrayList();
                if((!val1.isEmpty() && val2.isEmpty()) || (val2.isEmpty() && val1.isEmpty())){
                    reply.append(enlace.reply_error("semantico", "Declracion Erronea", val1left, val1right));
                }
                if(!val2.isEmpty() && !val1.isEmpty()){
                    val2.stream().forEach(RESULT::add);
                    val1.stream().forEach(RESULT::add);
                }

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("PARAMSN",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CONTMATEF ::= parentesisi PARAMSN parentesisf 
            {
              ArrayList<String> RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).right;
		ArrayList<String> val = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).value;
		
                RESULT = val;

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONTMATEF",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // MATEF ::= corchetei identificador coma identificador CONTMATEF corchetef 
            {
              String RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-4)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-4)).right;
		String val1 = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-4)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).right;
		String val2 = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).value;
		int val3left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).left;
		int val3right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).right;
		ArrayList<String> val3 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).value;
		
                if(this.hash_compi.estaseccion(val1)){
                    Seccion_Mate secciontemp = this.hash_compi.devolver_seccion(val1);
                    if(secciontemp.estafuncion(val2)){
                        Funcion_Mate funciontemp = secciontemp.devolverfuncion(val2);
                        if(funciontemp.parametros.size()==val3.size()){
                           RESULT = funciontemp.devolver_entero(val3);
                        }else{
                            reply.append(enlace.reply_error("semantico","El numero de Paramteroos ingresado no coiciden con los que se nesesitan",val3left,val3right));
                        }
                    }else{
                        reply.append(enlace.reply_error("semantico", "La Funcion Declarada no Existe", val2left, val2right));
                    }
                }else{
                    reply.append(enlace.reply_error("semantico", "La seccion Mate no Existe", val1left, val1right));
                }

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("MATEF",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // EQ ::= MATEF 
            {
              Ecuacion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = new Ecuacion();
                RESULT.Ecuacion=val;


              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("EQ",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // EQ ::= EQP 
            {
              Ecuacion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		Ecuacion val = (Ecuacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = val;

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("EQ",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // PARAMSP ::= identificador 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = val;

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("PARAMSP",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // PARAMSP ::= 
            {
              String RESULT =null;
		RESULT="";
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("PARAMSP",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // PARAMS ::= PARAMSP 
            {
              ArrayList<String> RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = new ArrayList();
                if(!val.equals("")){RESULT.add(val);}

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("PARAMS",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // PARAMS ::= PARAMS coma PARAMSP 
            {
              ArrayList<String> RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).right;
		ArrayList<String> val1 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		String val2 = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = new ArrayList();
                val1.stream().forEach(RESULT::add);
                if(RESULT.isEmpty() && !val2.equals("")){
                    reply.append(enlace.reply_error("sintactico", "error,  declaracion de paramtero antes de " + val2, val1left, val1right));
                }else if(!RESULT.isEmpty() && val2.equals("")){
                    reply.append(enlace.reply_error("sintactico","Coma sobrante", val2left, val2right));    
                }else{
                    RESULT.add(val2);
                }

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("PARAMS",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CONTMATEP ::= constante identificador igual cadena pyc 
            {
              Seccion_Mate RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).right;
		String val1 = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).right;
		String val2 = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).value;
		
                Cons_Mate constante = new Cons_Mate();
                constante.id=val1;
                constante.valor_str=val2.replaceAll("\"", "");
                RESULT = new Seccion_Mate();
                RESULT.agregar_constante(constante);

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONTMATEP",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CONTMATEP ::= constante identificador igual numero pyc 
            {
              Seccion_Mate RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).right;
		String val1 = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).right;
		String val2 = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).value;
		
                Cons_Mate constante = new Cons_Mate();
                constante.id=val1;
                constante.valor_num=val2;
                RESULT = new Seccion_Mate();
                RESULT.agregar_constante(constante);
                

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONTMATEP",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CONTMATEP ::= identificador parentesisi PARAMS parentesisf igual llavesi EQ llavesf pyc 
            {
              Seccion_Mate RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-8)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-8)).right;
		String val1 = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-8)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)).right;
		ArrayList<String> val2 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-6)).value;
		int val3left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).left;
		int val3right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).right;
		Ecuacion val3 = (Ecuacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).value;
		
                Funcion_Mate funcion = new Funcion_Mate();
                funcion.id=val1;
                funcion.parametros=val2;
                if(funcion.parametros.size() == val3.variables.size()){
                    if(funcion.parametros.containsAll(val3.variables)){
                        funcion.parametros=val3.variables;
                        funcion.accion=val3.Ecuacion;
                        RESULT = new Seccion_Mate();
                        RESULT.agregar_funcion(funcion);
                    }else{
                        reply.append(enlace.reply_error("semantico", "los parametros declarados no coiciden con los de la ecuacion", val2left, val2right));
                    }
                }else if(funcion.parametros.size()<val3.variables.size()){
                    reply.append(enlace.reply_error("semantico","Hay Mas Variables que parametros declarado para la funcion " + funcion.id, val3left, val3right));
                }else if(funcion.parametros.size()>val3.variables.size()){
                    reply.append(enlace.reply_error("semantico","Hay parametros declarados demas en la funcion " + funcion.id, val1left, val1right));           
                }

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONTMATEP",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CONTMATE ::= CONTMATEP 
            {
              Seccion_Mate RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		Seccion_Mate val = (Seccion_Mate)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                if(val!=null){
                    RESULT = val;
                }

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONTMATE",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CONTMATE ::= CONTMATE CONTMATEP 
            {
              Seccion_Mate RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).right;
		Seccion_Mate val1 = (Seccion_Mate)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		Seccion_Mate val2 = (Seccion_Mate)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                if(val1!=null){
                    RESULT = val1;
                    if(val2!=null){
                        if(!val2.funciones.isEmpty()){
                            val2.funciones.stream().forEach(RESULT::agregar_funcion);
                        }
                        if(!val2.constantes.isEmpty()){
                            val2.constantes.stream().forEach(RESULT::agregar_constante);
                        }
                    }
                }else if(val2!=null){
                    RESULT = val2;
                    if(val1!=null){
                        if(!val1.funciones.isEmpty()){
                            val1.funciones.stream().forEach(RESULT::agregar_funcion);
                        }
                        if(!val1.constantes.isEmpty()){
                            val1.constantes.stream().forEach(RESULT::agregar_constante);
                        }
                    }
                }

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("CONTMATE",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // MATE ::= cadena DI CONTMATE 
            {
              Seccion_Mate RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).right;
		String val1 = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()).right;
		Seccion_Mate val2 = (Seccion_Mate)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.peek()).value;
		
                RESULT = new Seccion_Mate();
                RESULT.id = val1.replaceAll("\"", "");
                if(val2!=null){
                    val2.funciones.stream().forEach(RESULT::agregar_funcion);
                    val2.constantes.stream().forEach(RESULT::agregar_constante);
                }

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("MATE",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // REQUEST ::= DI mate nombre igual MATE DI mate DF 
            {
              StringBuilder RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).right;
		Seccion_Mate val = (Seccion_Mate)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-3)).value;
		
                this.hash_compi.agregar_seccion(val);

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("REQUEST",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // REQUEST ::= PETICIONES 
            {
              StringBuilder RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("REQUEST",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // REQUEST ::= REQUEST PETICIONES 
            {
              StringBuilder RESULT =null;
		
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("REQUEST",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIA ::= REQUEST 
            {
              Object RESULT =null;
		
                if(!Respondido){
                    enlace.enviar_Reply(reply.toString());
                }else{
                    reply = new StringBuilder();
                    Respondido = false;
                }

              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("INICIA",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_compilador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico_compilador$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.elementAt(CUP$AnalizadorSintactico_compilador$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_compilador$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico_compilador$parser.done_parsing();
          return CUP$AnalizadorSintactico_compilador$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

