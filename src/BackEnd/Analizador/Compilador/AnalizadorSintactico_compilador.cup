package BackEnd.Analizador.Compilador;
import java_cup.runtime.*;
import BackEnd.DAO.Objetos.*;
import BackEnd.DAO.Compilador.*;
import BackEnd.DAO.Hash.Tabla_Hash_compilador;
import java.util.ArrayList;
import BackEnd.Conexion.Enlace_Envio;
import java.net.InetAddress;


//import static compi1.proyecto1_server.pkg201403775.Compi1Proyecto1_Server201403775.hash;

parser code
{:
    /**Metodo al que se llama automáticamente ante algún error sintactico.*/
    @Override
    public void syntax_error(Symbol s){
		System.out.println("Error en la Línea " + (s.right+1) +" Columna "+s.left+ ". Identificador "
        +s.value + " no reconocido.");
    }

    /**Metodo al que se llama en el momento en que ya no es posible una recuperación de
    @Override
    errores.*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
		System.out.println("Error en la Línea " + (s.right+1)+ "Columna "+s.left+". Identificador " +
        s.value + " no reconocido.");
    }

:}

action code
{:
    Tabla_Hash_compilador hash_compi = new Tabla_Hash_compilador();
    ArrayList<String> errores = new ArrayList();
    private Enlace_Envio enlace=new Enlace_Envio();
        		
:}
terminal constante,DI,DF,get,request,iniciousuario,id,sucursal,password,usuario,crearusuario;
terminal String nombre,apellido,telefono,email,direccion,tienda,codigo,propietario,imagen,tipo;
terminal potencia,raiz,multiplicacion,division,suma,resta;
terminal producto,cantidad,marca,color,tamano;
terminal String correo,cadena,numero,identificador;
terminal pyc;
terminal coma,igual,corchetei,corchetef,parentesisi,parentesisf,llavesi,llavesf,mate,consulta,avacio;
terminal AND,OR,NOT;
terminal extraer,de,donde,CREACION,MODIFICACION,ELIMINACION;

non terminal INICIA;
non terminal REQUEST, MATE, CONTMATE, CONTMATEP, PARAMS, PARAMSP, VALOR;
non terminal PETICIONES, PETICION, PETICIONP, TIENDA, CONTREGISTIENDA;
non terminal CONTREGISTIENDAP, CONSM;
non terminal PRODUCTO, REGISPRODU;
non terminal REGISPRODUP;
non terminal Usuario USUARIO, REGISUSU, REGISUSUP, LOGIN, LOGINP;
non terminal CONSULTA, CONSULTAS;
non terminal ACCIONESPRODU, ACCIONESPRODUP,ACCION,ACCIONESTIENDA,ACCIONESTIENDAP;
non terminal COMPARA, COMPARAP, OL;
non terminal EQ, EQP;
non terminal EXPREA, EXPREB, EXPREC, EXPRED, EXPREE, EXPREF,EXPREG;
non terminal PARAMSN,PARAMSNP, MATEF, CONTMATEF;
non terminal String CONTGETP;
non terminal ArrayList<Object> CONTGET;

precedence left suma;
precedence left resta;
precedence left multiplicacion;
precedence left division;

start with INICIA;

INICIA ::=  REQUEST                                                                                 {::};

REQUEST ::=  REQUEST PETICIONES                                                                     {::}
            |PETICIONES                                                                             {::}
            |DI mate nombre igual MATE DI mate DF                                                   {::};  

MATE ::= cadena DI CONTMATE                                                                         {::};

CONTMATE ::=     CONTMATE CONTMATEP                                                                 {::}
                |CONTMATEP                                                                          {::};

CONTMATEP ::=    identificador parentesisi PARAMS parentesisf igual llavesi EQ llavesf pyc          {::}
                |constante identificador igual VALOR pyc                                            {::};

PARAMS ::=   PARAMS coma PARAMSP                                                                    {::}
            |PARAMSP                                                                                {::};

PARAMSP ::= identificador                                                                           {::};

EQ ::=   EQ EQP                                                                                     {::}
        |EQP                                                                                        {::}
        |MATEF                                                                                      {::};

MATEF ::= corchetei identificador coma identificador CONTMATEF corchetef                            {::};

CONTMATEF ::=                                                                                       {::}
            |parentesisi PARAMSN parentesisf                                                        {::};

PARAMSN ::=  PARAMSN coma PARAMSNP                                                                  {::}
            |PARAMSNP                                                                               {::};

PARAMSNP ::= numero                                                                                 {::};
      
EQP ::= EQP suma EXPREA                                                                             {::}
        |EXPREA                                                                                     {::};

EXPREA ::= EXPREA resta EXPREB                                                                      {::}
            |EXPREB                                                                                 {::};

EXPREB ::= EXPREB multiplicacion EXPREC                                                             {::}
            |EXPREC                                                                                 {::};

EXPREC ::= EXPREC division EXPRED                                                                   {::}
            EXPRED                                                                                  {::};

EXPRED ::= potencia corchetei EXPREE coma EXPREE corchetef                                          {::}
            |EXPREE                                                                                 {::};

EXPREE ::= raiz corchetei EXPREF coma EXPREF corchetef                                              {::}
            |EXPREF                                                                                 {::};

EXPREF ::= llavesi EXPREG llavesf                                                                   {::}
            |EXPREG                                                                                 {::};

EXPREG ::= parentesisi EQP parentesisf                                                              {::}
            |numero                                                                                 {::}
            |identificador                                                                          {::};

VALOR ::=    numero                                                                                 {::}
            |cadena                                                                                 {::};

PETICIONES ::=   DI request DI PETICION DI request DF                                               {::}
                |DI consulta DI CONSULTA DI consulta DF                                             {::}
                |DI get tipo igual CONTGET DF                                             {::}
                |DI request DI USUARIO DI request DF                                                {::};

CONTGET ::= cadena:val propietario igual numero:val1 CONTGETP:val2
{:
    RESULT = new ArrayList();
    
    if(val.replace("\n", "").equals("producto")){
        if(val2.equals("")){
            errores.add("a solicitado productos pero no ha especificado sucursal");
        }else{
            ArrayList<Producto> temp1 = hash.get_productosc("sucursal",(Object)val2);
            ArrayList<Producto> temp2 = new ArrayList();
            ArrayList<Object> temp3 = new ArrayList();
            temp1.stream().forEach((Producto p)->{
                temp2.add(p);
                temp3.add((Object)p);
            });
            RESULT = temp3;
            enlace.reply_lista_productos(temp2);
        }
    }else if(val.replace("\"","").equals("tienda")){
        if(!val2.equals("")){
            errores.add("Atributo sucursal no era nesesario para obtener tiendas");
        }else{
            ArrayList<Tienda> temp1 = hash.get_tiendasc("sucursal",(Object)val2);
            ArrayList<Tienda> temp2 = new ArrayList();
            ArrayList<Object> temp3 = new ArrayList();
            temp1.stream().forEach((Tienda p)->{
                temp2.add(p);
                temp3.add((Object)p);
            });
            RESULT = temp3;
            enlace.reply_lista_tiendas(temp2);
        }
    }
:};

CONTGETP ::=                                                                                        {:RESULT = "";:}
            |sucursal igual numero:val
{:
RESULT = val;
:};

PETICION ::=     PETICION PETICIONP                                                                 {::}
                |PETICIONP                                                                          {::};

PETICIONP ::=   DI tienda TIENDA DF                                                                 {::}
                |PRODUCTO                                                                           {::};

TIENDA ::=  tipo igual CREACION DI CONTREGISTIENDA DI tienda                                        {::}
            | ACCIONESTIENDA                                                                        {::};

CONTREGISTIENDA ::=  CONTREGISTIENDA CONTREGISTIENDAP                                               {::}
                    |CONTREGISTIENDAP                                                               {::};

CONTREGISTIENDAP ::=     DI codigo DI EQ DI codigo DF                                            {::}
                        |DI propietario DI EQ DI propietario DF                                  {::}
                        |DI nombre DI CONSM DI nombre DF                                            {::}
                        |DI direccion DI CONSM DI direccion DF                                      {::}
                        |DI telefono DI EQ DI telefono DF                                        {::}
                        |DI imagen DI identificador DI imagen DF                                    {::};

ACCIONESTIENDA ::=   ACCIONESTIENDA coma ACCIONESTIENDAP                                            {::}
                    |ACCIONESTIENDAP                                                                {::};

ACCIONESTIENDAP ::=  tipo igual ACCION                                                        {::}
                    |codigo igual numero                                                            {::}
                    |propietario igual numero                                                       {::}
                    |nombre igual cadena                                                            {::}
                    |direccion igual cadena                                                         {::}
                    |telefono igual numero                                                          {::};
      
CONSM ::=    cadena                                                                                 {::}
            |numero                                                                                 {::}
            |avacio                                                                                 {::}
            |corchetei identificador coma identificador corchetef                                   {::};

PRODUCTO ::=     DI producto tipo igual CREACION DI REGISPRODU DI DF                                {::}
                |DI producto ACCIONESPRODU DF                                                           {::}
                |DI tienda id igual numero DI ACCIONESPRODU DI tienda DF                               {::};

REGISPRODU ::=   REGISPRODU REGISPRODUP                                                             {::}
                |REGISPRODUP                                                                        {::};

REGISPRODUP ::=  DI codigo DI EQ DI codigo DF                                                    {::}
                |DI nombre DI CONSM DI nombre DF                                                    {::}
                |DI cantidad DI EQ DI cantidad DF                                                {::}
                |DI marca DI CONSM DI marca DF                                                      {::}
                |DI tamano DI EQ DI tamano DF                                                    {::}
                |DI color DI CONSM DI color DF                                                      {::}
                |DI imagen DI identificador DI imagen DF                                            {::};

ACCIONESPRODU ::=    ACCIONESPRODU ACCIONESPRODUP                                                   {::}
                    |ACCIONESPRODUP                                                                 {::};

ACCIONESPRODUP ::=   tipo igual ACCION                                                              {::}
                |codigo igual numero                                                                {::}
                |sucursal igual numero                                                              {::}
                |nombre igual cadena                                                                {::}
                |color igual CONSM                                                                  {::}
                |cantidad igual EQ                                                               {::};


ACCION ::=   MODIFICACION                                                                           {::}
            |ELIMINACION                                                                            {::};

USUARIO ::=  DI crearusuario DI REGISUSU:val DI crearusuario DF
{:
    RESULT = val;
    if(RESULT.getId()!=0 && !RESULT.getNombre().equals("vacio") && !RESULT.getApellido().equals("vacio") && RESULT.getTelefono()!=0 && !RESULT.getEmail().equals("vacio")){
        if(hash.usuExist(RESULT.getId()-1)){
            hash.insertar_usu(RESULT.getId(),RESULT);
            enlace.enviar_Reply(enlace.reply_registro_usu(RESULT.getId(),"True"));
        }else{
            enlace.enviar_Reply(enlace.reply_registro_usu(RESULT.getId(),"False"));
        }
    }
:}
            |DI iniciousuario DI LOGIN:val DI iniciousuario DF
{:

    RESULT = val;
    if(RESULT.getId()!=0 && !RESULT.getPassword().equals("vacio")){
        if(!hash.usuExist(RESULT.getId()-1)){
            Usuario prueba = hash.getusu(RESULT.getId());
            if(prueba.getPassword().equals(RESULT.getPassword())){
                enlace.reply_login(RESULT.getId(), "True");
            }else{
                enlace.reply_login(RESULT.getId(), "False");    
            }
        }else{
            enlace.reply_login(RESULT.getId(), "Fail");
        }
    }

:};

REGISUSU ::=     REGISUSU:val1 REGISUSUP:val2
{:
    RESULT = val1;
    if(val2.getId()!=0 && RESULT.getId()==0){
        RESULT.setId(val2.getId());
    }else if(val2.getId()!=0 && RESULT.getId()!=0){
        errores.add("Atributo id declarado mas de una vez");
    }
    if(!val2.getNombre().equals("vacio") && RESULT.getNombre().equals("vacio")){
        RESULT.setNombre(val2.getNombre());
    }else if(!val2.getNombre().equals("vacio") && !RESULT.getNombre().equals("vacio")){
        errores.add("Atributo nombre Declarado mas una vez");
    }
    if(!val2.getApellido().equals("vacio") && RESULT.getApellido().equals("vacio")){
        RESULT.setApellido(val2.getApellido());
    }else if(!val2.getApellido().equals("vacio") && !RESULT.getApellido().equals("vacio")){
        errores.add("Atributo Apellido declarado mas de una vez");
    }
    if(!val2.getPassword().equals("vacio") && RESULT.getPassword().equals("vacio")){
        RESULT.setPassword(val2.getPassword());
    }else if(!val2.getPassword().equals("vacio") && !RESULT.getPassword().equals("vacio")){
        errores.add("Atributo apssword declarado mas de una vez");
    }
    if(val2.getTelefono()!=0 && RESULT.getTelefono()==0){
        RESULT.setTelefono(val2.getTelefono());
    }else if(val2.getTelefono()!=0 && RESULT.getTelefono()!=0){
        errores.add("atributo Telefono declarado mas de una vez");
    }
    if(!val2.getEmail().equals("vacio") && RESULT.getEmail().equals("vacio")){
        RESULT.setEmail(val2.getEmail());
    }else if(!val2.getEmail().equals("vacio") && !RESULT.getEmail().equals("vacio")){
        errores.add("atributo correo declrado mas de una vez");
    }
    if(!val2.getDirreccion().equals("vacio") && RESULT.getDirreccion().equals("vacio")){
        RESULT.setDirreccion(val2.getDirreccion());
    }else if(!val2.getDirreccion().equals("vacio") && !RESULT.getDirreccion().equals("vacio")){
        errores.add("atributo dirreccion declarado mas de una vez");
    }
:}
                |REGISUSUP:val
{:
    RESULT = val;
:};

REGISUSUP ::=    DI id DI numero:val DI id DF
{:
    RESULT = new Usuario();
    RESULT.setId(Integer.parseInt(val));
:}
                |DI nombre DI cadena:val DI nombre DF
{:
    RESULT = new Usuario();
    RESULT.setNombre(val.replace("\"",""));
:}
                |DI apellido DI cadena:val DI apellido DF
{:
    RESULT = new Usuario();
    RESULT.setApellido(val.replace("\"",""));
:}
                |DI password DI identificador:val DI password DF
{:
    RESULT = new Usuario();
    RESULT.setPassword(val);
:}
                |DI telefono DI numero:val DI telefono DF
{:
    RESULT = new Usuario();
    RESULT.setTelefono(Integer.parseInt(val));
:}
                |DI email DI correo:val DI email DF
{:
    RESULT = new Usuario();
    RESULT.setEmail(val);
:}
                |DI direccion DI cadena:val DI direccion DF
{:
    RESULT = new Usuario();
    RESULT.setDirreccion(val.replace("\"",""));
:};

LOGIN ::=    LOGIN:val1 LOGINP:val2
{:

    RESULT= new Usuario();
    if(val1.getId()==0 && val2.getId()!=0){
        RESULT.setId(val2.getId());
    }else if(val1.getId()!=0 && val2.getId()==0){
        RESULT.setId(val1.getId());
    }else{
        errores.add("Atributos ingresado para login incorrectos");
    }
    if(val1.getPassword().equals("vacio") && !val2.getPassword().equals("vacio")){
        RESULT.setPassword(val2.getPassword());
    }else if(!val1.getPassword().equals("vacio") && val2.getPassword().equals("vacio")){
        RESULT.setPassword(val1.getPassword());    
    }else{
        errores.add("Atributos ingresados para login erroneos");
    }
    if(RESULT.getId()==0 || RESULT.getPassword()==null){
        errores.add("ERROR EN INGRESO DE DATOS PARA LOGEAR, FALLO CRITICO");
    }

:}
            |LOGINP:val
{:
RESULT = val;
:};

LOGINP ::=   DI id DI numero:val DI id DF                                                               
{:
    RESULT = new Usuario();
    RESULT.setId(Integer.parseInt(val));
:}
            |DI password DI identificador:val DI password DF                                            
{:  
    RESULT = new Usuario();
    RESULT.setPassword((String)val);
:};

CONSULTA ::=   extraer de CONSULTAS COMPARA pyc                                                     {::};

CONSULTAS ::=    usuario                                                                            {::}
                |tienda                                                                             {::}
                |producto                                                                           {::};

COMPARA ::=                                                                                         {::}
            |donde COMPARA OL COMPARAP                                                              {::}
            |COMPARAP                                                                               {::};

COMPARAP ::=     NOT parentesisi COMPARAP parentesisf                                               {::}
                |id igual igual EQ                                                               {::}
                |nombre igual igual CONSM                                                           {::}
                |apellido igual igual CONSM                                                         {::}
                |telefono igual igual EQ                                                         {::}
                |email igual igual CONSM                                                            {::}
                |direccion igual igual CONSM                                                       {::}
                |codigo igual igual CONSM                                                           {::}
                |sucursal igual igual CONSM                                                         {::}
                |cantidad igual igual EQ                                                         {::}
                |tamano igual igual EQ                                                           {::};

OL ::=   OR                                                                                         {::}
        |AND                                                                                        {::}
        |error:e pyc DI
        {://errores.add("Operador Logico Invalido");:};