/* The following code was generated by JFlex 1.4.3 on 13/04/16 11:24 AM */

package BackEnd.Analizador.Compilador;

import java_cup.runtime.Symbol;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 13/04/16 11:24 AM from the specification file
 * <tt>AnalizadorLexico_compilador.Jflex</tt>
 */
public class Lexico_Request_consola implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\17\1\17\1\0\2\70\22\0\1\70\1\0\1\15\1\20"+
    "\1\34\1\65\2\0\1\57\1\60\1\21\1\50\1\53\1\5\1\4"+
    "\1\16\1\2\1\14\10\2\1\0\1\52\1\0\1\54\2\0\1\6"+
    "\2\1\1\44\1\1\1\31\3\1\1\41\4\1\1\66\1\1\1\46"+
    "\1\1\1\47\2\1\1\42\1\64\4\1\1\55\1\0\1\56\1\0"+
    "\1\3\1\0\1\24\1\45\1\7\1\25\1\23\1\26\1\35\1\1"+
    "\1\13\2\1\1\32\1\11\1\30\1\10\1\12\1\37\1\22\1\33"+
    "\1\36\1\40\1\1\1\43\1\67\1\63\1\1\1\61\1\0\1\62"+
    "\123\0\1\1\37\0\1\51\1\0\1\27\uff0c\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\4\2\1\1"+
    "\1\5\2\1\1\6\7\2\1\7\10\2\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\2\1\1\1\22\2\0\1\3\1\23\6\2\1\24"+
    "\3\0\1\25\2\0\1\26\1\0\5\2\1\27\14\2"+
    "\1\30\1\2\1\31\1\0\10\2\1\32\4\0\10\2"+
    "\1\33\10\2\1\34\1\2\1\0\1\2\1\35\3\2"+
    "\1\36\3\2\3\0\10\2\1\37\10\2\1\0\1\2"+
    "\1\40\1\2\1\41\3\2\3\0\1\2\1\42\1\2"+
    "\1\43\7\2\1\44\3\2\1\45\1\0\1\46\4\2"+
    "\3\0\3\2\1\47\2\2\1\50\1\2\1\51\3\2"+
    "\1\0\4\2\1\52\2\0\1\53\2\2\1\54\3\2"+
    "\1\55\1\2\1\0\1\56\1\2\1\57\1\60\2\0"+
    "\1\61\1\2\1\62\1\63\2\2\1\0\1\2\2\0"+
    "\1\64\2\2\1\0\1\2\2\0\1\65\2\2\1\0"+
    "\1\66\1\0\1\67\2\2\1\70\1\0\1\2\1\71"+
    "\1\72";

  private static int [] zzUnpackAction() {
    int [] result = new int[250];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\344\0\u011d\0\u0156\0\u018f"+
    "\0\u01c8\0\u0201\0\u023a\0\u0273\0\u02ac\0\u02e5\0\71\0\u031e"+
    "\0\u0357\0\u0390\0\u03c9\0\u0402\0\u043b\0\u0474\0\71\0\u04ad"+
    "\0\u04e6\0\u051f\0\u0558\0\u0591\0\u05ca\0\u0603\0\u063c\0\71"+
    "\0\71\0\71\0\71\0\71\0\71\0\71\0\71\0\71"+
    "\0\71\0\u0675\0\u06ae\0\162\0\344\0\u06e7\0\u0720\0\71"+
    "\0\u0759\0\u0792\0\u07cb\0\u0804\0\u083d\0\u0876\0\162\0\u08af"+
    "\0\u08e8\0\u0921\0\71\0\u095a\0\u0993\0\71\0\u09cc\0\u0a05"+
    "\0\u0a3e\0\u0a77\0\u0ab0\0\u0ae9\0\162\0\u0b22\0\u0b5b\0\u0b94"+
    "\0\u0bcd\0\u0c06\0\u0c3f\0\u0c78\0\u0cb1\0\u0cea\0\u0d23\0\u0d5c"+
    "\0\u0d95\0\162\0\u0dce\0\71\0\u0e07\0\u0e40\0\u0e79\0\u0eb2"+
    "\0\u0eeb\0\u0f24\0\u0f5d\0\u0f96\0\u0fcf\0\162\0\u1008\0\u1041"+
    "\0\u107a\0\u10b3\0\u10ec\0\u1125\0\u115e\0\u1197\0\u11d0\0\u1209"+
    "\0\u1242\0\u127b\0\162\0\u12b4\0\u12ed\0\u1326\0\u135f\0\u1398"+
    "\0\u13d1\0\u140a\0\u1443\0\162\0\u147c\0\u14b5\0\u14ee\0\162"+
    "\0\u1527\0\u1560\0\u1599\0\162\0\u15d2\0\u160b\0\u1644\0\u167d"+
    "\0\u16b6\0\u16ef\0\u1728\0\u1761\0\u179a\0\u17d3\0\u180c\0\u1845"+
    "\0\u187e\0\u18b7\0\162\0\u18f0\0\u1929\0\u1962\0\u199b\0\u19d4"+
    "\0\u1a0d\0\u1a46\0\u1a7f\0\u1ab8\0\u1af1\0\162\0\u1b2a\0\162"+
    "\0\u1b63\0\u1b9c\0\u1bd5\0\u1c0e\0\u1c47\0\u1c80\0\u1cb9\0\162"+
    "\0\u1cf2\0\162\0\u1d2b\0\u1d64\0\u1d9d\0\u1dd6\0\u1e0f\0\u1e48"+
    "\0\u1e81\0\162\0\u1eba\0\u1ef3\0\u1f2c\0\162\0\u1f65\0\162"+
    "\0\u1f9e\0\u1fd7\0\u2010\0\u2049\0\u2082\0\u20bb\0\u20f4\0\u212d"+
    "\0\u2166\0\u219f\0\162\0\u21d8\0\u2211\0\162\0\u224a\0\162"+
    "\0\u2283\0\u22bc\0\u22f5\0\u232e\0\u2367\0\u23a0\0\u23d9\0\u2412"+
    "\0\71\0\u244b\0\u2484\0\162\0\u24bd\0\u24f6\0\162\0\u252f"+
    "\0\u2568\0\u25a1\0\162\0\u25da\0\u2613\0\162\0\u264c\0\162"+
    "\0\162\0\u2685\0\u26be\0\162\0\u26f7\0\162\0\162\0\u2730"+
    "\0\u2769\0\u27a2\0\u27db\0\u2814\0\u284d\0\162\0\u2886\0\u28bf"+
    "\0\u28f8\0\u2931\0\u296a\0\u29a3\0\71\0\u29dc\0\u2a15\0\u2a4e"+
    "\0\162\0\u2a87\0\71\0\u2ac0\0\u2af9\0\71\0\u2b32\0\u2b6b"+
    "\0\162\0\162";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[250];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\2\1\6\1\2\1\7"+
    "\1\3\1\10\1\11\1\12\1\4\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\3\1\2"+
    "\1\24\1\25\1\3\1\26\1\27\1\30\1\31\1\32"+
    "\1\3\1\33\1\34\1\3\1\35\1\3\1\36\1\37"+
    "\1\40\1\3\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\3\1\52\1\53\1\54\1\3"+
    "\1\15\72\0\3\3\1\0\1\55\1\56\6\3\5\0"+
    "\5\3\1\0\4\3\1\0\13\3\1\0\1\3\11\0"+
    "\2\3\1\0\2\3\2\0\1\55\1\4\1\55\1\57"+
    "\1\55\1\56\5\55\1\4\5\0\5\55\1\0\4\55"+
    "\1\0\13\55\1\0\1\55\11\0\2\55\1\0\2\55"+
    "\2\0\3\55\1\0\1\55\1\56\6\55\5\0\5\55"+
    "\1\0\4\55\1\0\13\55\1\0\1\55\11\0\2\55"+
    "\1\0\2\55\2\0\3\55\1\0\1\55\1\56\6\55"+
    "\5\0\5\55\1\0\4\55\1\60\13\55\1\0\1\55"+
    "\11\0\2\55\1\0\2\55\2\0\3\3\1\0\1\55"+
    "\1\56\1\3\1\61\4\3\5\0\2\3\1\62\2\3"+
    "\1\0\4\3\1\0\13\3\1\0\1\3\11\0\2\3"+
    "\1\0\2\3\2\0\3\3\1\0\1\55\1\56\6\3"+
    "\5\0\2\3\1\63\2\3\1\0\4\3\1\0\13\3"+
    "\1\0\1\3\11\0\2\3\1\0\2\3\2\0\3\3"+
    "\1\0\1\55\1\56\6\3\5\0\1\64\1\3\1\65"+
    "\2\3\1\0\4\3\1\0\13\3\1\0\1\3\11\0"+
    "\2\3\1\0\2\3\2\0\3\3\1\0\1\55\1\56"+
    "\2\3\1\66\3\3\5\0\3\3\1\67\1\3\1\0"+
    "\4\3\1\0\13\3\1\0\1\3\11\0\2\3\1\0"+
    "\2\3\1\0\7\70\1\71\1\70\1\72\3\70\1\73"+
    "\13\70\1\74\37\70\16\0\1\75\71\0\1\15\50\0"+
    "\1\15\20\0\1\76\1\77\50\0\3\3\1\0\1\55"+
    "\1\56\6\3\5\0\1\3\1\100\3\3\1\0\4\3"+
    "\1\0\13\3\1\0\1\3\11\0\2\3\1\0\2\3"+
    "\2\0\3\3\1\0\1\55\1\56\2\3\1\101\3\3"+
    "\5\0\5\3\1\0\4\3\1\0\13\3\1\0\1\3"+
    "\11\0\2\3\1\0\2\3\2\0\3\3\1\0\1\55"+
    "\1\56\3\3\1\102\2\3\5\0\5\3\1\0\4\3"+
    "\1\0\13\3\1\0\1\3\11\0\2\3\1\0\2\3"+
    "\2\0\3\3\1\0\1\55\1\56\1\3\1\103\2\3"+
    "\1\104\1\3\5\0\1\3\1\105\3\3\1\0\4\3"+
    "\1\0\13\3\1\0\1\3\11\0\2\3\1\0\2\3"+
    "\2\0\3\3\1\0\1\55\1\56\1\3\1\106\4\3"+
    "\5\0\5\3\1\0\4\3\1\0\13\3\1\0\1\3"+
    "\11\0\2\3\1\0\2\3\2\0\3\3\1\0\1\55"+
    "\1\56\6\3\5\0\5\3\1\0\4\3\1\0\13\3"+
    "\1\0\1\3\11\0\2\3\1\0\1\3\1\107\2\0"+
    "\3\3\1\0\1\55\1\56\6\3\5\0\5\3\1\0"+
    "\4\3\1\0\3\3\1\110\7\3\1\0\1\3\11\0"+
    "\2\3\1\0\2\3\2\0\3\3\1\0\1\55\1\56"+
    "\6\3\5\0\1\3\1\111\3\3\1\0\4\3\1\0"+
    "\13\3\1\0\1\3\11\0\2\3\1\0\2\3\2\0"+
    "\3\3\1\0\1\55\1\56\4\3\1\112\1\3\5\0"+
    "\1\3\1\113\1\114\2\3\1\0\4\3\1\0\13\3"+
    "\1\0\1\3\11\0\2\3\1\0\2\3\2\0\3\3"+
    "\1\0\1\55\1\56\6\3\5\0\5\3\1\0\4\3"+
    "\1\0\3\3\1\115\7\3\1\0\1\3\11\0\2\3"+
    "\1\0\2\3\2\0\3\3\1\0\1\55\1\56\6\3"+
    "\5\0\5\3\1\0\1\116\3\3\1\0\13\3\1\0"+
    "\1\3\11\0\2\3\1\0\2\3\2\0\3\3\1\0"+
    "\1\55\1\56\6\3\5\0\5\3\1\0\3\3\1\117"+
    "\1\0\13\3\1\0\1\3\11\0\2\3\1\0\2\3"+
    "\2\0\3\3\1\0\1\55\1\56\6\3\5\0\1\120"+
    "\4\3\1\0\4\3\1\0\13\3\1\0\1\3\11\0"+
    "\2\3\1\0\2\3\2\0\3\3\1\0\1\55\1\56"+
    "\6\3\5\0\5\3\1\0\4\3\1\0\1\3\1\121"+
    "\11\3\1\0\1\3\11\0\2\3\1\0\2\3\2\0"+
    "\3\3\1\0\1\55\1\56\6\3\5\0\5\3\1\0"+
    "\4\3\1\0\2\3\1\122\10\3\1\0\1\3\11\0"+
    "\2\3\1\0\2\3\2\0\3\3\1\0\1\55\1\56"+
    "\6\3\5\0\2\3\1\123\2\3\1\0\4\3\1\0"+
    "\13\3\1\0\1\3\11\0\2\3\1\0\2\3\66\0"+
    "\1\124\12\0\1\125\63\0\1\57\11\0\1\57\55\0"+
    "\3\3\1\0\1\55\1\56\6\3\5\0\3\3\1\126"+
    "\1\3\1\0\1\127\1\3\1\130\1\3\1\0\13\3"+
    "\1\0\1\3\11\0\2\3\1\0\2\3\2\0\3\3"+
    "\1\0\1\55\1\56\6\3\5\0\5\3\1\0\1\131"+
    "\3\3\1\0\13\3\1\0\1\3\11\0\2\3\1\0"+
    "\2\3\2\0\3\3\1\0\1\55\1\56\6\3\5\0"+
    "\1\132\4\3\1\0\4\3\1\0\1\3\1\133\11\3"+
    "\1\0\1\3\11\0\2\3\1\0\2\3\2\0\3\3"+
    "\1\0\1\55\1\56\1\3\1\134\4\3\5\0\5\3"+
    "\1\0\4\3\1\0\13\3\1\0\1\3\11\0\2\3"+
    "\1\0\2\3\2\0\3\3\1\0\1\55\1\56\6\3"+
    "\5\0\5\3\1\0\3\3\1\135\1\0\13\3\1\0"+
    "\1\3\11\0\2\3\1\0\2\3\2\0\3\3\1\0"+
    "\1\55\1\56\6\3\5\0\5\3\1\0\4\3\1\0"+
    "\1\136\12\3\1\0\1\3\11\0\2\3\1\0\2\3"+
    "\1\0\15\70\1\73\70\70\1\73\4\70\1\137\56\70"+
    "\1\140\4\70\1\73\70\70\1\73\14\70\1\141\36\70"+
    "\17\75\1\2\51\75\20\77\1\0\1\142\47\77\1\0"+
    "\3\3\1\0\1\55\1\56\6\3\5\0\5\3\1\0"+
    "\4\3\1\0\2\3\1\143\10\3\1\0\1\3\11\0"+
    "\2\3\1\0\2\3\2\0\3\3\1\0\1\55\1\56"+
    "\6\3\5\0\2\3\1\144\2\3\1\0\4\3\1\0"+
    "\13\3\1\0\1\3\11\0\2\3\1\0\2\3\2\0"+
    "\3\3\1\0\1\55\1\56\6\3\5\0\1\3\1\145"+
    "\3\3\1\0\4\3\1\0\13\3\1\0\1\3\11\0"+
    "\2\3\1\0\2\3\2\0\3\3\1\0\1\55\1\56"+
    "\6\3\5\0\5\3\1\0\1\146\3\3\1\0\13\3"+
    "\1\0\1\3\11\0\2\3\1\0\2\3\2\0\3\3"+
    "\1\0\1\55\1\56\6\3\5\0\1\147\4\3\1\0"+
    "\4\3\1\0\13\3\1\0\1\3\11\0\2\3\1\0"+
    "\2\3\2\0\3\3\1\0\1\55\1\56\2\3\1\150"+
    "\3\3\5\0\5\3\1\0\4\3\1\0\13\3\1\0"+
    "\1\3\11\0\2\3\1\0\2\3\2\0\3\3\1\0"+
    "\1\55\1\56\6\3\5\0\5\3\1\0\4\3\1\0"+
    "\1\3\1\151\11\3\1\0\1\3\11\0\2\3\1\0"+
    "\2\3\2\0\3\3\1\0\1\55\1\56\1\152\5\3"+
    "\5\0\5\3\1\0\4\3\1\0\13\3\1\0\1\3"+
    "\11\0\2\3\1\0\2\3\2\0\3\3\1\0\1\55"+
    "\1\56\6\3\5\0\5\3\1\0\4\3\1\0\1\3"+
    "\1\153\11\3\1\0\1\3\11\0\2\3\1\0\2\3"+
    "\2\0\3\3\1\0\1\55\1\56\3\3\1\154\2\3"+
    "\5\0\1\3\1\155\3\3\1\0\4\3\1\0\13\3"+
    "\1\0\1\3\11\0\2\3\1\0\2\3\2\0\3\3"+
    "\1\0\1\55\1\56\6\3\5\0\5\3\1\0\2\3"+
    "\1\156\1\3\1\0\13\3\1\0\1\3\11\0\2\3"+
    "\1\0\2\3\2\0\3\3\1\0\1\55\1\56\2\3"+
    "\1\157\3\3\5\0\5\3\1\0\4\3\1\0\13\3"+
    "\1\0\1\3\11\0\2\3\1\0\2\3\2\0\3\3"+
    "\1\0\1\55\1\56\6\3\5\0\1\3\1\160\3\3"+
    "\1\0\4\3\1\0\13\3\1\0\1\3\11\0\2\3"+
    "\1\0\2\3\2\0\3\3\1\0\1\55\1\56\4\3"+
    "\1\161\1\3\5\0\5\3\1\0\4\3\1\0\13\3"+
    "\1\0\1\3\11\0\2\3\1\0\2\3\2\0\3\3"+
    "\1\0\1\55\1\56\6\3\5\0\5\3\1\0\4\3"+
    "\1\0\3\3\1\162\7\3\1\0\1\3\11\0\2\3"+
    "\1\0\2\3\2\0\3\3\1\0\1\55\1\56\6\3"+
    "\5\0\1\3\1\163\3\3\1\0\4\3\1\0\13\3"+
    "\1\0\1\3\11\0\2\3\1\0\2\3\2\0\3\3"+
    "\1\0\1\55\1\56\6\3\5\0\5\3\1\0\1\164"+
    "\3\3\1\0\13\3\1\0\1\3\11\0\2\3\1\0"+
    "\2\3\2\0\3\3\1\0\1\55\1\56\1\165\5\3"+
    "\5\0\5\3\1\0\4\3\1\0\13\3\1\0\1\3"+
    "\11\0\2\3\1\0\2\3\11\0\1\166\61\0\3\3"+
    "\1\0\1\55\1\56\4\3\1\167\1\3\5\0\5\3"+
    "\1\0\4\3\1\0\13\3\1\0\1\3\11\0\2\3"+
    "\1\0\2\3\2\0\3\3\1\0\1\55\1\56\6\3"+
    "\5\0\5\3\1\0\3\3\1\170\1\0\13\3\1\0"+
    "\1\3\11\0\2\3\1\0\2\3\2\0\3\3\1\0"+
    "\1\55\1\56\1\3\1\171\4\3\5\0\5\3\1\0"+
    "\4\3\1\0\13\3\1\0\1\3\11\0\2\3\1\0"+
    "\2\3\2\0\3\3\1\0\1\55\1\56\6\3\5\0"+
    "\5\3\1\0\4\3\1\0\1\3\1\172\11\3\1\0"+
    "\1\3\11\0\2\3\1\0\2\3\2\0\3\3\1\0"+
    "\1\55\1\56\1\173\5\3\5\0\5\3\1\0\4\3"+
    "\1\0\13\3\1\0\1\3\11\0\2\3\1\0\2\3"+
    "\2\0\3\3\1\0\1\55\1\56\6\3\5\0\1\3"+
    "\1\174\3\3\1\0\4\3\1\0\13\3\1\0\1\3"+
    "\11\0\2\3\1\0\2\3\2\0\3\3\1\0\1\55"+
    "\1\56\3\3\1\175\2\3\5\0\3\3\1\176\1\3"+
    "\1\0\4\3\1\0\13\3\1\0\1\3\11\0\2\3"+
    "\1\0\2\3\2\0\3\3\1\0\1\55\1\56\6\3"+
    "\5\0\5\3\1\0\3\3\1\177\1\0\13\3\1\0"+
    "\1\3\11\0\2\3\1\0\2\3\1\0\15\70\1\73"+
    "\5\70\1\200\62\70\1\73\7\70\1\201\56\70\1\202"+
    "\1\70\1\73\53\70\20\77\1\2\1\142\47\77\1\0"+
    "\3\3\1\0\1\55\1\56\6\3\5\0\5\3\1\0"+
    "\4\3\1\0\3\3\1\203\7\3\1\0\1\3\11\0"+
    "\2\3\1\0\2\3\2\0\3\3\1\0\1\55\1\56"+
    "\4\3\1\204\1\3\5\0\5\3\1\0\4\3\1\0"+
    "\13\3\1\0\1\3\11\0\2\3\1\0\2\3\2\0"+
    "\3\3\1\0\1\55\1\56\6\3\5\0\5\3\1\0"+
    "\2\3\1\205\1\3\1\0\13\3\1\0\1\3\11\0"+
    "\2\3\1\0\2\3\2\0\3\3\1\0\1\55\1\56"+
    "\6\3\5\0\3\3\1\206\1\3\1\0\4\3\1\0"+
    "\13\3\1\0\1\3\11\0\2\3\1\0\2\3\2\0"+
    "\3\3\1\0\1\55\1\56\6\3\5\0\1\3\1\207"+
    "\3\3\1\0\4\3\1\0\13\3\1\0\1\3\11\0"+
    "\2\3\1\0\2\3\2\0\3\3\1\0\1\55\1\56"+
    "\6\3\5\0\5\3\1\0\4\3\1\0\10\3\1\210"+
    "\2\3\1\0\1\3\11\0\2\3\1\0\2\3\2\0"+
    "\3\3\1\0\1\55\1\56\6\3\5\0\1\211\4\3"+
    "\1\0\4\3\1\0\13\3\1\0\1\3\11\0\2\3"+
    "\1\0\2\3\2\0\3\3\1\0\1\55\1\56\6\3"+
    "\5\0\5\3\1\0\4\3\1\0\3\3\1\212\7\3"+
    "\1\0\1\3\11\0\2\3\1\0\2\3\2\0\3\3"+
    "\1\0\1\55\1\56\1\3\1\213\4\3\5\0\5\3"+
    "\1\0\4\3\1\0\13\3\1\0\1\3\11\0\2\3"+
    "\1\0\2\3\2\0\3\3\1\0\1\55\1\56\6\3"+
    "\5\0\5\3\1\0\1\214\3\3\1\0\13\3\1\0"+
    "\1\3\11\0\2\3\1\0\2\3\2\0\3\3\1\0"+
    "\1\55\1\56\6\3\5\0\1\3\1\215\3\3\1\0"+
    "\4\3\1\0\13\3\1\0\1\3\11\0\2\3\1\0"+
    "\2\3\2\0\3\3\1\0\1\55\1\56\6\3\5\0"+
    "\2\3\1\216\2\3\1\0\4\3\1\0\13\3\1\0"+
    "\1\3\11\0\2\3\1\0\2\3\2\0\3\3\1\0"+
    "\1\55\1\56\6\3\5\0\1\217\4\3\1\0\4\3"+
    "\1\0\13\3\1\0\1\3\11\0\2\3\1\0\2\3"+
    "\2\0\3\3\1\0\1\55\1\56\1\220\5\3\5\0"+
    "\5\3\1\0\4\3\1\0\13\3\1\0\1\3\11\0"+
    "\2\3\1\0\2\3\2\0\3\3\1\0\1\55\1\56"+
    "\6\3\5\0\2\3\1\221\2\3\1\0\4\3\1\0"+
    "\13\3\1\0\1\3\11\0\2\3\1\0\2\3\2\0"+
    "\3\3\1\0\1\55\1\56\6\3\5\0\2\3\1\222"+
    "\2\3\1\0\4\3\1\0\13\3\1\0\1\3\11\0"+
    "\2\3\1\0\2\3\2\0\3\3\1\0\1\55\1\56"+
    "\4\3\1\223\1\3\5\0\5\3\1\0\4\3\1\0"+
    "\13\3\1\0\1\3\11\0\2\3\1\0\2\3\12\0"+
    "\1\224\60\0\3\3\1\0\1\55\1\56\6\3\5\0"+
    "\5\3\1\0\4\3\1\0\1\225\12\3\1\0\1\3"+
    "\11\0\2\3\1\0\2\3\2\0\3\3\1\0\1\55"+
    "\1\56\6\3\5\0\1\226\4\3\1\0\4\3\1\0"+
    "\13\3\1\0\1\3\11\0\2\3\1\0\2\3\2\0"+
    "\3\3\1\0\1\55\1\56\4\3\1\227\1\3\5\0"+
    "\5\3\1\0\4\3\1\0\13\3\1\0\1\3\11\0"+
    "\2\3\1\0\2\3\2\0\3\3\1\0\1\55\1\56"+
    "\6\3\5\0\2\3\1\230\2\3\1\0\4\3\1\0"+
    "\13\3\1\0\1\3\11\0\2\3\1\0\2\3\2\0"+
    "\3\3\1\0\1\55\1\56\4\3\1\231\1\3\5\0"+
    "\5\3\1\0\4\3\1\0\13\3\1\0\1\3\11\0"+
    "\2\3\1\0\2\3\2\0\3\3\1\0\1\55\1\56"+
    "\6\3\5\0\5\3\1\0\4\3\1\0\3\3\1\232"+
    "\7\3\1\0\1\3\11\0\2\3\1\0\2\3\2\0"+
    "\3\3\1\0\1\55\1\56\6\3\5\0\5\3\1\0"+
    "\4\3\1\0\6\3\1\233\4\3\1\0\1\3\11\0"+
    "\2\3\1\0\2\3\1\0\15\70\1\73\6\70\1\234"+
    "\57\70\1\235\1\70\1\73\64\70\1\236\3\70\1\73"+
    "\53\70\1\0\3\3\1\0\1\55\1\56\6\3\5\0"+
    "\1\3\1\237\3\3\1\0\4\3\1\0\13\3\1\0"+
    "\1\3\11\0\2\3\1\0\2\3\2\0\3\3\1\0"+
    "\1\55\1\56\6\3\5\0\5\3\1\0\2\3\1\240"+
    "\1\3\1\0\13\3\1\0\1\3\11\0\2\3\1\0"+
    "\2\3\2\0\3\3\1\0\1\55\1\56\6\3\5\0"+
    "\5\3\1\0\2\3\1\241\1\3\1\0\13\3\1\0"+
    "\1\3\11\0\2\3\1\0\2\3\2\0\3\3\1\0"+
    "\1\55\1\56\6\3\5\0\1\3\1\242\3\3\1\0"+
    "\4\3\1\0\13\3\1\0\1\3\11\0\2\3\1\0"+
    "\2\3\2\0\3\3\1\0\1\55\1\56\1\243\5\3"+
    "\5\0\5\3\1\0\4\3\1\0\13\3\1\0\1\3"+
    "\11\0\2\3\1\0\2\3\2\0\3\3\1\0\1\55"+
    "\1\56\6\3\5\0\1\244\4\3\1\0\4\3\1\0"+
    "\13\3\1\0\1\3\11\0\2\3\1\0\2\3\2\0"+
    "\3\3\1\0\1\55\1\56\6\3\5\0\2\3\1\245"+
    "\2\3\1\0\4\3\1\0\13\3\1\0\1\3\11\0"+
    "\2\3\1\0\2\3\2\0\3\3\1\0\1\55\1\56"+
    "\6\3\5\0\1\246\4\3\1\0\4\3\1\0\13\3"+
    "\1\0\1\3\11\0\2\3\1\0\2\3\2\0\3\3"+
    "\1\0\1\55\1\56\6\3\5\0\3\3\1\247\1\3"+
    "\1\0\4\3\1\0\13\3\1\0\1\3\11\0\2\3"+
    "\1\0\2\3\2\0\3\3\1\0\1\55\1\56\6\3"+
    "\5\0\4\3\1\250\1\0\4\3\1\0\13\3\1\0"+
    "\1\3\11\0\2\3\1\0\2\3\2\0\3\3\1\0"+
    "\1\55\1\56\6\3\5\0\5\3\1\0\4\3\1\0"+
    "\13\3\1\0\1\251\11\0\2\3\1\0\2\3\2\0"+
    "\3\3\1\0\1\55\1\56\6\3\5\0\5\3\1\0"+
    "\4\3\1\0\13\3\1\0\1\3\11\0\1\252\1\3"+
    "\1\0\2\3\2\0\3\3\1\0\1\55\1\56\4\3"+
    "\1\253\1\3\5\0\5\3\1\0\4\3\1\0\13\3"+
    "\1\0\1\3\11\0\2\3\1\0\2\3\2\0\3\3"+
    "\1\0\1\55\1\56\6\3\5\0\1\254\4\3\1\0"+
    "\4\3\1\0\13\3\1\0\1\3\11\0\2\3\1\0"+
    "\2\3\2\0\3\3\1\0\1\55\1\56\6\3\5\0"+
    "\1\255\4\3\1\0\4\3\1\0\13\3\1\0\1\3"+
    "\11\0\2\3\1\0\2\3\2\0\3\3\1\0\1\55"+
    "\1\56\1\3\1\256\4\3\5\0\5\3\1\0\4\3"+
    "\1\0\13\3\1\0\1\3\11\0\2\3\1\0\2\3"+
    "\13\0\1\257\57\0\3\3\1\0\1\55\1\56\1\3"+
    "\1\260\4\3\5\0\5\3\1\0\4\3\1\0\13\3"+
    "\1\0\1\3\11\0\2\3\1\0\2\3\2\0\3\3"+
    "\1\0\1\55\1\56\6\3\5\0\3\3\1\261\1\3"+
    "\1\0\4\3\1\0\13\3\1\0\1\3\11\0\2\3"+
    "\1\0\2\3\2\0\3\3\1\0\1\55\1\56\6\3"+
    "\5\0\1\3\1\262\3\3\1\0\4\3\1\0\13\3"+
    "\1\0\1\3\11\0\2\3\1\0\2\3\2\0\3\3"+
    "\1\0\1\55\1\56\1\263\5\3\5\0\5\3\1\0"+
    "\4\3\1\0\13\3\1\0\1\3\11\0\2\3\1\0"+
    "\2\3\2\0\3\3\1\0\1\55\1\56\1\3\1\264"+
    "\4\3\5\0\5\3\1\0\4\3\1\0\13\3\1\0"+
    "\1\3\11\0\2\3\1\0\2\3\1\0\15\70\1\73"+
    "\4\70\1\265\63\70\1\73\10\70\1\266\55\70\1\267"+
    "\1\70\1\73\53\70\1\0\3\3\1\0\1\55\1\56"+
    "\6\3\5\0\5\3\1\0\3\3\1\270\1\0\13\3"+
    "\1\0\1\3\11\0\2\3\1\0\2\3\2\0\3\3"+
    "\1\0\1\55\1\56\4\3\1\271\1\3\5\0\5\3"+
    "\1\0\4\3\1\0\13\3\1\0\1\3\11\0\2\3"+
    "\1\0\2\3\2\0\3\3\1\0\1\55\1\56\1\272"+
    "\5\3\5\0\5\3\1\0\4\3\1\0\13\3\1\0"+
    "\1\3\11\0\2\3\1\0\2\3\2\0\3\3\1\0"+
    "\1\55\1\56\6\3\5\0\1\3\1\273\3\3\1\0"+
    "\4\3\1\0\13\3\1\0\1\3\11\0\2\3\1\0"+
    "\2\3\2\0\3\3\1\0\1\55\1\56\6\3\5\0"+
    "\1\3\1\274\3\3\1\0\4\3\1\0\13\3\1\0"+
    "\1\3\11\0\2\3\1\0\2\3\2\0\3\3\1\0"+
    "\1\55\1\56\6\3\5\0\5\3\1\0\3\3\1\275"+
    "\1\0\13\3\1\0\1\3\11\0\2\3\1\0\2\3"+
    "\2\0\3\3\1\0\1\55\1\56\6\3\5\0\2\3"+
    "\1\276\2\3\1\0\4\3\1\0\13\3\1\0\1\3"+
    "\11\0\2\3\1\0\2\3\2\0\3\3\1\0\1\55"+
    "\1\56\1\3\1\277\4\3\5\0\5\3\1\0\4\3"+
    "\1\0\13\3\1\0\1\3\11\0\2\3\1\0\2\3"+
    "\2\0\3\3\1\0\1\55\1\56\1\3\1\300\4\3"+
    "\5\0\5\3\1\0\4\3\1\0\13\3\1\0\1\3"+
    "\11\0\2\3\1\0\2\3\2\0\3\3\1\0\1\55"+
    "\1\56\1\3\1\301\4\3\5\0\5\3\1\0\4\3"+
    "\1\0\13\3\1\0\1\3\11\0\2\3\1\0\2\3"+
    "\2\0\3\3\1\0\1\55\1\56\4\3\1\302\1\3"+
    "\5\0\5\3\1\0\4\3\1\0\13\3\1\0\1\3"+
    "\11\0\2\3\1\0\2\3\2\0\3\3\1\0\1\55"+
    "\1\56\6\3\5\0\5\3\1\0\4\3\1\0\5\3"+
    "\1\303\5\3\1\0\1\3\11\0\2\3\1\0\2\3"+
    "\14\0\1\304\56\0\3\3\1\0\1\55\1\56\6\3"+
    "\5\0\2\3\1\305\2\3\1\0\4\3\1\0\13\3"+
    "\1\0\1\3\11\0\2\3\1\0\2\3\2\0\3\3"+
    "\1\0\1\55\1\56\6\3\5\0\5\3\1\0\4\3"+
    "\1\0\1\3\1\306\11\3\1\0\1\3\11\0\2\3"+
    "\1\0\2\3\2\0\3\3\1\0\1\55\1\56\6\3"+
    "\5\0\5\3\1\0\4\3\1\0\1\3\1\307\11\3"+
    "\1\0\1\3\11\0\2\3\1\0\2\3\2\0\3\3"+
    "\1\0\1\55\1\56\6\3\5\0\1\310\4\3\1\0"+
    "\4\3\1\0\13\3\1\0\1\3\11\0\2\3\1\0"+
    "\2\3\1\0\15\70\1\311\66\70\1\312\1\70\1\73"+
    "\70\70\1\73\12\70\1\313\40\70\1\0\3\3\1\0"+
    "\1\55\1\56\6\3\5\0\5\3\1\0\4\3\1\0"+
    "\1\3\1\314\11\3\1\0\1\3\11\0\2\3\1\0"+
    "\2\3\2\0\3\3\1\0\1\55\1\56\6\3\5\0"+
    "\3\3\1\315\1\3\1\0\4\3\1\0\13\3\1\0"+
    "\1\3\11\0\2\3\1\0\2\3\2\0\3\3\1\0"+
    "\1\55\1\56\4\3\1\316\1\3\5\0\5\3\1\0"+
    "\4\3\1\0\13\3\1\0\1\3\11\0\2\3\1\0"+
    "\2\3\2\0\3\3\1\0\1\55\1\56\6\3\5\0"+
    "\1\317\4\3\1\0\4\3\1\0\13\3\1\0\1\3"+
    "\11\0\2\3\1\0\2\3\2\0\3\3\1\0\1\55"+
    "\1\56\6\3\5\0\2\3\1\320\2\3\1\0\4\3"+
    "\1\0\13\3\1\0\1\3\11\0\2\3\1\0\2\3"+
    "\2\0\3\3\1\0\1\55\1\56\6\3\5\0\5\3"+
    "\1\0\1\321\3\3\1\0\13\3\1\0\1\3\11\0"+
    "\2\3\1\0\2\3\2\0\3\3\1\0\1\55\1\56"+
    "\6\3\5\0\5\3\1\0\4\3\1\0\5\3\1\322"+
    "\5\3\1\0\1\3\11\0\2\3\1\0\2\3\2\0"+
    "\3\3\1\0\1\55\1\56\1\3\1\323\4\3\5\0"+
    "\5\3\1\0\4\3\1\0\13\3\1\0\1\3\11\0"+
    "\2\3\1\0\2\3\2\0\3\3\1\0\1\55\1\56"+
    "\6\3\5\0\5\3\1\0\3\3\1\324\1\0\13\3"+
    "\1\0\1\3\11\0\2\3\1\0\2\3\15\0\1\325"+
    "\55\0\3\3\1\0\1\55\1\56\6\3\5\0\3\3"+
    "\1\326\1\3\1\0\4\3\1\0\13\3\1\0\1\3"+
    "\11\0\2\3\1\0\2\3\2\0\3\3\1\0\1\55"+
    "\1\56\6\3\5\0\2\3\1\327\2\3\1\0\4\3"+
    "\1\0\13\3\1\0\1\3\11\0\2\3\1\0\2\3"+
    "\2\0\3\3\1\0\1\55\1\56\1\3\1\330\4\3"+
    "\5\0\5\3\1\0\4\3\1\0\13\3\1\0\1\3"+
    "\11\0\2\3\1\0\2\3\2\0\3\3\1\0\1\55"+
    "\1\56\6\3\5\0\3\3\1\331\1\3\1\0\4\3"+
    "\1\0\13\3\1\0\1\3\11\0\2\3\1\0\2\3"+
    "\1\0\7\70\1\332\5\70\1\73\70\70\1\73\6\70"+
    "\1\333\44\70\1\0\3\3\1\0\1\55\1\56\1\3"+
    "\1\334\4\3\5\0\5\3\1\0\4\3\1\0\13\3"+
    "\1\0\1\3\11\0\2\3\1\0\2\3\2\0\3\3"+
    "\1\0\1\55\1\56\1\3\1\335\4\3\5\0\5\3"+
    "\1\0\4\3\1\0\13\3\1\0\1\3\11\0\2\3"+
    "\1\0\2\3\2\0\3\3\1\0\1\55\1\56\6\3"+
    "\5\0\5\3\1\0\2\3\1\336\1\3\1\0\13\3"+
    "\1\0\1\3\11\0\2\3\1\0\2\3\2\0\3\3"+
    "\1\0\1\55\1\56\1\3\1\337\4\3\5\0\5\3"+
    "\1\0\4\3\1\0\13\3\1\0\1\3\11\0\2\3"+
    "\1\0\2\3\2\0\3\3\1\0\1\55\1\56\6\3"+
    "\5\0\5\3\1\0\3\3\1\340\1\0\13\3\1\0"+
    "\1\3\11\0\2\3\1\0\2\3\2\0\3\3\1\0"+
    "\1\55\1\56\6\3\5\0\5\3\1\0\4\3\1\0"+
    "\3\3\1\341\7\3\1\0\1\3\11\0\2\3\1\0"+
    "\2\3\5\0\1\342\65\0\3\3\1\0\1\55\1\56"+
    "\6\3\5\0\1\343\4\3\1\0\4\3\1\0\13\3"+
    "\1\0\1\3\11\0\2\3\1\0\2\3\1\0\15\70"+
    "\1\73\6\70\1\344\61\70\1\73\4\70\1\345\46\70"+
    "\1\0\3\3\1\0\1\55\1\56\6\3\5\0\5\3"+
    "\1\0\1\346\3\3\1\0\13\3\1\0\1\3\11\0"+
    "\2\3\1\0\2\3\2\0\3\3\1\0\1\55\1\56"+
    "\6\3\5\0\5\3\1\0\4\3\1\0\3\3\1\347"+
    "\7\3\1\0\1\3\11\0\2\3\1\0\2\3\2\0"+
    "\3\3\1\0\1\55\1\56\6\3\5\0\2\3\1\350"+
    "\2\3\1\0\4\3\1\0\13\3\1\0\1\3\11\0"+
    "\2\3\1\0\2\3\10\0\1\351\62\0\3\3\1\0"+
    "\1\55\1\56\4\3\1\352\1\3\5\0\5\3\1\0"+
    "\4\3\1\0\13\3\1\0\1\3\11\0\2\3\1\0"+
    "\2\3\1\0\7\70\1\353\5\70\1\73\4\70\1\354"+
    "\63\70\1\355\53\70\1\0\3\3\1\0\1\55\1\56"+
    "\6\3\5\0\2\3\1\356\2\3\1\0\4\3\1\0"+
    "\13\3\1\0\1\3\11\0\2\3\1\0\2\3\2\0"+
    "\3\3\1\0\1\55\1\56\6\3\5\0\1\357\4\3"+
    "\1\0\4\3\1\0\13\3\1\0\1\3\11\0\2\3"+
    "\1\0\2\3\11\0\1\360\61\0\3\3\1\0\1\55"+
    "\1\56\1\3\1\361\4\3\5\0\5\3\1\0\4\3"+
    "\1\0\13\3\1\0\1\3\11\0\2\3\1\0\2\3"+
    "\1\0\13\70\1\362\1\70\1\73\70\70\1\363\53\70"+
    "\1\0\3\3\1\0\1\55\1\56\6\3\5\0\1\364"+
    "\4\3\1\0\4\3\1\0\13\3\1\0\1\3\11\0"+
    "\2\3\1\0\2\3\2\0\3\3\1\0\1\55\1\56"+
    "\4\3\1\365\1\3\5\0\5\3\1\0\4\3\1\0"+
    "\13\3\1\0\1\3\11\0\2\3\1\0\2\3\12\0"+
    "\1\366\57\0\15\70\1\73\11\70\1\367\41\70\1\0"+
    "\3\3\1\0\1\55\1\56\4\3\1\370\1\3\5\0"+
    "\5\3\1\0\4\3\1\0\13\3\1\0\1\3\11\0"+
    "\2\3\1\0\2\3\2\0\3\3\1\0\1\55\1\56"+
    "\1\3\1\371\4\3\5\0\5\3\1\0\4\3\1\0"+
    "\13\3\1\0\1\3\11\0\2\3\1\0\2\3\1\0"+
    "\15\70\1\73\12\70\1\354\40\70\1\0\3\3\1\0"+
    "\1\55\1\56\1\3\1\372\4\3\5\0\5\3\1\0"+
    "\4\3\1\0\13\3\1\0\1\3\11\0\2\3\1\0"+
    "\2\3\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11172];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\14\1\1\11\7\1\1\11\10\1\12\11"+
    "\3\1\2\0\1\1\1\11\7\1\3\0\1\11\2\0"+
    "\1\11\1\0\24\1\1\11\1\0\11\1\4\0\23\1"+
    "\1\0\11\1\3\0\21\1\1\0\7\1\3\0\20\1"+
    "\1\0\5\1\3\0\14\1\1\0\4\1\1\11\2\0"+
    "\11\1\1\0\4\1\2\0\6\1\1\0\1\1\2\0"+
    "\3\1\1\0\1\1\2\0\1\11\2\1\1\0\1\1"+
    "\1\0\1\11\2\1\1\11\1\0\3\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[250];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
		


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexico_Request_consola(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexico_Request_consola(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 174) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 9: 
          { return new Symbol(Simbolo.pyc, yycolumn,yyline,yytext());
          }
        case 59: break;
        case 32: 
          { return new Symbol(Simbolo.color, yycolumn,yyline,yytext());
          }
        case 60: break;
        case 29: 
          { return new Symbol(Simbolo.constante, yycolumn,yyline,yytext());
          }
        case 61: break;
        case 37: 
          { return new Symbol(Simbolo.avacio, yycolumn,yyline,yytext());
          }
        case 62: break;
        case 42: 
          { return new Symbol(Simbolo.CREACION, yycolumn,yyline,yytext());
          }
        case 63: break;
        case 4: 
          { return new Symbol(Simbolo.resta, yycolumn,yyline,yytext());
          }
        case 64: break;
        case 18: 
          { return new Symbol(Simbolo.NOT, yycolumn,yyline,yytext());
          }
        case 65: break;
        case 27: 
          { return new Symbol(Simbolo.get, yycolumn,yyline,yytext());
          }
        case 66: break;
        case 30: 
          { return new Symbol(Simbolo.mate, yycolumn,yyline,yytext());
          }
        case 67: break;
        case 58: 
          { return new Symbol(Simbolo.iniciousuario, yycolumn,yyline,yytext());
          }
        case 68: break;
        case 13: 
          { return new Symbol(Simbolo.corchetef, yycolumn,yyline,yytext());
          }
        case 69: break;
        case 48: 
          { return new Symbol(Simbolo.password, yycolumn,yyline,yytext());
          }
        case 70: break;
        case 17: 
          { return new Symbol(Simbolo.llavesf, yycolumn,yyline,yytext());
          }
        case 71: break;
        case 16: 
          { return new Symbol(Simbolo.llavesi, yycolumn,yyline,yytext());
          }
        case 72: break;
        case 36: 
          { return new Symbol(Simbolo.consulta ,yycolumn,yyline,yytext());
          }
        case 73: break;
        case 39: 
          { return new Symbol(Simbolo.nombre, yycolumn,yyline,yytext());
          }
        case 74: break;
        case 22: 
          { return new Symbol(Simbolo.OR, yycolumn,yyline,yytext());
          }
        case 75: break;
        case 25: 
          { return new Symbol(Simbolo.AND, yycolumn,yyline,yytext());
          }
        case 76: break;
        case 40: 
          { return new Symbol(Simbolo.tienda, yycolumn,yyline,yytext());
          }
        case 77: break;
        case 28: 
          { return new Symbol(Simbolo.potencia, yycolumn,yyline,yytext());
          }
        case 78: break;
        case 51: 
          { return new Symbol(Simbolo.telefono, yycolumn,yyline,yytext());
          }
        case 79: break;
        case 41: 
          { return new Symbol(Simbolo.tamano, yycolumn,yyline,yytext());
          }
        case 80: break;
        case 23: 
          { return new Symbol(Simbolo.de, yycolumn,yyline,yytext());
          }
        case 81: break;
        case 26: 
          { return new Symbol(Simbolo.imagen, yycolumn,yyline,yytext());
          }
        case 82: break;
        case 53: 
          { return new Symbol(Simbolo.ELIMINACION, yycolumn,yyline,yytext());
          }
        case 83: break;
        case 31: 
          { return new Symbol(Simbolo.tipo, yycolumn,yyline,yytext());
          }
        case 84: break;
        case 20: 
          { return new Symbol(Simbolo.id, yycolumn,yyline, yytext());
          }
        case 85: break;
        case 24: 
          { return new Symbol(Simbolo.raiz, yycolumn,yyline,yytext());
          }
        case 86: break;
        case 55: 
          { return new Symbol(Simbolo.MODIFICACION, yycolumn,yyline,yytext());
          }
        case 87: break;
        case 12: 
          { return new Symbol(Simbolo.corchetei,yycolumn,yyline,yytext());
          }
        case 88: break;
        case 47: 
          { return new Symbol(Simbolo.producto, yycolumn,yyline,yytext());
          }
        case 89: break;
        case 43: 
          { return new Symbol(Simbolo.request, yycolumn,yyline,yytext());
          }
        case 90: break;
        case 3: 
          { return new Symbol(Simbolo.numero, yycolumn,yyline,yytext());
          }
        case 91: break;
        case 56: 
          { return new Symbol(Simbolo.correo, yycolumn,yyline,yytext());
          }
        case 92: break;
        case 7: 
          { return new Symbol(Simbolo.DI, yycolumn,yyline,yytext());
          }
        case 93: break;
        case 19: 
          { return new Symbol(Simbolo.DF, yycolumn,yyline,yytext());
          }
        case 94: break;
        case 52: 
          { return new Symbol(Simbolo.direccion, yycolumn,yyline,yytext());
          }
        case 95: break;
        case 44: 
          { return new Symbol(Simbolo.extraer, yycolumn,yyline,yytext());
          }
        case 96: break;
        case 33: 
          { return new Symbol(Simbolo.marca, yycolumn,yyline,yytext());
          }
        case 97: break;
        case 11: 
          { return new Symbol(Simbolo.igual, yycolumn,yyline,yytext());
          }
        case 98: break;
        case 35: 
          { return new Symbol(Simbolo.donde, yycolumn,yyline,yytext());
          }
        case 99: break;
        case 8: 
          { return new Symbol(Simbolo.suma, yycolumn,yyline,yytext());
          }
        case 100: break;
        case 21: 
          { return new Symbol(Simbolo.cadena, yycolumn,yyline,yytext());
          }
        case 101: break;
        case 38: 
          { return new Symbol(Simbolo.codigo, yycolumn,yyline,yytext());
          }
        case 102: break;
        case 5: 
          { return new Symbol(Simbolo.division, yycolumn,yyline,yytext());
          }
        case 103: break;
        case 6: 
          { return new Symbol(Simbolo.multiplicacion, yycolumn,yyline,yytext());
          }
        case 104: break;
        case 15: 
          { return new Symbol(Simbolo.parentesisf, yycolumn,yyline,yytext());
          }
        case 105: break;
        case 14: 
          { return new Symbol(Simbolo.parentesisi, yycolumn,yyline,yytext());
          }
        case 106: break;
        case 2: 
          { return new Symbol(Simbolo.identificador, yycolumn,yyline,yytext());
          }
        case 107: break;
        case 10: 
          { return new Symbol(Simbolo.coma, yycolumn,yyline,yytext());
          }
        case 108: break;
        case 57: 
          { return new Symbol(Simbolo.crearusuario, yycolumn,yyline,yytext());
          }
        case 109: break;
        case 54: 
          { return new Symbol(Simbolo.propietario, yycolumn,yyline,yytext());
          }
        case 110: break;
        case 46: 
          { return new Symbol(Simbolo.cantidad, yycolumn,yyline,yytext());
          }
        case 111: break;
        case 45: 
          { return new Symbol(Simbolo.usuario, yycolumn,yyline,yytext());
          }
        case 112: break;
        case 50: 
          { return new Symbol(Simbolo.sucursal, yycolumn,yyline,yytext());
          }
        case 113: break;
        case 49: 
          { return new Symbol(Simbolo.apellido, yycolumn,yyline,yytext());
          }
        case 114: break;
        case 1: 
          { 
          }
        case 115: break;
        case 34: 
          { return new Symbol(Simbolo.email, yycolumn,yyline,yytext());
          }
        case 116: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(Simbolo_consola.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
